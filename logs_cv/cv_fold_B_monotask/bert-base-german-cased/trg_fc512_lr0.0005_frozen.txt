06/29/2021 09:48:52 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 09:48:52 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 09:48:52 - INFO - __main__ -   device: cuda
06/29/2021 09:48:52 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 09:48:53 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:48:53 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:48:53 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:48:54 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:48:54 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:48:54 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 09:48:54 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 09:48:54 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 09:48:54 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 09:48:54 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   train OOV: 528 (0.45%) out of 117560 running tokens are OOV
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   val OOV: 163 (0.57%) out of 28568 running tokens are OOV
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:48:55 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:48:57 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 09:48:59 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 09:48:59 - INFO - __main__ -   the model has 394,754 trainable parameters
06/29/2021 09:48:59 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 09:49:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:49:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:49:08 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.536 | val_loss: 0.627
06/29/2021 09:49:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6666666666666666, 'f1': 0.663172485489041, 'precision': 0.6880771162539119, 'recall': 0.7067969413763806}
06/29/2021 09:49:08 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:49:09 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:49:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:49:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:49:18 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.481 | val_loss: 0.484
06/29/2021 09:49:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7577160493827161, 'f1': 0.7035448386391783, 'precision': 0.7406225432062574, 'recall': 0.6917799490229397}
06/29/2021 09:49:18 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:49:21 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:49:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:49:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:49:31 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.469 | val_loss: 0.495
06/29/2021 09:49:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.75, 'f1': 0.7110169024940813, 'precision': 0.7215122960239025, 'recall': 0.7047153780798641}
06/29/2021 09:49:31 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:49:34 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:49:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:49:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:49:44 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.435 | val_loss: 0.501
06/29/2021 09:49:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7530864197530864, 'f1': 0.7298621171222811, 'precision': 0.726439844230375, 'recall': 0.7346644010195411}
06/29/2021 09:49:44 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:49:47 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:49:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:49:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:49:57 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.432 | val_loss: 0.526
06/29/2021 09:49:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.727357541388457, 'precision': 0.7243882334758642, 'recall': 0.7312871707731521}
06/29/2021 09:49:57 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:50:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:50:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:50:06 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.400 | val_loss: 0.496
06/29/2021 09:50:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7530864197530864, 'f1': 0.7247238742565845, 'precision': 0.7247238742565845, 'recall': 0.7247238742565845}
06/29/2021 09:50:06 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:50:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:50:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:50:16 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.368 | val_loss: 0.594
06/29/2021 09:50:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.6971916971916972, 'precision': 0.7560574069425783, 'recall': 0.6841758708581138}
06/29/2021 09:50:16 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:50:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:50:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:50:25 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.370 | val_loss: 0.534
06/29/2021 09:50:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7343793688496778, 'precision': 0.7407425957461018, 'recall': 0.7297153780798641}
06/29/2021 09:50:25 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:50:28 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:50:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:50:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:50:38 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.333 | val_loss: 0.525
06/29/2021 09:50:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7700617283950617, 'f1': 0.7331512922064103, 'precision': 0.7462213045344346, 'recall': 0.7254248088360238}
06/29/2021 09:50:38 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:50:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:50:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:50:47 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.322 | val_loss: 0.513
06/29/2021 09:50:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.7270818144586222, 'precision': 0.765478312537136, 'recall': 0.7135301614273577}
06/29/2021 09:50:47 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:50:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:50:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:50:57 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.298 | val_loss: 0.518
06/29/2021 09:50:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7395584429884932, 'precision': 0.7512985520569984, 'recall': 0.7322429906542056}
06/29/2021 09:50:57 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:51:00 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:51:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:51:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:51:10 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.274 | val_loss: 0.571
06/29/2021 09:51:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7110892615131141, 'precision': 0.7577580835006578, 'recall': 0.6976847918436704}
06/29/2021 09:51:10 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:51:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:51:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:51:19 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.253 | val_loss: 0.548
06/29/2021 09:51:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.779320987654321, 'f1': 0.7478276724459334, 'precision': 0.7554196371613077, 'recall': 0.7423746813933729}
06/29/2021 09:51:19 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:51:23 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:51:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:51:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:51:32 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.247 | val_loss: 0.590
06/29/2021 09:51:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7716049382716049, 'f1': 0.7345879227320529, 'precision': 0.7482893450635386, 'recall': 0.7265930331350892}
06/29/2021 09:51:32 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:51:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:51:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:51:42 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.216 | val_loss: 0.587
06/29/2021 09:51:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7685185185185185, 'f1': 0.7364625245371826, 'precision': 0.7424632597788927, 'recall': 0.7319881053525914}
06/29/2021 09:51:42 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:51:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:51:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:51:52 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.203 | val_loss: 0.612
06/29/2021 09:51:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7654320987654321, 'f1': 0.7418110137147171, 'precision': 0.7391412466843501, 'recall': 0.7451146983857264}
06/29/2021 09:51:52 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:52:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:52:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:52:01 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.199 | val_loss: 0.573
06/29/2021 09:52:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.779320987654321, 'f1': 0.739631070961941, 'precision': 0.7606342494714587, 'recall': 0.7291206457094308}
06/29/2021 09:52:01 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:52:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:52:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:52:11 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.170 | val_loss: 0.726
06/29/2021 09:52:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7901234567901234, 'f1': 0.746031746031746, 'precision': 0.781890984241798, 'recall': 0.7317757009345794}
06/29/2021 09:52:11 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:52:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:52:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:52:20 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.170 | val_loss: 0.638
06/29/2021 09:52:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.779320987654321, 'f1': 0.7381300250102443, 'precision': 0.7619441685975946, 'recall': 0.726911639762107}
06/29/2021 09:52:20 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:52:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:52:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:52:30 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.153 | val_loss: 0.659
06/29/2021 09:52:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7422839506172839, 'f1': 0.712362083126231, 'precision': 0.7126001852029249, 'recall': 0.7121282922684792}
06/29/2021 09:52:30 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:52:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:52:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:52:40 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.121 | val_loss: 0.728
06/29/2021 09:52:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7245627980922098, 'precision': 0.7366790009250693, 'recall': 0.717374681393373}
06/29/2021 09:52:40 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:52:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:52:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:52:49 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.119 | val_loss: 0.751
06/29/2021 09:52:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.718578997654825, 'precision': 0.7367123682032459, 'recall': 0.7095794392523365}
06/29/2021 09:52:49 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:52:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:52:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:52:59 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.137 | val_loss: 0.698
06/29/2021 09:52:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7592592592592593, 'f1': 0.7310087173100872, 'precision': 0.7315340302965649, 'recall': 0.730501274426508}
06/29/2021 09:52:59 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:52:59 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:52:59 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 09:52:59 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 09:53:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:53:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:53:02 - INFO - __main__ -   best_val_loss: 0.548
06/29/2021 09:53:02 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.779320987654321, 'f1': 0.7478276724459334, 'precision': 0.7554196371613077, 'recall': 0.7423746813933729}
