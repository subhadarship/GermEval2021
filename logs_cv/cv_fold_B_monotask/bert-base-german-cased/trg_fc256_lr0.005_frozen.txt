06/29/2021 09:33:00 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 09:33:00 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 09:33:01 - INFO - __main__ -   device: cuda
06/29/2021 09:33:01 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 09:33:02 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:33:02 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:33:02 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:33:03 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:33:03 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:33:03 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 09:33:03 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 09:33:03 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 09:33:03 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 09:33:03 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   train OOV: 528 (0.45%) out of 117560 running tokens are OOV
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   val OOV: 163 (0.57%) out of 28568 running tokens are OOV
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:33:04 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:33:06 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 09:33:08 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 09:33:08 - INFO - __main__ -   the model has 197,378 trainable parameters
06/29/2021 09:33:08 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 09:33:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:17 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.573 | val_loss: 0.669
06/29/2021 09:33:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6728395061728395, 'f1': 0.6675153686044824, 'precision': 0.6845882938406769, 'recall': 0.7048428207306712}
06/29/2021 09:33:17 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:33:18 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:33:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:27 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.526 | val_loss: 0.549
06/29/2021 09:33:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.75, 'f1': 0.653475935828877, 'precision': 0.786932053298022, 'recall': 0.6472812234494478}
06/29/2021 09:33:27 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:33:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:37 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.491 | val_loss: 0.514
06/29/2021 09:33:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7407407407407407, 'f1': 0.7010938804199798, 'precision': 0.7102521929824561, 'recall': 0.6954970263381479}
06/29/2021 09:33:37 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:33:40 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:33:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:49 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.461 | val_loss: 0.588
06/29/2021 09:33:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7175925925925926, 'f1': 0.7022709298384364, 'precision': 0.6998118824362194, 'recall': 0.7188402718776551}
06/29/2021 09:33:49 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:33:52 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:34:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:02 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.454 | val_loss: 0.565
06/29/2021 09:34:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.725671372563456, 'precision': 0.723718356244333, 'recall': 0.7279736618521665}
06/29/2021 09:34:02 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:34:05 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:34:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:15 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.431 | val_loss: 0.545
06/29/2021 09:34:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7438271604938271, 'f1': 0.7180304491884411, 'precision': 0.7156415782493368, 'recall': 0.7210280373831776}
06/29/2021 09:34:15 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:34:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:24 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.421 | val_loss: 0.673
06/29/2021 09:34:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.663830020332342, 'precision': 0.7732052313506839, 'recall': 0.6550764655904843}
06/29/2021 09:34:24 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:34:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:34 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.419 | val_loss: 0.578
06/29/2021 09:34:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7422839506172839, 'f1': 0.7171969528687723, 'precision': 0.71437329349338, 'recall': 0.720964316057774}
06/29/2021 09:34:34 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:34:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:43 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.400 | val_loss: 0.553
06/29/2021 09:34:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7159027500996413, 'precision': 0.74151377293406, 'recall': 0.7052251486830926}
06/29/2021 09:34:43 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:34:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:53 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.370 | val_loss: 0.590
06/29/2021 09:34:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.7188859113473618, 'precision': 0.7287554824561404, 'recall': 0.7127017841971113}
06/29/2021 09:34:53 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:35:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:03 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.353 | val_loss: 0.662
06/29/2021 09:35:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.75, 'f1': 0.7029037187977586, 'precision': 0.7244154565591927, 'recall': 0.6936703483432456}
06/29/2021 09:35:03 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:35:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:12 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.353 | val_loss: 0.669
06/29/2021 09:35:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7391975308641975, 'f1': 0.6914103116837007, 'precision': 0.7100152114390021, 'recall': 0.6832837723024638}
06/29/2021 09:35:12 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:35:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:22 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.346 | val_loss: 0.594
06/29/2021 09:35:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7166905537459283, 'precision': 0.7517568540208074, 'recall': 0.7043118096856414}
06/29/2021 09:35:22 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:35:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:31 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.350 | val_loss: 0.567
06/29/2021 09:35:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7258414751347005, 'precision': 0.7444852279679011, 'recall': 0.7164613423959219}
06/29/2021 09:35:31 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:35:34 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:35:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:44 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.307 | val_loss: 0.697
06/29/2021 09:35:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7083333333333334, 'f1': 0.6870469128105012, 'precision': 0.683521751645145, 'recall': 0.6963678844519966}
06/29/2021 09:35:44 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:35:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:54 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.308 | val_loss: 0.664
06/29/2021 09:35:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7546296296296297, 'f1': 0.7088298879484535, 'precision': 0.7301666114972967, 'recall': 0.6993840271877655}
06/29/2021 09:35:54 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:36:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:03 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.303 | val_loss: 0.632
06/29/2021 09:36:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7391975308641975, 'f1': 0.6948634001588208, 'precision': 0.7090929525477067, 'recall': 0.6877017841971113}
06/29/2021 09:36:03 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:36:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:13 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.273 | val_loss: 0.966
06/29/2021 09:36:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.7321054357278287, 'precision': 0.7601166948993037, 'recall': 0.7201571792693288}
06/29/2021 09:36:13 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:36:16 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:36:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:25 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.281 | val_loss: 0.780
06/29/2021 09:36:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7638888888888888, 'f1': 0.7120242593942703, 'precision': 0.7483660130718954, 'recall': 0.6997663551401869}
06/29/2021 09:36:25 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:36:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:35 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.291 | val_loss: 0.665
06/29/2021 09:36:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7345679012345679, 'f1': 0.7006928406466513, 'precision': 0.7032615786040444, 'recall': 0.6985556499575191}
06/29/2021 09:36:35 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:36:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:45 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.254 | val_loss: 0.845
06/29/2021 09:36:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7330246913580247, 'f1': 0.7046031256669909, 'precision': 0.7031872926847134, 'recall': 0.7062234494477485}
06/29/2021 09:36:45 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:36:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:54 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.265 | val_loss: 0.791
06/29/2021 09:36:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.7056966522241881, 'precision': 0.7205922368000757, 'recall': 0.6980246389124893}
06/29/2021 09:36:54 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:37:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:37:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:37:04 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.252 | val_loss: 0.805
06/29/2021 09:37:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7391975308641975, 'f1': 0.7062564542735673, 'precision': 0.7085958766687995, 'recall': 0.7042693288020391}
06/29/2021 09:37:04 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:37:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:37:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:37:13 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.237 | val_loss: 0.844
06/29/2021 09:37:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.720679012345679, 'f1': 0.683155264401972, 'precision': 0.6869514947971149, 'recall': 0.6803101104502973}
06/29/2021 09:37:13 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:37:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:37:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:37:23 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.206 | val_loss: 0.785
06/29/2021 09:37:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.7238649016454286, 'precision': 0.7344220788891818, 'recall': 0.7173109600679695}
06/29/2021 09:37:23 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:37:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:37:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:37:32 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 0.236 | val_loss: 0.894
06/29/2021 09:37:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7592592592592593, 'f1': 0.696858469178452, 'precision': 0.7516987049189848, 'recall': 0.6841121495327103}
06/29/2021 09:37:32 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:37:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:37:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:37:42 - INFO - __main__ -   Epoch: 0027 | Time: 0m_9s | train_loss: 0.215 | val_loss: 0.978
06/29/2021 09:37:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6959876543209876, 'f1': 0.6780388151174668, 'precision': 0.6757348281745065, 'recall': 0.6914401019541206}
06/29/2021 09:37:42 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:37:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:37:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:37:52 - INFO - __main__ -   Epoch: 0028 | Time: 0m_9s | train_loss: 0.188 | val_loss: 0.876
06/29/2021 09:37:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7330246913580247, 'f1': 0.6964246545295022, 'precision': 0.7011402003653069, 'recall': 0.6929694137638063}
06/29/2021 09:37:52 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:37:52 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:37:52 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.005_frozen
06/29/2021 09:37:52 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.005_frozen
06/29/2021 09:37:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:37:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:37:55 - INFO - __main__ -   best_val_loss: 0.966
06/29/2021 09:37:55 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.7321054357278287, 'precision': 0.7601166948993037, 'recall': 0.7201571792693288}
