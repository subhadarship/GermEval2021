06/29/2021 09:15:20 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 09:15:20 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 09:15:21 - INFO - __main__ -   device: cuda
06/29/2021 09:15:21 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 09:15:21 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:15:21 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:15:22 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:15:22 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:15:22 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   train OOV: 528 (0.45%) out of 117560 running tokens are OOV
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   val OOV: 163 (0.57%) out of 28568 running tokens are OOV
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:15:23 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:15:25 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 09:15:27 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 09:15:27 - INFO - __main__ -   the model has 197,378 trainable parameters
06/29/2021 09:15:27 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 09:15:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:15:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:15:37 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.531 | val_loss: 0.628
06/29/2021 09:15:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6759259259259259, 'f1': 0.6723174725486418, 'precision': 0.6961805555555556, 'recall': 0.7160152931180969}
06/29/2021 09:15:37 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:15:37 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:15:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:15:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:15:47 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.484 | val_loss: 0.482
06/29/2021 09:15:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.7127272727272728, 'precision': 0.7310766563944531, 'recall': 0.7038657604078165}
06/29/2021 09:15:47 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:15:56 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:16:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:16:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:16:06 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.465 | val_loss: 0.491
06/29/2021 09:16:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7453703703703703, 'f1': 0.7052783619960141, 'precision': 0.7159975101151572, 'recall': 0.699001699235344}
06/29/2021 09:16:06 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:16:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:16:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:16:15 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.439 | val_loss: 0.497
06/29/2021 09:16:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7546296296296297, 'f1': 0.7296422151956861, 'precision': 0.7272882992307452, 'recall': 0.732519116397621}
06/29/2021 09:16:15 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:16:19 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:16:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:16:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:16:28 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.435 | val_loss: 0.520
06/29/2021 09:16:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.7321669613988091, 'precision': 0.7292827945001858, 'recall': 0.7358963466440103}
06/29/2021 09:16:28 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:16:31 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:16:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:16:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:16:41 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.412 | val_loss: 0.468
06/29/2021 09:16:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7183944374209861, 'precision': 0.7398377955833496, 'recall': 0.7085386576040782}
06/29/2021 09:16:41 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:16:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:16:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:16:50 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.376 | val_loss: 0.565
06/29/2021 09:16:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7638888888888888, 'f1': 0.701098901098901, 'precision': 0.7608413188241027, 'recall': 0.6876168224299065}
06/29/2021 09:16:50 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:17:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:17:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:17:00 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.385 | val_loss: 0.501
06/29/2021 09:17:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.7389122455047392, 'precision': 0.7546095540278512, 'recall': 0.7300977060322855}
06/29/2021 09:17:00 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:17:03 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:17:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:17:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:17:12 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.358 | val_loss: 0.511
06/29/2021 09:17:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7314591943321677, 'precision': 0.7569940476190475, 'recall': 0.7200934579439253}
06/29/2021 09:17:12 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:17:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:17:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:17:22 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.343 | val_loss: 0.503
06/29/2021 09:17:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7220518244315177, 'precision': 0.7671505757790755, 'recall': 0.7079439252336448}
06/29/2021 09:17:22 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:17:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:17:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:17:32 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.325 | val_loss: 0.494
06/29/2021 09:17:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7654320987654321, 'f1': 0.7302573203194321, 'precision': 0.7396112448340071, 'recall': 0.7241291418861513}
06/29/2021 09:17:32 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:17:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:17:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:17:41 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.308 | val_loss: 0.559
06/29/2021 09:17:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7700617283950617, 'f1': 0.7129700371302949, 'precision': 0.7647312405478368, 'recall': 0.6989167374681393}
06/29/2021 09:17:41 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:17:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:17:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:17:51 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.284 | val_loss: 0.537
06/29/2021 09:17:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7777777777777778, 'f1': 0.7403586096363818, 'precision': 0.7567561194170637, 'recall': 0.7312659303313509}
06/29/2021 09:17:51 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:17:54 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:18:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:18:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:18:03 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.276 | val_loss: 0.569
06/29/2021 09:18:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.7321054357278287, 'precision': 0.7601166948993037, 'recall': 0.7201571792693288}
06/29/2021 09:18:03 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:18:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:18:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:18:13 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.252 | val_loss: 0.554
06/29/2021 09:18:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7777777777777778, 'f1': 0.7457466403635928, 'precision': 0.7537373737373738, 'recall': 0.7401019541206457}
06/29/2021 09:18:13 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:18:16 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:18:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:18:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:18:25 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.236 | val_loss: 0.566
06/29/2021 09:18:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7731481481481481, 'f1': 0.7414156769596199, 'precision': 0.7479548565895355, 'recall': 0.7365972812234494}
06/29/2021 09:18:25 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:18:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:18:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:18:35 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.231 | val_loss: 0.548
06/29/2021 09:18:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7700617283950617, 'f1': 0.7410190040636777, 'precision': 0.7437342067305086, 'recall': 0.738678844519966}
06/29/2021 09:18:35 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:18:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:18:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:18:45 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.216 | val_loss: 0.669
06/29/2021 09:18:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7808641975308642, 'f1': 0.7356469777062744, 'precision': 0.768391393442623, 'recall': 0.7225573491928632}
06/29/2021 09:18:45 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:18:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:18:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:18:54 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.205 | val_loss: 0.639
06/29/2021 09:18:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.7273430607397353, 'precision': 0.7335303349026678, 'recall': 0.7228334749362786}
06/29/2021 09:18:54 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:19:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:19:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:19:04 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.191 | val_loss: 0.612
06/29/2021 09:19:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.7124231289779289, 'precision': 0.7234671646436353, 'recall': 0.7058836023789294}
06/29/2021 09:19:04 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:19:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:19:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:19:13 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.158 | val_loss: 0.698
06/29/2021 09:19:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7258414751347005, 'precision': 0.7444852279679011, 'recall': 0.7164613423959219}
06/29/2021 09:19:13 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:19:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:19:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:19:23 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.157 | val_loss: 0.697
06/29/2021 09:19:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.727357609710551, 'precision': 0.7609661586153449, 'recall': 0.714570943075616}
06/29/2021 09:19:23 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:19:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:19:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:19:33 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.177 | val_loss: 0.654
06/29/2021 09:19:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7530864197530864, 'f1': 0.7282221196997022, 'precision': 0.7257128647214854, 'recall': 0.7313508920985556}
06/29/2021 09:19:33 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:19:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:19:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:19:42 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.131 | val_loss: 0.715
06/29/2021 09:19:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.733690830813184, 'precision': 0.758650294622673, 'recall': 0.7223661852166525}
06/29/2021 09:19:42 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:19:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:19:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:19:52 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.128 | val_loss: 0.730
06/29/2021 09:19:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7592592592592593, 'f1': 0.7245588603938922, 'precision': 0.7319191919191919, 'recall': 0.7194562446898896}
06/29/2021 09:19:52 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:19:52 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:19:52 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:19:52 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:19:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:19:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:19:55 - INFO - __main__ -   best_val_loss: 0.554
06/29/2021 09:19:55 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7777777777777778, 'f1': 0.7457466403635928, 'precision': 0.7537373737373738, 'recall': 0.7401019541206457}
