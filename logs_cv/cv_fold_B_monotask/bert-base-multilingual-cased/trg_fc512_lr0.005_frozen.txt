06/29/2021 10:39:08 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 10:39:08 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 10:39:09 - INFO - __main__ -   device: cuda
06/29/2021 10:39:09 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 10:39:09 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:39:09 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:39:10 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:39:10 - WARNING - data_utils.bert_data -   trimming sentence 1808 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:39:10 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:39:10 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   train OOV: 472 (0.36%) out of 131594 running tokens are OOV
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   val OOV: 145 (0.45%) out of 32005 running tokens are OOV
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 1, label ids: [[1]]
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1, label ids: [[1]]
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 10:39:11 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0, label ids: [[0]]
06/29/2021 10:39:13 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 10:39:16 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 10:39:16 - INFO - __main__ -   the model has 394,754 trainable parameters
06/29/2021 10:39:16 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 10:39:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:39:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:39:28 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 0.654 | val_loss: 1.520
06/29/2021 10:39:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.39969135802469136, 'f1': 0.3547584490980717, 'precision': 0.6284453681305577, 'recall': 0.5400382327952421}
06/29/2021 10:39:28 - INFO - __main__ -   	--Found new best val f1
06/29/2021 10:39:29 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 10:39:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:39:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:39:40 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 0.593 | val_loss: 0.653
06/29/2021 10:39:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6898148148148148, 'f1': 0.6789889166294922, 'precision': 0.6827762980783, 'recall': 0.7033347493627868}
06/29/2021 10:39:40 - INFO - __main__ -   	--Found new best val f1
06/29/2021 10:39:49 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 10:40:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:40:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:40:00 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 0.563 | val_loss: 0.762
06/29/2021 10:40:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5802469135802469, 'f1': 0.5798466760746024, 'precision': 0.6659821428571429, 'recall': 0.6579439252336449}
06/29/2021 10:40:00 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 10:40:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:40:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:40:11 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 0.559 | val_loss: 0.510
06/29/2021 10:40:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.7210275637322754, 'precision': 0.7282828282828283, 'recall': 0.7160152931180969}
06/29/2021 10:40:11 - INFO - __main__ -   	--Found new best val f1
06/29/2021 10:40:18 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 10:40:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:40:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:40:30 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 0.509 | val_loss: 0.766
06/29/2021 10:40:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6373456790123457, 'f1': 0.6349033193876694, 'precision': 0.6667399267399268, 'recall': 0.681287170773152}
06/29/2021 10:40:30 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 10:40:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:40:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:40:41 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 0.515 | val_loss: 0.590
06/29/2021 10:40:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7361111111111112, 'f1': 0.7067632760751457, 'precision': 0.7061092060142442, 'recall': 0.7074553950722176}
06/29/2021 10:40:41 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 10:40:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:40:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:40:53 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 0.528 | val_loss: 0.684
06/29/2021 10:40:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6851851851851852, 'f1': 0.678418169256668, 'precision': 0.6903199969487777, 'recall': 0.7119796091758708}
06/29/2021 10:40:53 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 10:41:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:41:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:41:04 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 0.526 | val_loss: 0.558
06/29/2021 10:41:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7160493827160493, 'f1': 0.6981009773636502, 'precision': 0.6947089947089947, 'recall': 0.7110450297366185}
06/29/2021 10:41:04 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 10:41:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:41:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:41:16 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 0.515 | val_loss: 0.600
06/29/2021 10:41:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7129629629629629, 'f1': 0.6976125723805031, 'precision': 0.6954423904197187, 'recall': 0.7142310960067969}
06/29/2021 10:41:16 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 10:41:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:41:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:41:28 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 0.500 | val_loss: 0.723
06/29/2021 10:41:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6496913580246914, 'f1': 0.6471494126593089, 'precision': 0.6780355837192298, 'recall': 0.693946474086661}
06/29/2021 10:41:28 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 10:41:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:41:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:41:39 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 0.501 | val_loss: 0.548
06/29/2021 10:41:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7237654320987654, 'f1': 0.7009459525657256, 'precision': 0.697179696228523, 'recall': 0.7080501274426507}
06/29/2021 10:41:39 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 10:41:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:41:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:41:51 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 0.526 | val_loss: 0.544
06/29/2021 10:41:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7530864197530864, 'f1': 0.6747600225861095, 'precision': 0.7608989523487665, 'recall': 0.6639762107051826}
06/29/2021 10:41:51 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 10:42:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:42:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:42:02 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 0.483 | val_loss: 0.538
06/29/2021 10:42:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7530864197530864, 'f1': 0.7122940993650935, 'precision': 0.7259182908545727, 'recall': 0.7048428207306712}
06/29/2021 10:42:02 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 10:42:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:42:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:42:14 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 0.480 | val_loss: 0.632
06/29/2021 10:42:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6682098765432098, 'f1': 0.663704894527601, 'precision': 0.6840495510635233, 'recall': 0.7035471537807987}
06/29/2021 10:42:14 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 10:42:14 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 10:42:14 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
06/29/2021 10:42:14 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
06/29/2021 10:42:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:42:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:42:18 - INFO - __main__ -   best_val_loss: 0.510
06/29/2021 10:42:18 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.7210275637322754, 'precision': 0.7282828282828283, 'recall': 0.7160152931180969}
