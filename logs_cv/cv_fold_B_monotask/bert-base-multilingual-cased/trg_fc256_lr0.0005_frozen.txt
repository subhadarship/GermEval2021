06/29/2021 09:25:39 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 09:25:39 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 09:25:39 - INFO - __main__ -   device: cuda
06/29/2021 09:25:40 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 09:25:40 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:40 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:41 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:41 - WARNING - data_utils.bert_data -   trimming sentence 1808 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:41 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:41 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   train OOV: 472 (0.36%) out of 131594 running tokens are OOV
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   val OOV: 145 (0.45%) out of 32005 running tokens are OOV
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 1, label ids: [[1]]
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1, label ids: [[1]]
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 09:25:42 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0, label ids: [[0]]
06/29/2021 09:25:44 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 09:25:47 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 09:25:47 - INFO - __main__ -   the model has 197,378 trainable parameters
06/29/2021 09:25:47 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 09:25:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:25:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:25:59 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 0.597 | val_loss: 1.131
06/29/2021 09:25:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.4166666666666667, 'f1': 0.37674551154174973, 'precision': 0.6564913127413128, 'recall': 0.5550977060322855}
06/29/2021 09:25:59 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:26:00 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:26:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:11 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 0.585 | val_loss: 0.726
06/29/2021 09:26:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6033950617283951, 'f1': 0.6033714474884431, 'precision': 0.6774746226972448, 'recall': 0.6754672897196262}
06/29/2021 09:26:11 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:26:18 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:26:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:29 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 0.540 | val_loss: 0.695
06/29/2021 09:26:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.625, 'f1': 0.6245269746646795, 'precision': 0.6761316872427984, 'recall': 0.6840909090909091}
06/29/2021 09:26:29 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:26:35 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:26:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:47 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 0.540 | val_loss: 0.518
06/29/2021 09:26:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.6971916971916972, 'precision': 0.7560574069425783, 'recall': 0.6841758708581138}
06/29/2021 09:26:47 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:26:57 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:27:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:08 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 0.511 | val_loss: 0.906
06/29/2021 09:27:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5447530864197531, 'f1': 0.5404089581304772, 'precision': 0.6735960667816883, 'recall': 0.6421197960917587}
06/29/2021 09:27:08 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:27:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:19 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 0.518 | val_loss: 0.666
06/29/2021 09:27:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6527777777777778, 'f1': 0.649673340814017, 'precision': 0.677198987655997, 'recall': 0.6940739167374681}
06/29/2021 09:27:19 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:27:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:31 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 0.506 | val_loss: 0.826
06/29/2021 09:27:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5910493827160493, 'f1': 0.5907677275597869, 'precision': 0.6754580173797531, 'recall': 0.6683305012744265}
06/29/2021 09:27:31 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:27:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:42 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 0.538 | val_loss: 0.492
06/29/2021 09:27:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.6961538461538461, 'precision': 0.7435883014623172, 'recall': 0.6839847068819032}
06/29/2021 09:27:42 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:27:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:54 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 0.502 | val_loss: 0.523
06/29/2021 09:27:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7422839506172839, 'f1': 0.7160393077841483, 'precision': 0.7138341275031923, 'recall': 0.7187553101104502}
06/29/2021 09:27:54 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:28:00 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:28:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:12 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 0.491 | val_loss: 0.623
06/29/2021 09:28:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.683641975308642, 'f1': 0.6766931383692036, 'precision': 0.6882453882453883, 'recall': 0.7097068819031436}
06/29/2021 09:28:12 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:28:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:23 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 0.506 | val_loss: 0.631
06/29/2021 09:28:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6743827160493827, 'f1': 0.6694700758830255, 'precision': 0.6878851184943124, 'recall': 0.7082200509770603}
06/29/2021 09:28:23 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:28:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:35 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 0.511 | val_loss: 0.550
06/29/2021 09:28:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7283950617283951, 'f1': 0.7045755968169761, 'precision': 0.7010225612725207, 'recall': 0.7104502973661853}
06/29/2021 09:28:35 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:28:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:47 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 0.478 | val_loss: 0.506
06/29/2021 09:28:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.7209061934705832, 'precision': 0.7355720077560374, 'recall': 0.7128929481733219}
06/29/2021 09:28:47 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:28:53 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:29:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:04 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 0.472 | val_loss: 0.635
06/29/2021 09:29:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6728395061728395, 'f1': 0.6666925465838509, 'precision': 0.6812070282658518, 'recall': 0.7015293118096857}
06/29/2021 09:29:04 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:29:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:16 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 0.486 | val_loss: 0.534
06/29/2021 09:29:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7422839506172839, 'f1': 0.7183217372970694, 'precision': 0.7149747828666715, 'recall': 0.7231733220050978}
06/29/2021 09:29:16 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:29:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:28 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 0.471 | val_loss: 0.503
06/29/2021 09:29:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7592592592592593, 'f1': 0.7095840036773154, 'precision': 0.7393442622950819, 'recall': 0.6984706881903143}
06/29/2021 09:29:28 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:29:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:39 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 0.470 | val_loss: 0.506
06/29/2021 09:29:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7638888888888888, 'f1': 0.7252525252525253, 'precision': 0.7390286614908645, 'recall': 0.7174384027187766}
06/29/2021 09:29:39 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:29:46 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:29:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:57 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 0.462 | val_loss: 0.513
06/29/2021 09:29:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7731481481481481, 'f1': 0.7381170357540516, 'precision': 0.7492696506925429, 'recall': 0.7310747663551402}
06/29/2021 09:29:57 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:30:04 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:30:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:30:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:30:15 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 0.458 | val_loss: 0.502
06/29/2021 09:30:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.7329035229104306, 'precision': 0.7593648461911935, 'recall': 0.7212616822429907}
06/29/2021 09:30:15 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:30:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:30:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:30:26 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 0.455 | val_loss: 0.512
06/29/2021 09:30:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7716049382716049, 'f1': 0.7227567067530065, 'precision': 0.757661038148843, 'recall': 0.7100254885301615}
06/29/2021 09:30:26 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:30:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:30:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:30:38 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 0.460 | val_loss: 0.540
06/29/2021 09:30:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7345679012345679, 'f1': 0.714449682311949, 'precision': 0.7101403061224489, 'recall': 0.7239592183517417}
06/29/2021 09:30:38 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:30:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:30:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:30:50 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 0.445 | val_loss: 0.530
06/29/2021 09:30:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7638888888888888, 'f1': 0.7358857486886726, 'precision': 0.7367017011130477, 'recall': 0.7351104502973662}
06/29/2021 09:30:50 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:31:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:31:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:31:01 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 0.448 | val_loss: 0.525
06/29/2021 09:31:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.7245235679654063, 'precision': 0.7213187963904031, 'recall': 0.7289507221750213}
06/29/2021 09:31:01 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:31:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:31:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:31:13 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 0.443 | val_loss: 0.546
06/29/2021 09:31:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7376543209876543, 'f1': 0.7135427501560224, 'precision': 0.710171568627451, 'recall': 0.7185641461342396}
06/29/2021 09:31:13 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:31:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:31:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:31:24 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 0.433 | val_loss: 0.520
06/29/2021 09:31:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7731481481481481, 'f1': 0.7275901612621862, 'precision': 0.7568085510087914, 'recall': 0.7156117247238742}
06/29/2021 09:31:24 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:31:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:31:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:31:36 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 0.462 | val_loss: 0.505
06/29/2021 09:31:36 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7265032377428308, 'precision': 0.7618824265165729, 'recall': 0.7134664401019541}
06/29/2021 09:31:36 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:31:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:31:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:31:47 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 0.454 | val_loss: 0.536
06/29/2021 09:31:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.75, 'f1': 0.7242553191489361, 'precision': 0.7221343873517787, 'recall': 0.7268054375531011}
06/29/2021 09:31:47 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:31:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:31:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:31:59 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 0.443 | val_loss: 0.654
06/29/2021 09:31:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6666666666666666, 'f1': 0.660969654691315, 'precision': 0.677249082007344, 'recall': 0.696856414613424}
06/29/2021 09:31:59 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:31:59 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:31:59 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:31:59 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:32:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:32:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:32:03 - INFO - __main__ -   best_val_loss: 0.513
06/29/2021 09:32:03 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7731481481481481, 'f1': 0.7381170357540516, 'precision': 0.7492696506925429, 'recall': 0.7310747663551402}
