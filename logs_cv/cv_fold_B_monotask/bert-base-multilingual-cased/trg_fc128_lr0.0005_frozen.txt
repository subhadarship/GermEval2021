06/29/2021 08:34:25 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 08:34:25 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 08:34:26 - INFO - __main__ -   device: cuda
06/29/2021 08:34:26 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 08:34:26 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:34:26 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:34:26 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:34:27 - WARNING - data_utils.bert_data -   trimming sentence 1808 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:34:27 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:34:27 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:34:27 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 08:34:27 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 08:34:27 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 08:34:27 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 08:34:27 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   train OOV: 472 (0.36%) out of 131594 running tokens are OOV
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   val OOV: 145 (0.45%) out of 32005 running tokens are OOV
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 1, label ids: [[1]]
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1, label ids: [[1]]
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 08:34:28 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0, label ids: [[0]]
06/29/2021 08:34:30 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 08:34:33 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 08:34:33 - INFO - __main__ -   the model has 98,690 trainable parameters
06/29/2021 08:34:33 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 08:34:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:34:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:34:44 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 0.601 | val_loss: 1.125
06/29/2021 08:34:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.39814814814814814, 'f1': 0.34902890113852975, 'precision': 0.656058462989156, 'recall': 0.5421835174171623}
06/29/2021 08:34:44 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:34:45 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:34:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:34:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:34:56 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 0.592 | val_loss: 0.715
06/29/2021 08:34:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6003086419753086, 'f1': 0.6000943578306277, 'precision': 0.6840885316302373, 'recall': 0.6775488530161428}
06/29/2021 08:34:56 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:35:04 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:35:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:35:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:35:15 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 0.539 | val_loss: 0.678
06/29/2021 08:35:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6265432098765432, 'f1': 0.6259410153901934, 'precision': 0.6753427982041015, 'recall': 0.6841546304163126}
06/29/2021 08:35:15 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:35:22 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:35:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:35:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:35:33 - INFO - __main__ -   Epoch: 0004 | Time: 0m_10s | train_loss: 0.542 | val_loss: 0.516
06/29/2021 08:35:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.707786731634183, 'precision': 0.7484864864864865, 'recall': 0.695284621920136}
06/29/2021 08:35:33 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:35:41 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:35:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:35:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:35:52 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 0.513 | val_loss: 0.797
06/29/2021 08:35:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5709876543209876, 'f1': 0.5698033184636107, 'precision': 0.6702276218405251, 'recall': 0.6553525913338998}
06/29/2021 08:35:52 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:36:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:36:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:36:03 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 0.516 | val_loss: 0.698
06/29/2021 08:36:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6358024691358025, 'f1': 0.6346749226006191, 'precision': 0.6772959183673469, 'recall': 0.6889549702633815}
06/29/2021 08:36:03 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:36:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:36:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:36:15 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 0.509 | val_loss: 0.788
06/29/2021 08:36:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6018518518518519, 'f1': 0.6018177141387293, 'precision': 0.6767087299194625, 'recall': 0.6742990654205607}
06/29/2021 08:36:15 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:36:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:36:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:36:26 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 0.534 | val_loss: 0.491
06/29/2021 08:36:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.6919561000239165, 'precision': 0.7353250709686353, 'recall': 0.6804800339847069}
06/29/2021 08:36:26 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 08:36:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:36:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:36:38 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 0.501 | val_loss: 0.521
06/29/2021 08:36:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7391975308641975, 'f1': 0.7120401364175408, 'precision': 0.7102114621004472, 'recall': 0.7142098555649957}
06/29/2021 08:36:38 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:36:52 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:37:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:37:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:37:03 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 0.492 | val_loss: 0.622
06/29/2021 08:37:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6790123456790124, 'f1': 0.6718092566619915, 'precision': 0.6830867774897056, 'recall': 0.7039932030586236}
06/29/2021 08:37:03 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:37:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:37:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:37:14 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 0.508 | val_loss: 0.652
06/29/2021 08:37:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6620370370370371, 'f1': 0.658601950062428, 'precision': 0.6840220385674931, 'recall': 0.7021877655055225}
06/29/2021 08:37:14 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:37:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:37:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:37:26 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 0.507 | val_loss: 0.544
06/29/2021 08:37:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7222222222222222, 'f1': 0.7000987329274313, 'precision': 0.6962481962481963, 'recall': 0.7079864061172473}
06/29/2021 08:37:26 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:37:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:37:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:37:37 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 0.480 | val_loss: 0.505
06/29/2021 08:37:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7267080745341615, 'precision': 0.735932603660475, 'recall': 0.7206881903143585}
06/29/2021 08:37:37 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:37:44 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:37:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:37:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:37:55 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 0.474 | val_loss: 0.617
06/29/2021 08:37:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6898148148148148, 'f1': 0.6820916615206625, 'precision': 0.691317271142359, 'recall': 0.7132752761257435}
06/29/2021 08:37:55 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:38:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:38:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:38:06 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 0.487 | val_loss: 0.514
06/29/2021 08:38:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.7186233793219192, 'precision': 0.7193804997487356, 'recall': 0.7179056924384026}
06/29/2021 08:38:06 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:38:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:38:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:38:18 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 0.472 | val_loss: 0.502
06/29/2021 08:38:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.707786731634183, 'precision': 0.7484864864864865, 'recall': 0.695284621920136}
06/29/2021 08:38:18 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:38:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:38:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:38:30 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 0.475 | val_loss: 0.501
06/29/2021 08:38:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7716049382716049, 'f1': 0.7285787060621498, 'precision': 0.752325867585528, 'recall': 0.7177570093457943}
06/29/2021 08:38:30 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:38:36 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:38:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:38:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:38:47 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 0.465 | val_loss: 0.526
06/29/2021 08:38:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.75, 'f1': 0.7206628987450905, 'precision': 0.7211649242585876, 'recall': 0.7201784197111301}
06/29/2021 08:38:47 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:38:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:38:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:38:59 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 0.461 | val_loss: 0.496
06/29/2021 08:38:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7716049382716049, 'f1': 0.7244771316938634, 'precision': 0.7559426229508197, 'recall': 0.7122344944774851}
06/29/2021 08:38:59 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:39:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:39:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:39:10 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 0.456 | val_loss: 0.504
06/29/2021 08:39:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7352911551073855, 'precision': 0.7539325842696629, 'recall': 0.7256159728122344}
06/29/2021 08:39:10 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:39:17 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:39:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:39:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:39:28 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 0.463 | val_loss: 0.550
06/29/2021 08:39:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7253086419753086, 'f1': 0.7060160877588263, 'precision': 0.7019934343234584, 'recall': 0.7169498725573492}
06/29/2021 08:39:28 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:39:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:39:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:39:39 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 0.451 | val_loss: 0.532
06/29/2021 08:39:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.7262414883428017, 'precision': 0.723924756298857, 'recall': 0.7290781648258284}
06/29/2021 08:39:39 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:39:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:39:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:39:51 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 0.456 | val_loss: 0.544
06/29/2021 08:39:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7175925925925926, 'f1': 0.6999810249079708, 'precision': 0.6965996848297396, 'recall': 0.7133177570093459}
06/29/2021 08:39:51 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:40:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:02 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 0.455 | val_loss: 0.540
06/29/2021 08:40:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7453703703703703, 'f1': 0.7233026668219402, 'precision': 0.7192738137438599, 'recall': 0.7299277824978759}
06/29/2021 08:40:02 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 08:40:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:14 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 0.439 | val_loss: 0.509
06/29/2021 08:40:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7685185185185185, 'f1': 0.7216080286869752, 'precision': 0.7510288065843621, 'recall': 0.7098980458793542}
06/29/2021 08:40:14 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 08:40:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:26 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 0.465 | val_loss: 0.503
06/29/2021 08:40:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7242778524511172, 'precision': 0.7455004563431701, 'recall': 0.7142523364485982}
06/29/2021 08:40:26 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 08:40:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:37 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 0.463 | val_loss: 0.517
06/29/2021 08:40:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7592592592592593, 'f1': 0.730403243012588, 'precision': 0.7314814814814814, 'recall': 0.7293967714528462}
06/29/2021 08:40:37 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 08:40:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:49 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 0.454 | val_loss: 0.663
06/29/2021 08:40:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6620370370370371, 'f1': 0.6579304493290556, 'precision': 0.6802535447168558, 'recall': 0.698874256584537}
06/29/2021 08:40:49 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 08:41:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:01 - INFO - __main__ -   Epoch: 0029 | Time: 0m_11s | train_loss: 0.465 | val_loss: 0.534
06/29/2021 08:41:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7345679012345679, 'f1': 0.708434920003767, 'precision': 0.7058714232627277, 'recall': 0.7118096856414613}
06/29/2021 08:41:01 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 08:41:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:12 - INFO - __main__ -   Epoch: 0030 | Time: 0m_11s | train_loss: 0.446 | val_loss: 0.644
06/29/2021 08:41:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.691358024691358, 'f1': 0.684133560809164, 'precision': 0.6943967981703831, 'recall': 0.7166525063721325}
06/29/2021 08:41:12 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 08:41:12 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 08:41:12 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:41:12 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:41:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:16 - INFO - __main__ -   best_val_loss: 0.504
06/29/2021 08:41:16 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7352911551073855, 'precision': 0.7539325842696629, 'recall': 0.7256159728122344}
