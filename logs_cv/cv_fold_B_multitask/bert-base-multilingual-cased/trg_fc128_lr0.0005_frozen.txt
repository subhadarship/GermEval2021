06/29/2021 11:03:35 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 11:03:35 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 11:03:36 - INFO - __main__ -   device: cuda
06/29/2021 11:03:36 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 11:03:36 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:03:36 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:03:37 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:03:37 - WARNING - data_utils.bert_data -   trimming sentence 1808 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:03:37 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:03:37 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   train OOV: 472 (0.36%) out of 131594 running tokens are OOV
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   val OOV: 145 (0.45%) out of 32005 running tokens are OOV
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:03:38 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:03:40 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 11:03:43 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
    (1): Linear(in_features=128, out_features=2, bias=True)
    (2): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 11:03:43 - INFO - __main__ -   the model has 99,206 trainable parameters
06/29/2021 11:03:43 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 11:03:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:03:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:03:55 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.912 | val_loss: 2.303
06/29/2021 11:03:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.3765432098765432, 'f1': 0.3151610911716387, 'precision': 0.6568142468464012, 'recall': 0.5269328802039083}
06/29/2021 11:03:55 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:03:56 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:04:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:04:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:04:07 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.815 | val_loss: 1.981
06/29/2021 11:04:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6188271604938271, 'f1': 0.6184991764848895, 'precision': 0.6728268764513918, 'recall': 0.6794180118946473}
06/29/2021 11:04:07 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:04:16 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:04:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:04:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:04:28 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.728 | val_loss: 1.822
06/29/2021 11:04:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6774691358024691, 'f1': 0.6709804845696183, 'precision': 0.6842052534658944, 'recall': 0.7050339847068818}
06/29/2021 11:04:28 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:04:35 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:04:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:04:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:04:46 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.679 | val_loss: 1.610
06/29/2021 11:04:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.7015048536830057, 'precision': 0.7222222222222222, 'recall': 0.6925021240441801}
06/29/2021 11:04:46 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:04:53 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:05:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:05:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:05:04 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.628 | val_loss: 1.953
06/29/2021 11:05:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6327160493827161, 'f1': 0.631578947368421, 'precision': 0.6740672831632653, 'recall': 0.6855140186915888}
06/29/2021 11:05:04 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:05:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:05:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:05:16 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.658 | val_loss: 1.621
06/29/2021 11:05:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7114197530864198, 'f1': 0.6979171600583345, 'precision': 0.6971180224667186, 'recall': 0.7174808836023789}
06/29/2021 11:05:16 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:05:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:05:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:05:28 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.590 | val_loss: 1.989
06/29/2021 11:05:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6018518518518519, 'f1': 0.6016659201158902, 'precision': 0.6848174669419672, 'recall': 0.6787170773152081}
06/29/2021 11:05:28 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:05:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:05:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:05:39 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.619 | val_loss: 1.597
06/29/2021 11:05:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7407407407407407, 'f1': 0.7152155032594933, 'precision': 0.71256038647343, 'recall': 0.7186915887850467}
06/29/2021 11:05:39 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:05:46 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:05:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:05:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:05:58 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.598 | val_loss: 1.568
06/29/2021 11:05:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7222222222222222, 'f1': 0.7051328722242445, 'precision': 0.7016583229036295, 'recall': 0.7190314358538658}
06/29/2021 11:05:58 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:06:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:06:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:06:10 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.590 | val_loss: 1.618
06/29/2021 11:06:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6944444444444444, 'f1': 0.6816309515538308, 'precision': 0.6827420901246405, 'recall': 0.7024214103653357}
06/29/2021 11:06:10 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:06:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:06:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:06:21 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.571 | val_loss: 1.731
06/29/2021 11:06:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6574074074074074, 'f1': 0.6538161656415143, 'precision': 0.6786887146003168, 'recall': 0.6964740866610026}
06/29/2021 11:06:21 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:06:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:06:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:06:33 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.569 | val_loss: 1.530
06/29/2021 11:06:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7299382716049383, 'f1': 0.7048281678262703, 'precision': 0.7017166064797291, 'recall': 0.709409515717927}
06/29/2021 11:06:33 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:06:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:06:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:06:45 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.515 | val_loss: 1.556
06/29/2021 11:06:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.75, 'f1': 0.7206628987450905, 'precision': 0.7211649242585876, 'recall': 0.7201784197111301}
06/29/2021 11:06:45 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:06:52 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:07:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:07:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:07:04 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.533 | val_loss: 1.680
06/29/2021 11:07:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6898148148148148, 'f1': 0.6814509916136559, 'precision': 0.6893212669683257, 'recall': 0.7110662701784196}
06/29/2021 11:07:04 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:07:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:07:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:07:15 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.544 | val_loss: 1.561
06/29/2021 11:07:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7469135802469136, 'f1': 0.7247181697612732, 'precision': 0.7207433858139912, 'recall': 0.7310960067969414}
06/29/2021 11:07:15 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:07:24 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:07:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:07:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:07:35 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.515 | val_loss: 1.498
06/29/2021 11:07:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.7193653028893303, 'precision': 0.7363045109647294, 'recall': 0.7106839422259983}
06/29/2021 11:07:35 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:07:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:07:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:07:47 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.505 | val_loss: 1.498
06/29/2021 11:07:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.7188859113473618, 'precision': 0.7287554824561404, 'recall': 0.7127017841971113}
06/29/2021 11:07:47 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:07:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:07:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:07:59 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.484 | val_loss: 1.548
06/29/2021 11:07:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7546296296296297, 'f1': 0.7255283270686206, 'precision': 0.7263089802944604, 'recall': 0.7247875955819881}
06/29/2021 11:07:59 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:08:08 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:08:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:08:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:08:19 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.504 | val_loss: 1.523
06/29/2021 11:08:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7273631563549228, 'precision': 0.7435908053048139, 'recall': 0.7186703483432455}
06/29/2021 11:08:19 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:08:26 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:08:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:08:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:08:37 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.486 | val_loss: 1.580
06/29/2021 11:08:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7546296296296297, 'f1': 0.7229898129552108, 'precision': 0.726155573236259, 'recall': 0.7203695836873407}
06/29/2021 11:08:37 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:08:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:08:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:08:49 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 1.475 | val_loss: 1.558
06/29/2021 11:08:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7175925925925926, 'f1': 0.7039714615947257, 'precision': 0.7026197337856984, 'recall': 0.7232582837723025}
06/29/2021 11:08:49 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:09:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:09:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:09:00 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 1.456 | val_loss: 1.533
06/29/2021 11:09:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7407407407407407, 'f1': 0.7103170801800939, 'precision': 0.7107958182206102, 'recall': 0.7098555649957519}
06/29/2021 11:09:00 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:09:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:09:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:09:12 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.443 | val_loss: 1.573
06/29/2021 11:09:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7237654320987654, 'f1': 0.7065388167132611, 'precision': 0.7029422416240078, 'recall': 0.7201996601529312}
06/29/2021 11:09:12 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:09:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:09:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:09:24 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.446 | val_loss: 1.569
06/29/2021 11:09:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7145061728395061, 'f1': 0.6990170602191843, 'precision': 0.6966701251854509, 'recall': 0.7153993203058624}
06/29/2021 11:09:24 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:09:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:09:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:09:35 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.454 | val_loss: 1.528
06/29/2021 11:09:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.7153730940162546, 'precision': 0.722877531036501, 'recall': 0.7103016142735769}
06/29/2021 11:09:35 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:09:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:09:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:09:47 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.444 | val_loss: 1.526
06/29/2021 11:09:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7184578598907186, 'precision': 0.7501061079600262, 'recall': 0.7065208156329652}
06/29/2021 11:09:47 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 11:09:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:09:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:09:59 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 1.446 | val_loss: 1.550
06/29/2021 11:09:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.7228407614899173, 'precision': 0.7205612133669688, 'recall': 0.7256372132540356}
06/29/2021 11:09:59 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 11:10:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:10:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:10:11 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 1.427 | val_loss: 1.563
06/29/2021 11:10:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7191358024691358, 'f1': 0.7027822580645162, 'precision': 0.6997428705002338, 'recall': 0.7177994902293967}
06/29/2021 11:10:11 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 11:10:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:10:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:10:22 - INFO - __main__ -   Epoch: 0029 | Time: 0m_11s | train_loss: 1.408 | val_loss: 1.576
06/29/2021 11:10:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7453703703703703, 'f1': 0.7125365983497471, 'precision': 0.7155616832514087, 'recall': 0.7100467289719625}
06/29/2021 11:10:22 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 11:10:22 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 11:10:22 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 11:10:23 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 11:10:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:10:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:10:27 - INFO - __main__ -   best_val_loss: 1.523
06/29/2021 11:10:27 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7273631563549228, 'precision': 0.7435908053048139, 'recall': 0.7186703483432455}
