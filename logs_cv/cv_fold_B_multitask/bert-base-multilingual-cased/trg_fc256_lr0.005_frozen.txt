06/29/2021 12:30:36 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 12:30:36 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 12:30:37 - INFO - __main__ -   device: cuda
06/29/2021 12:30:37 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 12:30:38 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:30:38 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:30:38 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:30:39 - WARNING - data_utils.bert_data -   trimming sentence 1808 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:30:39 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:30:39 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:30:39 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 12:30:39 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 12:30:39 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 12:30:39 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 12:30:39 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   train OOV: 472 (0.36%) out of 131594 running tokens are OOV
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   val OOV: 145 (0.45%) out of 32005 running tokens are OOV
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:30:40 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:30:42 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 12:30:45 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
    (1): Linear(in_features=256, out_features=2, bias=True)
    (2): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 12:30:45 - INFO - __main__ -   the model has 198,406 trainable parameters
06/29/2021 12:30:45 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 12:30:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:30:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:30:56 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.923 | val_loss: 3.067
06/29/2021 12:30:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.4012345679012346, 'f1': 0.3535461576435741, 'precision': 0.6577363034316677, 'recall': 0.5445199660152932}
06/29/2021 12:30:56 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:30:57 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:31:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:31:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:31:09 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.817 | val_loss: 1.699
06/29/2021 12:31:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7299382716049383, 'f1': 0.6958276893365342, 'precision': 0.6980543776502869, 'recall': 0.693946474086661}
06/29/2021 12:31:09 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:31:18 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:31:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:31:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:31:29 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.734 | val_loss: 1.951
06/29/2021 12:31:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6095679012345679, 'f1': 0.6095595327403279, 'precision': 0.6767765761012925, 'recall': 0.6779311809685642}
06/29/2021 12:31:29 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:31:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:31:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:31:41 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.724 | val_loss: 1.646
06/29/2021 12:31:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7577160493827161, 'f1': 0.7165299042895554, 'precision': 0.7320915210524448, 'recall': 0.7083474936278675}
06/29/2021 12:31:41 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:31:49 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:32:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:32:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:32:00 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.641 | val_loss: 2.050
06/29/2021 12:32:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5432098765432098, 'f1': 0.5397727272727273, 'precision': 0.6619633138480145, 'recall': 0.6365335598980458}
06/29/2021 12:32:00 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:32:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:32:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:32:12 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.659 | val_loss: 1.861
06/29/2021 12:32:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7376543209876543, 'f1': 0.7034756018777726, 'precision': 0.706687062937063, 'recall': 0.7008920985556499}
06/29/2021 12:32:12 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:32:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:32:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:32:23 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.633 | val_loss: 2.022
06/29/2021 12:32:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6574074074074074, 'f1': 0.6523705959112658, 'precision': 0.6713902205177373, 'recall': 0.6898470688190315}
06/29/2021 12:32:23 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:32:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:32:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:32:35 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.634 | val_loss: 1.997
06/29/2021 12:32:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5154320987654321, 'f1': 0.5083079599826011, 'precision': 0.6542615376050771, 'recall': 0.617714528462192}
06/29/2021 12:32:35 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:32:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:32:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:32:47 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.643 | val_loss: 1.637
06/29/2021 12:32:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6805555555555556, 'f1': 0.6719420659901829, 'precision': 0.680061919504644, 'recall': 0.7007434154630416}
06/29/2021 12:32:47 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:32:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:32:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:32:59 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.581 | val_loss: 1.710
06/29/2021 12:32:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.683641975308642, 'f1': 0.6722128593037114, 'precision': 0.6757047197837363, 'recall': 0.6953483432455395}
06/29/2021 12:32:59 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:33:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:33:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:33:10 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.610 | val_loss: 2.111
06/29/2021 12:33:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.4722222222222222, 'f1': 0.45536583207997877, 'precision': 0.646557125948618, 'recall': 0.5894222599830077}
06/29/2021 12:33:10 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:33:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:33:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:33:22 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.601 | val_loss: 1.703
06/29/2021 12:33:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7592592592592593, 'f1': 0.695781972265023, 'precision': 0.7529950669485553, 'recall': 0.6830076465590484}
06/29/2021 12:33:22 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:33:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:33:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:33:34 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.520 | val_loss: 1.756
06/29/2021 12:33:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.7245796988584481, 'precision': 0.7341968911917098, 'recall': 0.7184154630416313}
06/29/2021 12:33:34 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:33:42 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:33:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:33:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:33:53 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.546 | val_loss: 1.805
06/29/2021 12:33:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6635802469135802, 'f1': 0.6546855444305382, 'precision': 0.6635802469135803, 'recall': 0.6823704333050128}
06/29/2021 12:33:53 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:34:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:34:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:34:05 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.544 | val_loss: 1.887
06/29/2021 12:34:05 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6975308641975309, 'f1': 0.6867897727272727, 'precision': 0.6900687547746371, 'recall': 0.7113848768054376}
06/29/2021 12:34:05 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:34:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:34:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:34:16 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.543 | val_loss: 1.557
06/29/2021 12:34:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.7169739545028024, 'precision': 0.7376148463644661, 'recall': 0.7073704333050128}
06/29/2021 12:34:16 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:34:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:34:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:34:28 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.516 | val_loss: 1.741
06/29/2021 12:34:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6651234567901234, 'f1': 0.6374596184735333, 'precision': 0.6352175619772322, 'recall': 0.6426720475785896}
06/29/2021 12:34:28 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:34:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:34:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:34:40 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.490 | val_loss: 1.636
06/29/2021 12:34:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7700617283950617, 'f1': 0.7221868948590534, 'precision': 0.7542732569356021, 'recall': 0.7099617672047578}
06/29/2021 12:34:40 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:34:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:34:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:34:51 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.507 | val_loss: 1.653
06/29/2021 12:34:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7577160493827161, 'f1': 0.7271139841476335, 'precision': 0.7296788747058249, 'recall': 0.7249150382327952}
06/29/2021 12:34:51 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:34:59 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:35:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:35:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:35:10 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.475 | val_loss: 1.706
06/29/2021 12:35:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7407407407407407, 'f1': 0.6611849066938887, 'precision': 0.7357579341612459, 'recall': 0.6524214103653356}
06/29/2021 12:35:10 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:35:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:35:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:35:22 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 1.504 | val_loss: 1.721
06/29/2021 12:35:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6450617283950617, 'f1': 0.6411096127913697, 'precision': 0.6649305555555556, 'recall': 0.6816057774001699}
06/29/2021 12:35:22 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:35:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:35:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:35:34 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 1.477 | val_loss: 1.746
06/29/2021 12:35:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7391975308641975, 'f1': 0.7143833312033967, 'precision': 0.7113400474298561, 'recall': 0.7186278674596431}
06/29/2021 12:35:34 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:35:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:35:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:35:45 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.444 | val_loss: 1.677
06/29/2021 12:35:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7345679012345679, 'f1': 0.6863822076153387, 'precision': 0.7039866142877929, 'recall': 0.6786745964316058}
06/29/2021 12:35:45 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:35:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:35:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:35:57 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.443 | val_loss: 1.743
06/29/2021 12:35:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7437722419928825, 'precision': 0.7409018046434666, 'recall': 0.7473874256584537}
06/29/2021 12:35:57 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:36:05 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:36:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:36:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:36:16 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.463 | val_loss: 1.668
06/29/2021 12:36:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7098765432098766, 'f1': 0.6878868620618979, 'precision': 0.684311224489796, 'recall': 0.6964316057774002}
06/29/2021 12:36:16 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:36:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:36:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:36:28 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.457 | val_loss: 1.625
06/29/2021 12:36:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7438271604938271, 'f1': 0.6937653020554575, 'precision': 0.717217417387392, 'recall': 0.6845794392523364}
06/29/2021 12:36:28 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:36:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:36:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:36:40 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 1.491 | val_loss: 1.784
06/29/2021 12:36:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7654320987654321, 'f1': 0.7309440559440559, 'precision': 0.7393895611341882, 'recall': 0.7252336448598131}
06/29/2021 12:36:40 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:36:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:36:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:36:51 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 1.464 | val_loss: 1.746
06/29/2021 12:36:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6404320987654321, 'f1': 0.6385305067094411, 'precision': 0.6740540859358872, 'recall': 0.6880416312659303}
06/29/2021 12:36:51 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:37:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:37:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:37:03 - INFO - __main__ -   Epoch: 0029 | Time: 0m_11s | train_loss: 1.440 | val_loss: 1.804
06/29/2021 12:37:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7438271604938271, 'f1': 0.6703078450844091, 'precision': 0.7351804525338154, 'recall': 0.6602803738317757}
06/29/2021 12:37:03 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:37:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:37:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:37:15 - INFO - __main__ -   Epoch: 0030 | Time: 0m_11s | train_loss: 1.464 | val_loss: 1.844
06/29/2021 12:37:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6435185185185185, 'f1': 0.6386782820273293, 'precision': 0.6591587842704182, 'recall': 0.6760195412064571}
06/29/2021 12:37:15 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:37:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:37:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:37:26 - INFO - __main__ -   Epoch: 0031 | Time: 0m_11s | train_loss: 1.436 | val_loss: 1.722
06/29/2021 12:37:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7237654320987654, 'f1': 0.7046136920996539, 'precision': 0.7006616957187299, 'recall': 0.7157816482582837}
06/29/2021 12:37:26 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:37:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:37:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:37:38 - INFO - __main__ -   Epoch: 0032 | Time: 0m_11s | train_loss: 1.435 | val_loss: 1.743
06/29/2021 12:37:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6851851851851852, 'f1': 0.6594920405955387, 'precision': 0.6567035175879397, 'recall': 0.665590484282073}
06/29/2021 12:37:38 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:37:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:37:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:37:50 - INFO - __main__ -   Epoch: 0033 | Time: 0m_11s | train_loss: 1.452 | val_loss: 1.731
06/29/2021 12:37:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.7103644575092067, 'precision': 0.7194385924955873, 'recall': 0.7046516567544605}
06/29/2021 12:37:50 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 12:38:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:38:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:38:02 - INFO - __main__ -   Epoch: 0034 | Time: 0m_11s | train_loss: 1.421 | val_loss: 1.642
06/29/2021 12:38:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7330246913580247, 'f1': 0.7114997104806022, 'precision': 0.7073920940921452, 'recall': 0.7194774851316907}
06/29/2021 12:38:02 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 12:38:02 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 12:38:02 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
06/29/2021 12:38:02 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
06/29/2021 12:38:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:38:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:38:06 - INFO - __main__ -   best_val_loss: 1.743
06/29/2021 12:38:06 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7437722419928825, 'precision': 0.7409018046434666, 'recall': 0.7473874256584537}
