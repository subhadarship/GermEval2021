06/29/2021 13:29:57 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 13:29:57 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 13:29:58 - INFO - __main__ -   device: cuda
06/29/2021 13:29:58 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 13:29:58 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:29:59 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:29:59 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:29:59 - WARNING - data_utils.bert_data -   trimming sentence 1808 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:29:59 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:30:00 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:30:00 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 13:30:00 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 13:30:00 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 13:30:00 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 13:30:00 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 13:30:00 - INFO - data_utils.preprocess_bert -   train OOV: 472 (0.36%) out of 131594 running tokens are OOV
06/29/2021 13:30:01 - INFO - data_utils.preprocess_bert -   val OOV: 145 (0.45%) out of 32005 running tokens are OOV
06/29/2021 13:30:01 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 13:30:01 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 13:30:01 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 13:30:01 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:30:01 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:30:01 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:30:02 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 13:30:05 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
    (1): Linear(in_features=512, out_features=2, bias=True)
    (2): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 13:30:05 - INFO - __main__ -   the model has 396,806 trainable parameters
06/29/2021 13:30:05 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 13:30:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:30:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:30:17 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.949 | val_loss: 3.048
06/29/2021 13:30:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.3966049382716049, 'f1': 0.34675903605138925, 'precision': 0.6551814200184836, 'recall': 0.5410152931180969}
06/29/2021 13:30:17 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:30:18 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:30:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:30:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:30:29 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.820 | val_loss: 1.728
06/29/2021 13:30:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7391975308641975, 'f1': 0.7108174124295277, 'precision': 0.7097399527186761, 'recall': 0.7120008496176721}
06/29/2021 13:30:29 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:30:39 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:30:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:30:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:30:50 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.734 | val_loss: 1.698
06/29/2021 13:30:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7330246913580247, 'f1': 0.6858978489953853, 'precision': 0.701734499262298, 'recall': 0.6786108751062021}
06/29/2021 13:30:50 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:31:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:31:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:31:02 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.702 | val_loss: 1.612
06/29/2021 13:31:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7453703703703703, 'f1': 0.6987142096320154, 'precision': 0.7179008214177061, 'recall': 0.6901656754460492}
06/29/2021 13:31:02 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:31:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:31:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:31:13 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.650 | val_loss: 1.794
06/29/2021 13:31:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7098765432098766, 'f1': 0.6988490289918126, 'precision': 0.700734394124847, 'recall': 0.7229396771452846}
06/29/2021 13:31:13 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:31:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:31:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:31:25 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.686 | val_loss: 1.775
06/29/2021 13:31:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7058435127104655, 'precision': 0.7504960317460317, 'recall': 0.6930756159728122}
06/29/2021 13:31:25 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 13:31:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:31:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:31:37 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.605 | val_loss: 1.968
06/29/2021 13:31:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5895061728395061, 'f1': 0.5892557572060393, 'precision': 0.672628510863805, 'recall': 0.6660577740016993}
06/29/2021 13:31:37 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 13:31:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:31:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:31:48 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.614 | val_loss: 1.942
06/29/2021 13:31:48 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6558641975308642, 'f1': 0.6521454449165291, 'precision': 0.6764938662445588, 'recall': 0.6942013593882752}
06/29/2021 13:31:48 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 13:32:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:32:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:32:00 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.663 | val_loss: 1.594
06/29/2021 13:32:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7376543209876543, 'f1': 0.7135427501560224, 'precision': 0.710171568627451, 'recall': 0.7185641461342396}
06/29/2021 13:32:00 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:32:08 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:32:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:32:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:32:20 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.586 | val_loss: 1.672
06/29/2021 13:32:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6743827160493827, 'f1': 0.6637938029748278, 'precision': 0.6691287969100186, 'recall': 0.6883389974511469}
06/29/2021 13:32:20 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:32:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:32:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:32:31 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.589 | val_loss: 2.087
06/29/2021 13:32:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6558641975308642, 'f1': 0.6495470915638983, 'precision': 0.6647386972594496, 'recall': 0.6831563296516567}
06/29/2021 13:32:31 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:32:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:32:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:32:43 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.617 | val_loss: 1.659
06/29/2021 13:32:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7530864197530864, 'f1': 0.7012138188608776, 'precision': 0.7316714027383104, 'recall': 0.6904842820730671}
06/29/2021 13:32:43 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:32:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:32:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:32:54 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.544 | val_loss: 1.620
06/29/2021 13:32:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.6941758957654723, 'precision': 0.7263168226133612, 'recall': 0.6836661002548853}
06/29/2021 13:32:54 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 13:33:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:33:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:33:06 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.551 | val_loss: 1.857
06/29/2021 13:33:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6635802469135802, 'f1': 0.6586341887777295, 'precision': 0.6776030680728667, 'recall': 0.6967289719626168}
06/29/2021 13:33:06 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 13:33:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:33:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:33:18 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.555 | val_loss: 2.040
06/29/2021 13:33:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7237654320987654, 'f1': 0.6992524871719746, 'precision': 0.6958847736625515, 'recall': 0.7047366185216652}
06/29/2021 13:33:18 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 13:33:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:33:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:33:30 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.582 | val_loss: 1.610
06/29/2021 13:33:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7716049382716049, 'f1': 0.720988688730624, 'precision': 0.7595500848896435, 'recall': 0.7078164825828377}
06/29/2021 13:33:30 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:33:37 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:33:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:33:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:33:48 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.515 | val_loss: 1.601
06/29/2021 13:33:48 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7183944374209861, 'precision': 0.7398377955833496, 'recall': 0.7085386576040782}
06/29/2021 13:33:48 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:34:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:34:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:34:00 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.509 | val_loss: 1.628
06/29/2021 13:34:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7700617283950617, 'f1': 0.7287065005127917, 'precision': 0.7488915735427364, 'recall': 0.7187977909940526}
06/29/2021 13:34:00 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:34:08 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:34:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:34:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:34:19 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.519 | val_loss: 1.672
06/29/2021 13:34:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7654320987654321, 'f1': 0.71875, 'precision': 0.7462205200564402, 'recall': 0.7075615972812235}
06/29/2021 13:34:19 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:34:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:34:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:34:31 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.514 | val_loss: 1.850
06/29/2021 13:34:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7407407407407407, 'f1': 0.685291396854764, 'precision': 0.7154471544715447, 'recall': 0.6756159728122345}
06/29/2021 13:34:31 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:34:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:34:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:34:42 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 1.514 | val_loss: 1.574
06/29/2021 13:34:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7453703703703703, 'f1': 0.713872066666845, 'precision': 0.7157034158976849, 'recall': 0.7122557349192864}
06/29/2021 13:34:42 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:34:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:34:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:34:54 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 1.473 | val_loss: 1.951
06/29/2021 13:34:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7299382716049383, 'f1': 0.7048281678262703, 'precision': 0.7017166064797291, 'recall': 0.709409515717927}
06/29/2021 13:34:54 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 13:35:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:35:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:35:05 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.488 | val_loss: 1.620
06/29/2021 13:35:05 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7287671232876712, 'precision': 0.7354017857142857, 'recall': 0.7240016992353441}
06/29/2021 13:35:05 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:35:14 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:35:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:35:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:35:25 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.454 | val_loss: 1.661
06/29/2021 13:35:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7469135802469136, 'f1': 0.7042973054192126, 'precision': 0.7185539782106305, 'recall': 0.696856414613424}
06/29/2021 13:35:25 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:35:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:35:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:35:37 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.468 | val_loss: 1.783
06/29/2021 13:35:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7314814814814815, 'f1': 0.70320923180593, 'precision': 0.7016290726817043, 'recall': 0.705055225148683}
06/29/2021 13:35:37 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:35:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:35:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:35:49 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.503 | val_loss: 1.622
06/29/2021 13:35:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.6759345830680106, 'precision': 0.7534953911412023, 'recall': 0.6650169923534409}
06/29/2021 13:35:49 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:36:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:36:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:36:00 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 1.482 | val_loss: 1.748
06/29/2021 13:36:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7685185185185185, 'f1': 0.7264961112924465, 'precision': 0.7471991852175178, 'recall': 0.7165250637213254}
06/29/2021 13:36:00 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 13:36:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:36:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:36:12 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 1.462 | val_loss: 1.752
06/29/2021 13:36:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7191358024691358, 'f1': 0.7009008277876968, 'precision': 0.6972898664571878, 'recall': 0.7133814783347494}
06/29/2021 13:36:12 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 13:36:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:36:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:36:24 - INFO - __main__ -   Epoch: 0029 | Time: 0m_11s | train_loss: 1.443 | val_loss: 1.657
06/29/2021 13:36:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7654320987654321, 'f1': 0.7134478424801005, 'precision': 0.7509550084889643, 'recall': 0.7009345794392523}
06/29/2021 13:36:24 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 13:36:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:36:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:36:35 - INFO - __main__ -   Epoch: 0030 | Time: 0m_11s | train_loss: 1.457 | val_loss: 1.880
06/29/2021 13:36:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6589506172839507, 'f1': 0.6560996870970144, 'precision': 0.6848063641926742, 'recall': 0.7020603228547153}
06/29/2021 13:36:35 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 13:36:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:36:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:36:47 - INFO - __main__ -   Epoch: 0031 | Time: 0m_11s | train_loss: 1.455 | val_loss: 1.746
06/29/2021 13:36:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.720679012345679, 'f1': 0.7027846831026068, 'precision': 0.6991741130543103, 'recall': 0.7156542056074766}
06/29/2021 13:36:47 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 13:36:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:36:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:36:59 - INFO - __main__ -   Epoch: 0032 | Time: 0m_11s | train_loss: 1.442 | val_loss: 1.761
06/29/2021 13:36:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6944444444444444, 'f1': 0.679031370390754, 'precision': 0.6780705482362941, 'recall': 0.6957943925233645}
06/29/2021 13:36:59 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 13:37:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:37:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:37:10 - INFO - __main__ -   Epoch: 0033 | Time: 0m_11s | train_loss: 1.464 | val_loss: 1.689
06/29/2021 13:37:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7592592592592593, 'f1': 0.7122131754256107, 'precision': 0.7374643803429486, 'recall': 0.7017841971112999}
06/29/2021 13:37:10 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 13:37:10 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 13:37:10 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
06/29/2021 13:37:11 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
06/29/2021 13:37:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:37:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:37:15 - INFO - __main__ -   best_val_loss: 1.620
06/29/2021 13:37:15 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7287671232876712, 'precision': 0.7354017857142857, 'recall': 0.7240016992353441}
