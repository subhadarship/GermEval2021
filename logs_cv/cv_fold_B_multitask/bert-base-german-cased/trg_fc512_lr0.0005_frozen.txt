06/29/2021 11:42:50 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 11:42:50 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_B
	dev_data_dir: ../data/cross_validation/fold_B
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_B_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 11:42:51 - INFO - __main__ -   device: cuda
06/29/2021 11:42:51 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 11:42:51 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:42:52 - WARNING - data_utils.bert_data -   trimming sentence 898 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:42:52 - WARNING - data_utils.bert_data -   trimming sentence 1248 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:42:52 - WARNING - data_utils.bert_data -   trimming sentence 1969 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:42:52 - WARNING - data_utils.bert_data -   trimming sentence 39 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   num train samples: 2596
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   num val samples: 648
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   train OOV: 528 (0.45%) out of 117560 running tokens are OOV
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   val OOV: 163 (0.57%) out of 28568 running tokens are OOV
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:42:53 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:42:55 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 11:42:57 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
    (1): Linear(in_features=512, out_features=2, bias=True)
    (2): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 11:42:57 - INFO - __main__ -   the model has 396,806 trainable parameters
06/29/2021 11:42:57 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 11:43:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:43:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:43:07 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 1.687 | val_loss: 1.620
06/29/2021 11:43:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6790123456790124, 'f1': 0.674771009680813, 'precision': 0.6955494062031592, 'recall': 0.716142735768904}
06/29/2021 11:43:07 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:43:07 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:43:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:43:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:43:17 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 1.520 | val_loss: 1.495
06/29/2021 11:43:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.692440191989137, 'precision': 0.7867355449268949, 'recall': 0.6789082412914189}
06/29/2021 11:43:17 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:43:21 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:43:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:43:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:43:31 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 1.467 | val_loss: 1.511
06/29/2021 11:43:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7530864197530864, 'f1': 0.7082625187119429, 'precision': 0.7275571075221883, 'recall': 0.6993203058623619}
06/29/2021 11:43:31 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:43:34 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:43:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:43:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:43:44 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 1.422 | val_loss: 1.465
06/29/2021 11:43:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7716049382716049, 'f1': 0.7293660827162723, 'precision': 0.7517099863201094, 'recall': 0.7188615123194563}
06/29/2021 11:43:44 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:43:48 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:43:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:43:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:43:57 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 1.360 | val_loss: 1.523
06/29/2021 11:43:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.716021003218235, 'precision': 0.7190929799130255, 'recall': 0.7134876805437553}
06/29/2021 11:43:57 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:44:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:44:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:44:07 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 1.302 | val_loss: 1.489
06/29/2021 11:44:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7608024691358025, 'f1': 0.7266663582455921, 'precision': 0.7336627458002709, 'recall': 0.7217289719626168}
06/29/2021 11:44:07 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:44:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:44:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:44:17 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 1.224 | val_loss: 1.518
06/29/2021 11:44:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7623456790123457, 'f1': 0.7058435127104655, 'precision': 0.7504960317460317, 'recall': 0.6930756159728122}
06/29/2021 11:44:17 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:44:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:44:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:44:27 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 1.196 | val_loss: 1.753
06/29/2021 11:44:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.779320987654321, 'f1': 0.7425134559115703, 'precision': 0.758417063282214, 'recall': 0.7335386576040781}
06/29/2021 11:44:27 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:44:30 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:44:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:44:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:44:40 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 1.127 | val_loss: 1.587
06/29/2021 11:44:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7669753086419753, 'f1': 0.7288439955106623, 'precision': 0.7428112778004787, 'recall': 0.7208793542905693}
06/29/2021 11:44:40 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:44:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:44:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:44:50 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 1.064 | val_loss: 1.651
06/29/2021 11:44:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7731481481481481, 'f1': 0.7300176008933658, 'precision': 0.7546478734048992, 'recall': 0.7189252336448598}
06/29/2021 11:44:50 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:44:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:44:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:44:59 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 1.006 | val_loss: 1.613
06/29/2021 11:44:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7685185185185185, 'f1': 0.7241019119851038, 'precision': 0.7489583333333334, 'recall': 0.7132115548003398}
06/29/2021 11:44:59 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:45:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:45:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:45:09 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.949 | val_loss: 1.743
06/29/2021 11:45:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7731481481481481, 'f1': 0.7275901612621862, 'precision': 0.7568085510087914, 'recall': 0.7156117247238742}
06/29/2021 11:45:09 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:45:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:45:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:45:19 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.921 | val_loss: 1.677
06/29/2021 11:45:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7330232978147011, 'precision': 0.7556673832323627, 'recall': 0.722302463891249}
06/29/2021 11:45:19 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:45:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:45:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:45:28 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.868 | val_loss: 1.728
06/29/2021 11:45:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7762345679012346, 'f1': 0.7197089698499208, 'precision': 0.7753153256102961, 'recall': 0.7046941376380629}
06/29/2021 11:45:28 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:45:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:45:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:45:38 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.824 | val_loss: 1.629
06/29/2021 11:45:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7700617283950617, 'f1': 0.7433649723701103, 'precision': 0.7436376408979148, 'recall': 0.7430968564146134}
06/29/2021 11:45:38 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:45:42 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:45:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:45:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:45:52 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.776 | val_loss: 1.772
06/29/2021 11:45:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7577160493827161, 'f1': 0.7307709610748414, 'precision': 0.7300395673964652, 'recall': 0.7315420560747663}
06/29/2021 11:45:52 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:46:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:46:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:46:01 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.717 | val_loss: 1.695
06/29/2021 11:46:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7777777777777778, 'f1': 0.7444543034605147, 'precision': 0.7543258095281348, 'recall': 0.7378929481733221}
06/29/2021 11:46:01 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:46:05 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:46:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:46:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:46:15 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.663 | val_loss: 1.889
06/29/2021 11:46:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.779320987654321, 'f1': 0.7365876122495971, 'precision': 0.7633983592067424, 'recall': 0.7247026338147833}
06/29/2021 11:46:15 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:46:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:46:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:46:25 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.635 | val_loss: 1.875
06/29/2021 11:46:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7654320987654321, 'f1': 0.7281399046104929, 'precision': 0.7404255319148936, 'recall': 0.7208156329651656}
06/29/2021 11:46:25 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:46:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:46:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:46:34 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.605 | val_loss: 1.846
06/29/2021 11:46:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7561728395061729, 'f1': 0.7230829150077895, 'precision': 0.7280074191838898, 'recall': 0.7193288020390824}
06/29/2021 11:46:34 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:46:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:46:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:46:44 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.549 | val_loss: 1.955
06/29/2021 11:46:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7484567901234568, 'f1': 0.7222635635269772, 'precision': 0.7203416327083616, 'recall': 0.7245327102803738}
06/29/2021 11:46:44 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:46:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:46:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:46:54 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.516 | val_loss: 1.995
06/29/2021 11:46:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7685185185185185, 'f1': 0.7172182656053624, 'precision': 0.7552525466893039, 'recall': 0.704375531011045}
06/29/2021 11:46:54 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:47:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:47:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:47:03 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.509 | val_loss: 2.005
06/29/2021 11:47:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7391975308641975, 'f1': 0.7165948526842902, 'precision': 0.7127107915126348, 'recall': 0.7230458793542905}
06/29/2021 11:47:03 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:47:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:47:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:47:13 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.477 | val_loss: 1.969
06/29/2021 11:47:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7808641975308642, 'f1': 0.7403377280115586, 'precision': 0.7635821770568693, 'recall': 0.7291843670348344}
06/29/2021 11:47:13 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 11:47:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:47:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:47:23 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.434 | val_loss: 2.047
06/29/2021 11:47:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7515432098765432, 'f1': 0.7124231289779289, 'precision': 0.7234671646436353, 'recall': 0.7058836023789294}
06/29/2021 11:47:23 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 11:47:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:47:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:47:33 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 0.444 | val_loss: 2.069
06/29/2021 11:47:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7746913580246914, 'f1': 0.7290318145886558, 'precision': 0.7592592592592593, 'recall': 0.7167799490229396}
06/29/2021 11:47:33 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 11:47:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:47:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:47:42 - INFO - __main__ -   Epoch: 0027 | Time: 0m_9s | train_loss: 0.398 | val_loss: 2.209
06/29/2021 11:47:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7345679012345679, 'f1': 0.7118361859454987, 'precision': 0.7079844679043805, 'recall': 0.7184367034834325}
06/29/2021 11:47:42 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 11:47:42 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 11:47:42 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 11:47:42 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_B_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 11:47:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:47:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:47:46 - INFO - __main__ -   best_val_loss: 1.695
06/29/2021 11:47:46 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7777777777777778, 'f1': 0.7444543034605147, 'precision': 0.7543258095281348, 'recall': 0.7378929481733221}
