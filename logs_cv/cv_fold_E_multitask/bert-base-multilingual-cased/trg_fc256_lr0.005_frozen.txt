06/29/2021 12:49:58 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 12:49:58 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_E
	dev_data_dir: ../data/cross_validation/fold_E
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 12:50:00 - INFO - __main__ -   device: cuda
06/29/2021 12:50:00 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 12:50:00 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:50:01 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:50:01 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:50:01 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:50:02 - WARNING - data_utils.bert_data -   trimming sentence 2456 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:50:02 - WARNING - data_utils.bert_data -   trimming sentence 22 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:50:02 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 12:50:02 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 12:50:02 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 12:50:02 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 12:50:02 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   train OOV: 484 (0.38%) out of 128954 running tokens are OOV
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   val OOV: 133 (0.38%) out of 34645 running tokens are OOV
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:50:03 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:50:04 - INFO - data_utils.preprocess_bert -   there are nearly 140 batches in an epoch
06/29/2021 12:50:08 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
    (1): Linear(in_features=256, out_features=2, bias=True)
    (2): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 12:50:08 - INFO - __main__ -   the model has 198,406 trainable parameters
06/29/2021 12:50:08 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 12:50:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:50:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:50:19 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 2.019 | val_loss: 1.719
06/29/2021 12:50:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6147919876733436, 'f1': 0.609855917205294, 'precision': 0.631662959696284, 'recall': 0.6455128205128206}
06/29/2021 12:50:19 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:50:20 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:50:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:50:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:50:32 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.698 | val_loss: 3.062
06/29/2021 12:50:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.41294298921417566, 'f1': 0.370779969311181, 'precision': 0.663348795258343, 'recall': 0.5537296037296038}
06/29/2021 12:50:32 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:50:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:50:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:50:44 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.741 | val_loss: 1.768
06/29/2021 12:50:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.687521241644953, 'precision': 0.7090201465201466, 'recall': 0.678962703962704}
06/29/2021 12:50:44 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:50:52 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:51:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:51:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:51:03 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.692 | val_loss: 2.374
06/29/2021 12:51:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5916795069337443, 'f1': 0.5913651731978702, 'precision': 0.6448966447893025, 'recall': 0.6501748251748252}
06/29/2021 12:51:03 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:51:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:51:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:51:15 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.651 | val_loss: 1.675
06/29/2021 12:51:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6933744221879815, 'f1': 0.6750795627507956, 'precision': 0.6728342245989305, 'recall': 0.6883449883449884}
06/29/2021 12:51:15 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:51:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:51:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:51:27 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.619 | val_loss: 2.050
06/29/2021 12:51:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6486902927580893, 'f1': 0.6428488675201298, 'precision': 0.6600612373376066, 'recall': 0.6777972027972028}
06/29/2021 12:51:27 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:51:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:51:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:51:39 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.604 | val_loss: 1.810
06/29/2021 12:51:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7087827426810478, 'f1': 0.6873293720892886, 'precision': 0.6837689337689338, 'recall': 0.6966783216783217}
06/29/2021 12:51:39 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:51:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:51:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:51:51 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.617 | val_loss: 2.012
06/29/2021 12:51:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6255778120184899, 'f1': 0.6235184305449788, 'precision': 0.6584155991695068, 'recall': 0.6713869463869464}
06/29/2021 12:51:51 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:52:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:52:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:52:03 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.570 | val_loss: 2.502
06/29/2021 12:52:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5685670261941448, 'f1': 0.5681969394544244, 'precision': 0.6518412402274343, 'recall': 0.6448717948717949}
06/29/2021 12:52:03 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:52:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:52:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:52:15 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.610 | val_loss: 1.693
06/29/2021 12:52:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6887519260400616, 'f1': 0.6714335839598997, 'precision': 0.669865466511808, 'recall': 0.685955710955711}
06/29/2021 12:52:15 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:52:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:52:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:52:27 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.572 | val_loss: 1.638
06/29/2021 12:52:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7457627118644068, 'f1': 0.6953528399311533, 'precision': 0.7196969696969697, 'recall': 0.6858974358974359}
06/29/2021 12:52:27 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:52:35 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:52:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:52:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:52:47 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.528 | val_loss: 1.609
06/29/2021 12:52:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7195685670261941, 'f1': 0.6911075545513504, 'precision': 0.6890298106342512, 'recall': 0.6937645687645688}
06/29/2021 12:52:47 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:52:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:52:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:52:58 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.560 | val_loss: 1.796
06/29/2021 12:52:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.650231124807396, 'f1': 0.6417250930809992, 'precision': 0.6524933510638298, 'recall': 0.6701048951048951}
06/29/2021 12:52:58 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:53:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:53:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:53:10 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.529 | val_loss: 1.664
06/29/2021 12:53:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7041602465331279, 'f1': 0.6767458752723876, 'precision': 0.6740321923390383, 'recall': 0.681002331002331}
06/29/2021 12:53:10 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:53:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:53:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:53:22 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.546 | val_loss: 2.193
06/29/2021 12:53:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7395993836671803, 'f1': 0.702936213662968, 'precision': 0.7085221215351812, 'recall': 0.698951048951049}
06/29/2021 12:53:22 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:53:31 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:53:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:53:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:53:42 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.523 | val_loss: 1.601
06/29/2021 12:53:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.711272919763932, 'precision': 0.7321498220467066, 'recall': 0.7018065268065268}
06/29/2021 12:53:42 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:53:51 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:54:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:54:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:54:02 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.495 | val_loss: 1.690
06/29/2021 12:54:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7457627118644068, 'f1': 0.6844919786096257, 'precision': 0.7265886287625418, 'recall': 0.6737179487179488}
06/29/2021 12:54:02 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:54:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:54:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:54:14 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.495 | val_loss: 1.690
06/29/2021 12:54:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6856702619414484, 'f1': 0.6666565955646867, 'precision': 0.6645985401459854, 'recall': 0.6791958041958042}
06/29/2021 12:54:14 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:54:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:54:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:54:26 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.500 | val_loss: 1.774
06/29/2021 12:54:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.7090574558375802, 'precision': 0.7199620427881297, 'recall': 0.7026223776223777}
06/29/2021 12:54:26 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:54:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:54:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:54:38 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.482 | val_loss: 1.917
06/29/2021 12:54:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6918335901386748, 'f1': 0.6710859737679662, 'precision': 0.6682747992697148, 'recall': 0.6816433566433566}
06/29/2021 12:54:38 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:54:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:54:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:54:50 - INFO - __main__ -   Epoch: 0021 | Time: 0m_12s | train_loss: 1.491 | val_loss: 1.669
06/29/2021 12:54:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7395993836671803, 'f1': 0.7084944599037359, 'precision': 0.7092187233316265, 'recall': 0.7078088578088578}
06/29/2021 12:54:50 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:55:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:55:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:55:02 - INFO - __main__ -   Epoch: 0022 | Time: 0m_12s | train_loss: 1.491 | val_loss: 1.718
06/29/2021 12:55:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6979969183359014, 'f1': 0.6787128712871286, 'precision': 0.6759161536206391, 'recall': 0.6907342657342658}
06/29/2021 12:55:02 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:55:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:55:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:55:14 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.471 | val_loss: 1.592
06/29/2021 12:55:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7318952234206472, 'f1': 0.6974440038581073, 'precision': 0.6999783056730665, 'recall': 0.6953379953379953}
06/29/2021 12:55:14 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:55:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:55:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:55:26 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.516 | val_loss: 1.866
06/29/2021 12:55:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6486902927580893, 'f1': 0.6431313910862434, 'precision': 0.6611963951579027, 'recall': 0.6789044289044288}
06/29/2021 12:55:26 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:55:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:55:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:55:38 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.486 | val_loss: 1.771
06/29/2021 12:55:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7010785824345146, 'f1': 0.6798826377023839, 'precision': 0.6766179458350593, 'recall': 0.6897435897435897}
06/29/2021 12:55:38 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 12:55:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:55:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:55:49 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.469 | val_loss: 1.894
06/29/2021 12:55:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7026194144838213, 'f1': 0.6863061831168279, 'precision': 0.684347439269689, 'recall': 0.701981351981352}
06/29/2021 12:55:49 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 12:55:49 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 12:55:49 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
06/29/2021 12:55:50 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
06/29/2021 12:55:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:55:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:55:54 - INFO - __main__ -   best_val_loss: 1.601
06/29/2021 12:55:54 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.711272919763932, 'precision': 0.7321498220467066, 'recall': 0.7018065268065268}
