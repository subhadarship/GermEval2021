06/29/2021 11:53:05 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 11:53:05 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_E
	dev_data_dir: ../data/cross_validation/fold_E
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc128_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc128_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 11:53:06 - INFO - __main__ -   device: cuda
06/29/2021 11:53:06 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 11:53:06 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:53:06 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:53:07 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:53:07 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:53:07 - WARNING - data_utils.bert_data -   trimming sentence 2456 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:53:07 - WARNING - data_utils.bert_data -   trimming sentence 22 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   train OOV: 484 (0.38%) out of 128954 running tokens are OOV
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   val OOV: 133 (0.38%) out of 34645 running tokens are OOV
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:53:08 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:53:10 - INFO - data_utils.preprocess_bert -   there are nearly 140 batches in an epoch
06/29/2021 11:53:13 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
    (1): Linear(in_features=128, out_features=2, bias=True)
    (2): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 11:53:13 - INFO - __main__ -   the model has 99,206 trainable parameters
06/29/2021 11:53:13 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 11:53:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:53:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:53:25 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.958 | val_loss: 1.632
06/29/2021 11:53:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7041602465331279, 'f1': 0.6754594324290537, 'precision': 0.6731234866828086, 'recall': 0.6787878787878787}
06/29/2021 11:53:25 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:53:26 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:53:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:53:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:53:38 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.715 | val_loss: 2.998
06/29/2021 11:53:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.48073959938366717, 'f1': 0.46420793473867294, 'precision': 0.6631137287605546, 'recall': 0.5994755244755244}
06/29/2021 11:53:38 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:53:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:53:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:53:50 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.698 | val_loss: 1.757
06/29/2021 11:53:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7318952234206472, 'f1': 0.6678412593830153, 'precision': 0.7060987348734873, 'recall': 0.6587995337995338}
06/29/2021 11:53:50 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:54:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:54:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:54:02 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.647 | val_loss: 2.451
06/29/2021 11:54:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5485362095531587, 'f1': 0.54645152826971, 'precision': 0.6545983086680761, 'recall': 0.6363636363636364}
06/29/2021 11:54:02 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:54:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:54:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:54:14 - INFO - __main__ -   Epoch: 0005 | Time: 0m_12s | train_loss: 1.640 | val_loss: 1.821
06/29/2021 11:54:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6409861325115562, 'f1': 0.6348694297890836, 'precision': 0.6517639206712433, 'recall': 0.6686480186480186}
06/29/2021 11:54:14 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:54:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:54:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:54:26 - INFO - __main__ -   Epoch: 0006 | Time: 0m_12s | train_loss: 1.589 | val_loss: 2.041
06/29/2021 11:54:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6425269645608629, 'f1': 0.6356755710414248, 'precision': 0.6505615838568437, 'recall': 0.6675990675990676}
06/29/2021 11:54:26 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:54:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:54:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:54:38 - INFO - __main__ -   Epoch: 0007 | Time: 0m_12s | train_loss: 1.617 | val_loss: 2.067
06/29/2021 11:54:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7041602465331279, 'f1': 0.6899372947148403, 'precision': 0.6891797137642878, 'recall': 0.7086829836829838}
06/29/2021 11:54:38 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:54:45 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:54:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:54:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:54:57 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.615 | val_loss: 1.920
06/29/2021 11:54:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6286594761171033, 'f1': 0.6256698186134784, 'precision': 0.6549138048052124, 'recall': 0.6692890442890442}
06/29/2021 11:54:57 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:55:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:09 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.566 | val_loss: 2.060
06/29/2021 11:55:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.637904468412943, 'f1': 0.6357424510569596, 'precision': 0.6697351705267273, 'recall': 0.684032634032634}
06/29/2021 11:55:09 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:55:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:21 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.597 | val_loss: 1.642
06/29/2021 11:55:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7272727272727273, 'f1': 0.6967169617044869, 'precision': 0.6960936019705678, 'recall': 0.6973776223776224}
06/29/2021 11:55:21 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:55:28 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:55:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:40 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.579 | val_loss: 1.872
06/29/2021 11:55:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7164869029275809, 'f1': 0.6931442080378251, 'precision': 0.6895087719298245, 'recall': 0.7002913752913753}
06/29/2021 11:55:40 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:55:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:52 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.553 | val_loss: 1.734
06/29/2021 11:55:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7041602465331279, 'f1': 0.6842425348172475, 'precision': 0.6810155283770785, 'recall': 0.6953962703962704}
06/29/2021 11:55:52 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:56:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:04 - INFO - __main__ -   Epoch: 0013 | Time: 0m_12s | train_loss: 1.527 | val_loss: 1.951
06/29/2021 11:56:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5793528505392912, 'f1': 0.5793488557610809, 'precision': 0.6481566231720556, 'recall': 0.6474941724941725}
06/29/2021 11:56:04 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:56:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:16 - INFO - __main__ -   Epoch: 0014 | Time: 0m_12s | train_loss: 1.566 | val_loss: 1.715
06/29/2021 11:56:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6579352850539292, 'f1': 0.6507640248986795, 'precision': 0.6638473680206907, 'recall': 0.6825757575757576}
06/29/2021 11:56:16 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:56:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:28 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.546 | val_loss: 1.760
06/29/2021 11:56:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6610169491525424, 'f1': 0.6545199380565234, 'precision': 0.669093851132686, 'recall': 0.6882284382284383}
06/29/2021 11:56:28 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:56:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:40 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.509 | val_loss: 1.608
06/29/2021 11:56:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.6966901532132512, 'precision': 0.747776003649635, 'recall': 0.6841491841491841}
06/29/2021 11:56:40 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:56:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:52 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.503 | val_loss: 1.570
06/29/2021 11:56:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7550077041602465, 'f1': 0.6979866950365403, 'precision': 0.7382036479930618, 'recall': 0.6862470862470862}
06/29/2021 11:56:52 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:56:59 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:57:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:11 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.510 | val_loss: 1.794
06/29/2021 11:57:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6902927580893683, 'f1': 0.671301324127852, 'precision': 0.6689950120801185, 'recall': 0.6837995337995338}
06/29/2021 11:57:11 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:57:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:23 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.512 | val_loss: 1.769
06/29/2021 11:57:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.736517719568567, 'f1': 0.7036964850685499, 'precision': 0.7054475169057156, 'recall': 0.7021561771561772}
06/29/2021 11:57:23 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:57:31 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:57:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:42 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.490 | val_loss: 1.816
06/29/2021 11:57:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6718027734976888, 'f1': 0.6597804177526414, 'precision': 0.6635950625750042, 'recall': 0.6819930069930069}
06/29/2021 11:57:42 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:57:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:54 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 1.503 | val_loss: 1.710
06/29/2021 11:57:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7180277349768875, 'f1': 0.6945301066612484, 'precision': 0.6908985943775101, 'recall': 0.7014568764568765}
06/29/2021 11:57:54 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:58:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:06 - INFO - __main__ -   Epoch: 0022 | Time: 0m_12s | train_loss: 1.499 | val_loss: 1.646
06/29/2021 11:58:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7149460708782742, 'f1': 0.6960048815440668, 'precision': 0.69245739945487, 'recall': 0.707983682983683}
06/29/2021 11:58:06 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:58:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:18 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.473 | val_loss: 1.623
06/29/2021 11:58:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6856702619414484, 'f1': 0.6747346698113208, 'precision': 0.6788324293462746, 'recall': 0.6991258741258741}
06/29/2021 11:58:18 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:58:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:30 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.493 | val_loss: 1.923
06/29/2021 11:58:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6101694915254238, 'f1': 0.6089663138090758, 'precision': 0.6508826335877862, 'recall': 0.6608391608391608}
06/29/2021 11:58:30 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:58:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:42 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.459 | val_loss: 1.640
06/29/2021 11:58:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7303543913713405, 'f1': 0.7001438886908768, 'precision': 0.6995094633571233, 'recall': 0.7008158508158508}
06/29/2021 11:58:42 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:58:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:54 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.456 | val_loss: 1.783
06/29/2021 11:58:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7318952234206472, 'f1': 0.7087374133377353, 'precision': 0.7049365530876153, 'recall': 0.7152680652680653}
06/29/2021 11:58:54 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:59:02 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:59:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:13 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 1.437 | val_loss: 1.605
06/29/2021 11:59:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.698119476377168, 'precision': 0.7109747545582048, 'recall': 0.6912587412587412}
06/29/2021 11:59:13 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:59:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:25 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 1.449 | val_loss: 1.618
06/29/2021 11:59:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.6817827508171989, 'precision': 0.7743034161703293, 'recall': 0.6698135198135198}
06/29/2021 11:59:25 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:59:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:37 - INFO - __main__ -   Epoch: 0029 | Time: 0m_11s | train_loss: 1.484 | val_loss: 1.714
06/29/2021 11:59:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6887519260400616, 'f1': 0.6775432900432902, 'precision': 0.6810326770004189, 'recall': 0.7014568764568765}
06/29/2021 11:59:37 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:59:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:49 - INFO - __main__ -   Epoch: 0030 | Time: 0m_11s | train_loss: 1.503 | val_loss: 1.789
06/29/2021 11:59:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.711864406779661, 'f1': 0.6884269492730744, 'precision': 0.6848785761476707, 'recall': 0.6956876456876457}
06/29/2021 11:59:49 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:00:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:01 - INFO - __main__ -   Epoch: 0031 | Time: 0m_12s | train_loss: 1.449 | val_loss: 1.758
06/29/2021 12:00:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7072419106317411, 'f1': 0.6801131057383002, 'precision': 0.6773380195599021, 'recall': 0.6844405594405594}
06/29/2021 12:00:01 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:00:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:13 - INFO - __main__ -   Epoch: 0032 | Time: 0m_11s | train_loss: 1.482 | val_loss: 1.825
06/29/2021 12:00:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6548536209553159, 'f1': 0.6509076937854194, 'precision': 0.6745578623606305, 'recall': 0.6924242424242424}
06/29/2021 12:00:13 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:00:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:25 - INFO - __main__ -   Epoch: 0033 | Time: 0m_11s | train_loss: 1.442 | val_loss: 1.647
06/29/2021 12:00:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6918335901386748, 'f1': 0.6770180153279586, 'precision': 0.6767121313994813, 'recall': 0.69493006993007}
06/29/2021 12:00:25 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:00:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:37 - INFO - __main__ -   Epoch: 0034 | Time: 0m_12s | train_loss: 1.406 | val_loss: 1.618
06/29/2021 12:00:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7473035439137135, 'f1': 0.6910169767063796, 'precision': 0.7254050619506514, 'recall': 0.6804195804195804}
06/29/2021 12:00:37 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:00:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:49 - INFO - __main__ -   Epoch: 0035 | Time: 0m_11s | train_loss: 1.437 | val_loss: 1.603
06/29/2021 12:00:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.6806934274882065, 'precision': 0.7976804123711341, 'recall': 0.6688811188811189}
06/29/2021 12:00:49 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 12:01:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:01:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:01:01 - INFO - __main__ -   Epoch: 0036 | Time: 0m_11s | train_loss: 1.412 | val_loss: 1.799
06/29/2021 12:01:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7395993836671803, 'f1': 0.6942272254607598, 'precision': 0.7095269226197551, 'recall': 0.6867715617715617}
06/29/2021 12:01:01 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 12:01:01 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 12:01:01 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc128_lr0.005_frozen
06/29/2021 12:01:02 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc128_lr0.005_frozen
06/29/2021 12:01:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:01:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:01:06 - INFO - __main__ -   best_val_loss: 1.783
06/29/2021 12:01:06 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7318952234206472, 'f1': 0.7087374133377353, 'precision': 0.7049365530876153, 'recall': 0.7152680652680653}
