06/29/2021 13:21:03 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 13:21:03 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_E
	dev_data_dir: ../data/cross_validation/fold_E
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 13:21:04 - INFO - __main__ -   device: cuda
06/29/2021 13:21:04 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 13:21:05 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:21:05 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:21:05 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:21:05 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:21:06 - WARNING - data_utils.bert_data -   trimming sentence 2456 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:21:06 - WARNING - data_utils.bert_data -   trimming sentence 22 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:21:06 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 13:21:06 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 13:21:06 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 13:21:06 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 13:21:06 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   train OOV: 484 (0.38%) out of 128954 running tokens are OOV
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   val OOV: 133 (0.38%) out of 34645 running tokens are OOV
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:21:07 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:21:08 - INFO - data_utils.preprocess_bert -   there are nearly 140 batches in an epoch
06/29/2021 13:21:12 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
    (1): Linear(in_features=512, out_features=2, bias=True)
    (2): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 13:21:12 - INFO - __main__ -   the model has 396,806 trainable parameters
06/29/2021 13:21:12 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 13:21:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:21:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:21:23 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.888 | val_loss: 1.912
06/29/2021 13:21:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.588597842835131, 'f1': 0.5878306538508196, 'precision': 0.634004705976993, 'recall': 0.6412004662004662}
06/29/2021 13:21:23 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:21:24 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:21:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:21:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:21:36 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.708 | val_loss: 2.132
06/29/2021 13:21:36 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5069337442218799, 'f1': 0.4995180258338153, 'precision': 0.6440498129223209, 'recall': 0.6093240093240093}
06/29/2021 13:21:36 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:21:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:21:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:21:48 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.663 | val_loss: 1.756
06/29/2021 13:21:48 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.736517719568567, 'f1': 0.6842747613831952, 'precision': 0.7075068870523415, 'recall': 0.6755827505827506}
06/29/2021 13:21:48 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:21:56 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:22:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:22:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:22:08 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.639 | val_loss: 2.267
06/29/2021 13:22:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5285053929121726, 'f1': 0.525094696969697, 'precision': 0.6419421487603305, 'recall': 0.6201048951048951}
06/29/2021 13:22:08 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:22:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:22:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:22:19 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.621 | val_loss: 1.612
06/29/2021 13:22:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.699537750385208, 'f1': 0.6830554699885049, 'precision': 0.6812093841869101, 'recall': 0.6985431235431235}
06/29/2021 13:22:19 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:22:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:22:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:22:31 - INFO - __main__ -   Epoch: 0006 | Time: 0m_12s | train_loss: 1.560 | val_loss: 1.857
06/29/2021 13:22:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6656394453004623, 'f1': 0.6584748948140604, 'precision': 0.6710286148873468, 'recall': 0.6906177156177156}
06/29/2021 13:22:31 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:22:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:22:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:22:43 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.571 | val_loss: 1.746
06/29/2021 13:22:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7087827426810478, 'f1': 0.6945699836404791, 'precision': 0.6934832756632066, 'recall': 0.7132867132867133}
06/29/2021 13:22:43 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:22:52 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:23:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:23:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:23:03 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.561 | val_loss: 1.979
06/29/2021 13:23:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6147919876733436, 'f1': 0.6133959207014869, 'precision': 0.6535491535491535, 'recall': 0.6643356643356644}
06/29/2021 13:23:03 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:23:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:23:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:23:15 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.540 | val_loss: 1.891
06/29/2021 13:23:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6332819722650231, 'f1': 0.6308199009541291, 'precision': 0.6629403398020419, 'recall': 0.6772144522144522}
06/29/2021 13:23:15 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:23:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:23:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:23:27 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.551 | val_loss: 1.576
06/29/2021 13:23:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7349768875192604, 'f1': 0.7029843121394665, 'precision': 0.7039389273800359, 'recall': 0.7020979020979021}
06/29/2021 13:23:27 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:23:35 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:23:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:23:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:23:46 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.512 | val_loss: 1.624
06/29/2021 13:23:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7334360554699538, 'f1': 0.6973869685331177, 'precision': 0.7014612173148759, 'recall': 0.6942890442890444}
06/29/2021 13:23:46 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:23:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:23:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:23:58 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.495 | val_loss: 1.545
06/29/2021 13:23:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7272727272727273, 'f1': 0.6960525166892895, 'precision': 0.6958387956188945, 'recall': 0.6962703962703962}
06/29/2021 13:23:58 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:24:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:24:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:24:10 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.481 | val_loss: 1.679
06/29/2021 13:24:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6409861325115562, 'f1': 0.6372344636495579, 'precision': 0.6623755032845942, 'recall': 0.6786130536130536}
06/29/2021 13:24:10 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:24:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:24:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:24:22 - INFO - __main__ -   Epoch: 0014 | Time: 0m_12s | train_loss: 1.470 | val_loss: 1.614
06/29/2021 13:24:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.699537750385208, 'f1': 0.6795727129788813, 'precision': 0.676549600956919, 'recall': 0.6907925407925408}
06/29/2021 13:24:22 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 13:24:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:24:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:24:34 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.477 | val_loss: 1.643
06/29/2021 13:24:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.720437827210674, 'precision': 0.7334297127197567, 'recall': 0.712995337995338}
06/29/2021 13:24:34 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:24:42 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:24:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:24:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:24:54 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.445 | val_loss: 1.522
06/29/2021 13:24:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.6964587973273941, 'precision': 0.711348021795783, 'recall': 0.6890442890442889}
06/29/2021 13:24:54 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:25:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:25:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:25:06 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.443 | val_loss: 1.573
06/29/2021 13:25:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7503852080123267, 'f1': 0.7081056769722816, 'precision': 0.7226039485140128, 'recall': 0.7004662004662005}
06/29/2021 13:25:06 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:25:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:25:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:25:18 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.448 | val_loss: 1.611
06/29/2021 13:25:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6902927580893683, 'f1': 0.6707803662959289, 'precision': 0.6683213260704035, 'recall': 0.6826923076923077}
06/29/2021 13:25:18 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:25:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:25:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:25:30 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.423 | val_loss: 1.599
06/29/2021 13:25:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7257318952234206, 'f1': 0.6946705713198291, 'precision': 0.6942528008101778, 'recall': 0.695104895104895}
06/29/2021 13:25:30 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 13:25:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:25:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:25:41 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.411 | val_loss: 1.826
06/29/2021 13:25:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6317411402157165, 'f1': 0.6274066120427287, 'precision': 0.6505619056766881, 'recall': 0.666083916083916}
06/29/2021 13:25:41 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 13:25:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:25:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:25:53 - INFO - __main__ -   Epoch: 0021 | Time: 0m_12s | train_loss: 1.431 | val_loss: 1.619
06/29/2021 13:25:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7057010785824345, 'f1': 0.6787436796533431, 'precision': 0.6759163208852006, 'recall': 0.6832750582750583}
06/29/2021 13:25:53 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 13:26:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:26:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:26:05 - INFO - __main__ -   Epoch: 0022 | Time: 0m_12s | train_loss: 1.407 | val_loss: 1.664
06/29/2021 13:26:05 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.687211093990755, 'f1': 0.6714841772704264, 'precision': 0.6708857104356363, 'recall': 0.6881118881118882}
06/29/2021 13:26:05 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 13:26:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:26:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:26:17 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.386 | val_loss: 1.546
06/29/2021 13:26:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7334360554699538, 'f1': 0.704211177997023, 'precision': 0.7031656184486373, 'recall': 0.7053613053613054}
06/29/2021 13:26:17 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 13:26:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:26:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:26:29 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.399 | val_loss: 1.682
06/29/2021 13:26:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6718027734976888, 'f1': 0.6609719309862782, 'precision': 0.6663053400273847, 'recall': 0.6853146853146853}
06/29/2021 13:26:29 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 13:26:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:26:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:26:41 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.357 | val_loss: 1.622
06/29/2021 13:26:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7087827426810478, 'f1': 0.6845147003222729, 'precision': 0.681124497991968, 'recall': 0.6911421911421911}
06/29/2021 13:26:41 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 13:26:41 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 13:26:41 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen
06/29/2021 13:26:42 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen
06/29/2021 13:26:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:26:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:26:46 - INFO - __main__ -   best_val_loss: 1.643
06/29/2021 13:26:46 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.720437827210674, 'precision': 0.7334297127197567, 'recall': 0.712995337995338}
