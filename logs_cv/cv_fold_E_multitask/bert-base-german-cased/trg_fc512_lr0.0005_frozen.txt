06/29/2021 11:54:25 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 11:54:25 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_E
	dev_data_dir: ../data/cross_validation/fold_E
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_E_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 11:54:26 - INFO - __main__ -   device: cuda
06/29/2021 11:54:26 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 11:54:26 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:54:27 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:54:27 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:54:27 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:54:28 - WARNING - data_utils.bert_data -   trimming sentence 22 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   train OOV: 535 (0.46%) out of 115087 running tokens are OOV
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   val OOV: 156 (0.50%) out of 31041 running tokens are OOV
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:54:28 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:54:30 - INFO - data_utils.preprocess_bert -   there are nearly 125 batches in an epoch
06/29/2021 11:54:32 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
    (1): Linear(in_features=512, out_features=2, bias=True)
    (2): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 11:54:32 - INFO - __main__ -   the model has 396,806 trainable parameters
06/29/2021 11:54:32 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 11:54:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:54:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:54:42 - INFO - __main__ -   Epoch: 0001 | Time: 0m_10s | train_loss: 1.684 | val_loss: 1.728
06/29/2021 11:54:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6718027734976888, 'f1': 0.6662111096355141, 'precision': 0.6827040427154843, 'recall': 0.7030303030303031}
06/29/2021 11:54:42 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:54:43 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:54:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:54:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:54:53 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 1.492 | val_loss: 1.547
06/29/2021 11:54:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.750086777307734, 'precision': 0.7572995545657015, 'recall': 0.7448135198135198}
06/29/2021 11:54:53 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:54:56 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:55:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:06 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 1.458 | val_loss: 1.467
06/29/2021 11:55:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7550077041602465, 'f1': 0.7281478456735646, 'precision': 0.726975890985325, 'recall': 0.7294289044289044}
06/29/2021 11:55:06 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:55:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:16 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 1.370 | val_loss: 1.446
06/29/2021 11:55:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7489857553139838, 'precision': 0.760608381535929, 'recall': 0.7415501165501166}
06/29/2021 11:55:16 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:55:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:26 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 1.295 | val_loss: 1.687
06/29/2021 11:55:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.7326137112722478, 'precision': 0.7440660474716203, 'recall': 0.7255244755244755}
06/29/2021 11:55:26 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:55:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:36 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 1.313 | val_loss: 1.519
06/29/2021 11:55:36 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7347684300953303, 'precision': 0.7514697549227936, 'recall': 0.7256993006993007}
06/29/2021 11:55:36 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:55:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:46 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 1.230 | val_loss: 1.552
06/29/2021 11:55:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7426810477657936, 'f1': 0.7212378568985162, 'precision': 0.7169628514056225, 'recall': 0.728962703962704}
06/29/2021 11:55:46 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:55:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:55:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:55:56 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 1.195 | val_loss: 1.682
06/29/2021 11:55:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7026194144838213, 'f1': 0.6950878414399326, 'precision': 0.7038720154994587, 'recall': 0.7274475524475524}
06/29/2021 11:55:56 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:56:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:06 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 1.109 | val_loss: 1.497
06/29/2021 11:56:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.749863216764369, 'precision': 0.7549384750604262, 'recall': 0.7458624708624708}
06/29/2021 11:56:06 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 11:56:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:16 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 1.059 | val_loss: 1.598
06/29/2021 11:56:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7387278582930756, 'precision': 0.7737309546520921, 'recall': 0.725}
06/29/2021 11:56:16 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 11:56:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:26 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.996 | val_loss: 1.563
06/29/2021 11:56:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7350981514924606, 'precision': 0.7835043787629994, 'recall': 0.7195221445221445}
06/29/2021 11:56:26 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 11:56:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:36 - INFO - __main__ -   Epoch: 0012 | Time: 0m_10s | train_loss: 0.977 | val_loss: 1.703
06/29/2021 11:56:36 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.7585860478250126, 'precision': 0.7664935790061418, 'recall': 0.7528554778554779}
06/29/2021 11:56:36 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:56:40 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:56:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:49 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.904 | val_loss: 1.614
06/29/2021 11:56:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7290608077482765, 'precision': 0.787897030157092, 'recall': 0.7128205128205128}
06/29/2021 11:56:49 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:56:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:56:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:56:59 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.847 | val_loss: 1.692
06/29/2021 11:56:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.7368019275268971, 'precision': 0.797199289072354, 'recall': 0.7196969696969697}
06/29/2021 11:56:59 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:57:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:09 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.828 | val_loss: 1.678
06/29/2021 11:57:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7417527908599337, 'precision': 0.7505687705545795, 'recall': 0.7357226107226107}
06/29/2021 11:57:09 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:57:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:19 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.775 | val_loss: 1.777
06/29/2021 11:57:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7996918335901386, 'f1': 0.755074432755057, 'precision': 0.7984287302763953, 'recall': 0.738869463869464}
06/29/2021 11:57:19 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:57:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:29 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.716 | val_loss: 1.784
06/29/2021 11:57:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.7478053194235258, 'precision': 0.7757037791636644, 'recall': 0.7351398601398602}
06/29/2021 11:57:29 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:57:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:39 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.687 | val_loss: 1.859
06/29/2021 11:57:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.7588257153474545, 'precision': 0.7692364336694233, 'recall': 0.7518065268065268}
06/29/2021 11:57:39 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:57:43 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:57:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:57:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:57:53 - INFO - __main__ -   Epoch: 0019 | Time: 0m_10s | train_loss: 0.646 | val_loss: 1.884
06/29/2021 11:57:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.765793528505393, 'f1': 0.7398358545899529, 'precision': 0.7388340336134454, 'recall': 0.740909090909091}
06/29/2021 11:57:53 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:58:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:03 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.611 | val_loss: 1.906
06/29/2021 11:58:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7129588677576293, 'precision': 0.8145259938837921, 'recall': 0.6961538461538461}
06/29/2021 11:58:03 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:58:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:13 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.577 | val_loss: 1.988
06/29/2021 11:58:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7326742868911544, 'precision': 0.7281896066285898, 'recall': 0.7404428904428904}
06/29/2021 11:58:13 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:58:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:23 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.563 | val_loss: 1.903
06/29/2021 11:58:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7338312999256491, 'precision': 0.7335761407366685, 'recall': 0.7340909090909091}
06/29/2021 11:58:23 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:58:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:33 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.515 | val_loss: 2.085
06/29/2021 11:58:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7950693374422187, 'f1': 0.7619740953074285, 'precision': 0.7764833206009677, 'recall': 0.7530885780885781}
06/29/2021 11:58:33 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:58:36 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:58:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:46 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.475 | val_loss: 1.966
06/29/2021 11:58:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7332467737501258, 'precision': 0.7413245137235525, 'recall': 0.7276806526806526}
06/29/2021 11:58:46 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:58:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:58:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:58:56 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.453 | val_loss: 2.011
06/29/2021 11:58:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7919876733436055, 'f1': 0.7583947583947585, 'precision': 0.7727272727272727, 'recall': 0.7496503496503497}
06/29/2021 11:58:56 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:59:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:06 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 0.423 | val_loss: 2.081
06/29/2021 11:59:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.7301470994455057, 'precision': 0.7710577408973642, 'recall': 0.715967365967366}
06/29/2021 11:59:06 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:59:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:16 - INFO - __main__ -   Epoch: 0027 | Time: 0m_9s | train_loss: 0.430 | val_loss: 2.264
06/29/2021 11:59:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7180277349768875, 'f1': 0.702559748758443, 'precision': 0.7000377146835834, 'recall': 0.7191724941724942}
06/29/2021 11:59:16 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:59:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:26 - INFO - __main__ -   Epoch: 0028 | Time: 0m_9s | train_loss: 0.375 | val_loss: 2.519
06/29/2021 11:59:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7374403001892474, 'precision': 0.7447515354550531, 'recall': 0.7322261072261071}
06/29/2021 11:59:26 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:59:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:36 - INFO - __main__ -   Epoch: 0029 | Time: 0m_9s | train_loss: 0.376 | val_loss: 2.229
06/29/2021 11:59:36 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.765793528505393, 'f1': 0.7331472224025624, 'precision': 0.7390801160652978, 'recall': 0.7287296037296037}
06/29/2021 11:59:36 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:59:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:46 - INFO - __main__ -   Epoch: 0030 | Time: 0m_9s | train_loss: 0.351 | val_loss: 2.241
06/29/2021 11:59:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.7461927766275593, 'precision': 0.7820967284539431, 'recall': 0.7318764568764569}
06/29/2021 11:59:46 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 11:59:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:59:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:59:56 - INFO - __main__ -   Epoch: 0031 | Time: 0m_9s | train_loss: 0.326 | val_loss: 2.353
06/29/2021 11:59:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.741269190774489, 'precision': 0.7596695590158089, 'recall': 0.7314685314685314}
06/29/2021 11:59:56 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:00:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:06 - INFO - __main__ -   Epoch: 0032 | Time: 0m_9s | train_loss: 0.310 | val_loss: 2.382
06/29/2021 12:00:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7369187369187369, 'precision': 0.7501909854851032, 'recall': 0.729020979020979}
06/29/2021 12:00:06 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 12:00:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:15 - INFO - __main__ -   Epoch: 0033 | Time: 0m_9s | train_loss: 0.315 | val_loss: 2.996
06/29/2021 12:00:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6147919876733436, 'f1': 0.6145861046710501, 'precision': 0.6723095898859082, 'recall': 0.6776223776223775}
06/29/2021 12:00:15 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 12:00:15 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 12:00:15 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 12:00:16 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 12:00:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:00:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:00:19 - INFO - __main__ -   best_val_loss: 2.085
06/29/2021 12:00:19 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7950693374422187, 'f1': 0.7619740953074285, 'precision': 0.7764833206009677, 'recall': 0.7530885780885781}
