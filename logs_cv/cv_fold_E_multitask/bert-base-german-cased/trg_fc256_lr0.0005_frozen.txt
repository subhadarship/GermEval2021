06/29/2021 11:12:27 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 11:12:27 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_E
	dev_data_dir: ../data/cross_validation/fold_E
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_E_multitask/bert-base-german-cased/trg_fc256_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 11:12:28 - INFO - __main__ -   device: cuda
06/29/2021 11:12:28 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 11:12:28 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:12:29 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:12:29 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:12:29 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:12:30 - WARNING - data_utils.bert_data -   trimming sentence 22 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   train OOV: 535 (0.46%) out of 115087 running tokens are OOV
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   val OOV: 156 (0.50%) out of 31041 running tokens are OOV
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:12:30 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:12:32 - INFO - data_utils.preprocess_bert -   there are nearly 125 batches in an epoch
06/29/2021 11:12:34 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
    (1): Linear(in_features=256, out_features=2, bias=True)
    (2): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 11:12:34 - INFO - __main__ -   the model has 198,406 trainable parameters
06/29/2021 11:12:34 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 11:12:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:12:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:12:44 - INFO - __main__ -   Epoch: 0001 | Time: 0m_10s | train_loss: 1.686 | val_loss: 1.711
06/29/2021 11:12:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6933744221879815, 'f1': 0.6852930784507232, 'precision': 0.6936229819563153, 'recall': 0.716025641025641}
06/29/2021 11:12:44 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:12:45 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:12:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:12:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:12:55 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 1.498 | val_loss: 1.551
06/29/2021 11:12:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7434830889687754, 'precision': 0.7476665136511684, 'recall': 0.7400932400932401}
06/29/2021 11:12:55 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:12:58 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:13:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:08 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 1.476 | val_loss: 1.456
06/29/2021 11:13:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7400581679960837, 'precision': 0.7375825928457507, 'recall': 0.7430652680652681}
06/29/2021 11:13:08 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:13:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:18 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 1.384 | val_loss: 1.434
06/29/2021 11:13:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7470489977728285, 'precision': 0.7651622838190002, 'recall': 0.7371794871794872}
06/29/2021 11:13:18 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:13:27 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:13:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:37 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 1.322 | val_loss: 1.570
06/29/2021 11:13:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7765793528505393, 'f1': 0.738377022883149, 'precision': 0.7553005619303962, 'recall': 0.729137529137529}
06/29/2021 11:13:37 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:13:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:47 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 1.337 | val_loss: 1.523
06/29/2021 11:13:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.7265371650452296, 'precision': 0.7281770329788377, 'recall': 0.725058275058275}
06/29/2021 11:13:47 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:13:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:57 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 1.268 | val_loss: 1.518
06/29/2021 11:13:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7482914046121594, 'precision': 0.745921967417246, 'recall': 0.7511072261072261}
06/29/2021 11:13:57 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:14:01 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:14:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:11 - INFO - __main__ -   Epoch: 0008 | Time: 0m_10s | train_loss: 1.247 | val_loss: 1.634
06/29/2021 11:14:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7026194144838213, 'f1': 0.6938237745691161, 'precision': 0.6999477533960292, 'recall': 0.723018648018648}
06/29/2021 11:14:11 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:14:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:21 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 1.184 | val_loss: 1.471
06/29/2021 11:14:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.7514292823255437, 'precision': 0.7718926553672316, 'recall': 0.7406759906759908}
06/29/2021 11:14:21 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:14:24 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:14:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:34 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 1.141 | val_loss: 1.519
06/29/2021 11:14:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7388777126225228, 'precision': 0.7693137923199274, 'recall': 0.7260489510489511}
06/29/2021 11:14:34 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:14:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:44 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 1.080 | val_loss: 1.544
06/29/2021 11:14:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.737143651129171, 'precision': 0.7908639079689508, 'recall': 0.7207459207459207}
06/29/2021 11:14:44 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:14:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:54 - INFO - __main__ -   Epoch: 0012 | Time: 0m_10s | train_loss: 1.068 | val_loss: 1.631
06/29/2021 11:14:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7556694301725002, 'precision': 0.7625766257995736, 'recall': 0.7505244755244755}
06/29/2021 11:14:54 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:14:58 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:15:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:08 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 1.018 | val_loss: 1.531
06/29/2021 11:15:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7873651771956857, 'f1': 0.7310385835095137, 'precision': 0.7960186976144423, 'recall': 0.7140442890442891}
06/29/2021 11:15:08 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:15:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:18 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.980 | val_loss: 1.610
06/29/2021 11:15:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.802773497688752, 'f1': 0.7588425184049792, 'precision': 0.8027242401779096, 'recall': 0.7423076923076923}
06/29/2021 11:15:18 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:15:22 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:15:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:32 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.956 | val_loss: 1.588
06/29/2021 11:15:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.8058551617873652, 'f1': 0.7670097100656454, 'precision': 0.7994782499371386, 'recall': 0.7523892773892773}
06/29/2021 11:15:32 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:15:35 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:15:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:45 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.900 | val_loss: 1.685
06/29/2021 11:15:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7966101694915254, 'f1': 0.7480175071181495, 'precision': 0.7998074807480748, 'recall': 0.731002331002331}
06/29/2021 11:15:45 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:15:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:55 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.854 | val_loss: 1.627
06/29/2021 11:15:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7950693374422187, 'f1': 0.7613343840294196, 'precision': 0.7770503261882573, 'recall': 0.751981351981352}
06/29/2021 11:15:55 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:16:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:05 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.821 | val_loss: 1.674
06/29/2021 11:16:05 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7966101694915254, 'f1': 0.7608375209380234, 'precision': 0.7812388177198883, 'recall': 0.7498251748251747}
06/29/2021 11:16:05 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:16:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:15 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.794 | val_loss: 1.903
06/29/2021 11:16:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7435769982742841, 'precision': 0.7383823383823384, 'recall': 0.7551282051282051}
06/29/2021 11:16:15 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:16:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:25 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.767 | val_loss: 1.821
06/29/2021 11:16:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.6932152538612182, 'precision': 0.8158617212012551, 'recall': 0.6791958041958042}
06/29/2021 11:16:25 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:16:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:35 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.739 | val_loss: 1.766
06/29/2021 11:16:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.7547893739756062, 'precision': 0.7559821657685399, 'recall': 0.7536713286713287}
06/29/2021 11:16:35 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:16:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:45 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.716 | val_loss: 1.739
06/29/2021 11:16:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7981510015408321, 'f1': 0.7708537160568695, 'precision': 0.7763293781586464, 'recall': 0.7664918414918416}
06/29/2021 11:16:45 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:16:49 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:16:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:59 - INFO - __main__ -   Epoch: 0023 | Time: 0m_10s | train_loss: 0.671 | val_loss: 1.892
06/29/2021 11:16:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.810477657935285, 'f1': 0.7755556492767071, 'precision': 0.80088769611891, 'recall': 0.7625291375291375}
06/29/2021 11:16:59 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:17:02 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:17:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:12 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.635 | val_loss: 1.809
06/29/2021 11:17:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7461311756510557, 'precision': 0.7492569693025274, 'recall': 0.7434731934731935}
06/29/2021 11:17:12 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:17:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:22 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.616 | val_loss: 1.799
06/29/2021 11:17:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7491108705736818, 'precision': 0.7635743979191343, 'recall': 0.7405011655011655}
06/29/2021 11:17:22 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:17:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:32 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 0.573 | val_loss: 1.860
06/29/2021 11:17:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7271405919661734, 'precision': 0.7912637008381689, 'recall': 0.7106060606060607}
06/29/2021 11:17:32 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:17:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:42 - INFO - __main__ -   Epoch: 0027 | Time: 0m_10s | train_loss: 0.575 | val_loss: 1.891
06/29/2021 11:17:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7302430649679226, 'precision': 0.7260456657910689, 'recall': 0.7370629370629371}
06/29/2021 11:17:42 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:17:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:52 - INFO - __main__ -   Epoch: 0028 | Time: 0m_9s | train_loss: 0.537 | val_loss: 2.219
06/29/2021 11:17:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7765793528505393, 'f1': 0.7515477934867266, 'precision': 0.7507473841554559, 'recall': 0.7523892773892773}
06/29/2021 11:17:52 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:18:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:02 - INFO - __main__ -   Epoch: 0029 | Time: 0m_9s | train_loss: 0.529 | val_loss: 1.931
06/29/2021 11:18:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.7521899285746372, 'precision': 0.7749001814882033, 'recall': 0.7407342657342657}
06/29/2021 11:18:02 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:18:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:12 - INFO - __main__ -   Epoch: 0030 | Time: 0m_9s | train_loss: 0.488 | val_loss: 1.932
06/29/2021 11:18:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7441236452545261, 'precision': 0.7716724227892762, 'recall': 0.7317016317016316}
06/29/2021 11:18:12 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 11:18:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:22 - INFO - __main__ -   Epoch: 0031 | Time: 0m_9s | train_loss: 0.474 | val_loss: 2.102
06/29/2021 11:18:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7781201848998459, 'f1': 0.7490170802449243, 'precision': 0.752910779696494, 'recall': 0.7458041958041959}
06/29/2021 11:18:22 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 11:18:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:32 - INFO - __main__ -   Epoch: 0032 | Time: 0m_9s | train_loss: 0.459 | val_loss: 2.102
06/29/2021 11:18:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.7522140196772085, 'precision': 0.7543664125425336, 'recall': 0.7502913752913754}
06/29/2021 11:18:32 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 11:18:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:42 - INFO - __main__ -   Epoch: 0033 | Time: 0m_9s | train_loss: 0.448 | val_loss: 2.357
06/29/2021 11:18:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6733436055469953, 'f1': 0.6704321165085754, 'precision': 0.6984952808293363, 'recall': 0.7174825174825175}
06/29/2021 11:18:42 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 11:18:42 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 11:18:42 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
06/29/2021 11:18:42 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_E_multitask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
06/29/2021 11:18:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:46 - INFO - __main__ -   best_val_loss: 1.892
06/29/2021 11:18:46 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.810477657935285, 'f1': 0.7755556492767071, 'precision': 0.80088769611891, 'recall': 0.7625291375291375}
