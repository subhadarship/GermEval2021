06/29/2021 12:55:56 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 12:55:56 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_A
	dev_data_dir: ../data/cross_validation/fold_A
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_A_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_A_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 12:55:58 - INFO - __main__ -   device: cuda
06/29/2021 12:55:58 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 12:55:58 - WARNING - data_utils.bert_data -   trimming sentence 38 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:55:58 - WARNING - data_utils.bert_data -   trimming sentence 252 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:55:58 - WARNING - data_utils.bert_data -   trimming sentence 332 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:55:59 - WARNING - data_utils.bert_data -   trimming sentence 1735 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:55:59 - WARNING - data_utils.bert_data -   trimming sentence 2479 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:55:59 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   train OOV: 505 (0.39%) out of 130793 running tokens are OOV
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   val OOV: 112 (0.34%) out of 32806 running tokens are OOV
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   look at some train samples üëÄ
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: Es sollte doch hei√üen Sie wissen doch. Wissen ist Macht. Nichts wissen macht nix.Nun den quasseln kann Jeder. Handeln ist angesagt., text ids: [101, 10912, 17799, 21131, 10261, 10116, 20284, 11583, 16512, 10917, 21131, 119, 77783, 10298, 42601, 119, 52397, 10107, 16512, 10917, 26433, 10414, 10686, 119, 34289, 10140, 14517, 49235, 10115, 12382, 105818, 119, 41077, 10115, 10298, 110576, 50804, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Das ist doch wieder eine l√§cherliches Gequatsche,wo nix bei rauskommt., text ids: [101, 10672, 10298, 21131, 12426, 10359, 180, 105623, 37179, 144, 10112, 32973, 41290, 10112, 117, 12796, 10414, 10686, 10492, 11859, 106239, 45011, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Der Hank geht mir derma√üen auf die Eier., text ids: [101, 10445, 42342, 21952, 36077, 10118, 10369, 20284, 10329, 10128, 35278, 10165, 119, 102], original labels: 1 0 0, label ids: [[1], [0], [0]]
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: Verfassungsschonendere Variante? Seit wann hat unsere Verfassung G√ºltigkeit f√ºr Tote? Wir haben noch nicht mal Tierrecht in unserer Verfassung von rechten f√ºr Tote ganz zu Schweigen. Die Verfassung wird durch Spahn seinen Vorschlag ja nicht mal anger√ºhrt., text ids: [101, 61585, 13420, 56238, 27323, 10112, 57674, 136, 14050, 11471, 13538, 11250, 15826, 12122, 61585, 144, 23389, 25425, 10307, 22768, 10112, 136, 51732, 13289, 11230, 10726, 15189, 66655, 20913, 10106, 15826, 22981, 61585, 10166, 35320, 10307, 22768, 10112, 22762, 10304, 55260, 10237, 61512, 11280, 119, 10236, 61585, 10790, 10714, 64766, 15797, 12724, 28099, 51429, 10201, 10726, 15189, 46464, 12369, 30525, 119, 102], original labels: 0 1 1, label ids: [[0], [1], [1]]
06/29/2021 12:56:00 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: @USER ......sag doch bitte einfach genau, WEN und WAS du ansprichst!, text ids: [101, 137, 10808, 24093, 119, 119, 119, 119, 119, 119, 10148, 10240, 21131, 17684, 10216, 54068, 46871, 117, 160, 50655, 10130, 160, 38025, 10168, 11744, 101319, 42008, 10123, 106, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:56:02 - INFO - data_utils.preprocess_bert -   there are nearly 141 batches in an epoch
06/29/2021 12:56:05 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
    (1): Linear(in_features=512, out_features=2, bias=True)
    (2): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 12:56:05 - INFO - __main__ -   the model has 396,806 trainable parameters
06/29/2021 12:56:05 - INFO - __main__ -   üåã  starting training..
06/29/2021 12:56:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:56:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:56:17 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.872 | val_loss: 2.251
06/29/2021 12:56:17 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.6425269645608629, 'f1': 0.6421522958456127, 'precision': 0.6957225820862185, 'recall': 0.7038049224003045}
06/29/2021 12:56:17 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:56:17 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:56:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:56:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:56:29 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.722 | val_loss: 2.060
06/29/2021 12:56:29 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.6363636363636364, 'f1': 0.6359063593488514, 'precision': 0.6874620522161505, 'recall': 0.695849367784497}
06/29/2021 12:56:29 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:56:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:56:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:56:41 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.692 | val_loss: 1.856
06/29/2021 12:56:41 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7195685670261941, 'f1': 0.7131610133271166, 'precision': 0.7228524197685686, 'recall': 0.7479912885355436}
06/29/2021 12:56:41 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:56:49 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:57:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:57:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:57:00 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.643 | val_loss: 1.716
06/29/2021 12:57:00 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7550077041602465, 'f1': 0.7415683062983194, 'precision': 0.7376064653503678, 'recall': 0.7595413794561678}
06/29/2021 12:57:00 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:57:08 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:57:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:57:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:57:19 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.622 | val_loss: 1.579
06/29/2021 12:57:19 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.773497688751926, 'f1': 0.7481208665003367, 'precision': 0.7478532396565183, 'recall': 0.7483930308284349}
06/29/2021 12:57:19 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:57:27 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:57:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:57:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:57:38 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.572 | val_loss: 2.025
06/29/2021 12:57:38 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.6363636363636364, 'f1': 0.6363627730294397, 'precision': 0.7094405594405595, 'recall': 0.7089799974626803}
06/29/2021 12:57:38 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:57:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:57:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:57:49 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.577 | val_loss: 1.621
06/29/2021 12:57:49 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7503852080123267, 'f1': 0.7352861200072511, 'precision': 0.7308910061569636, 'recall': 0.7505656108597285}
06/29/2021 12:57:49 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:58:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:58:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:58:01 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.582 | val_loss: 1.564
06/29/2021 12:58:01 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7765793528505393, 'f1': 0.743194749553139, 'precision': 0.7534326498244024, 'recall': 0.7365046306085339}
06/29/2021 12:58:01 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:58:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:58:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:58:13 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.544 | val_loss: 1.532
06/29/2021 12:58:13 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7750385208012327, 'f1': 0.7308369693664212, 'precision': 0.759297520661157, 'recall': 0.7189231192117393}
06/29/2021 12:58:13 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:58:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:58:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:58:25 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.535 | val_loss: 1.563
06/29/2021 12:58:25 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7565485362095532, 'f1': 0.7401579192766932, 'precision': 0.7352152122641509, 'recall': 0.753050069776293}
06/29/2021 12:58:25 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:58:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:58:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:58:36 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.552 | val_loss: 1.624
06/29/2021 12:58:36 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7534668721109399, 'f1': 0.7393574297188754, 'precision': 0.7351616785062691, 'recall': 0.7561847168774052}
06/29/2021 12:58:36 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:58:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:58:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:58:48 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.502 | val_loss: 1.670
06/29/2021 12:58:48 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7303543913713405, 'f1': 0.7211357380848906, 'precision': 0.7236749452849938, 'recall': 0.7485093246500614}
06/29/2021 12:58:48 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:59:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:59:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:59:00 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.522 | val_loss: 1.519
06/29/2021 12:59:00 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7719568567026194, 'f1': 0.7246531361082444, 'precision': 0.7576370170709793, 'recall': 0.712209794054214}
06/29/2021 12:59:00 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:59:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:59:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:59:12 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.478 | val_loss: 1.647
06/29/2021 12:59:12 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7611710323574731, 'f1': 0.7412686695764672, 'precision': 0.7367317593113989, 'recall': 0.7488952086945491}
06/29/2021 12:59:12 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 12:59:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:59:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:59:23 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.503 | val_loss: 1.538
06/29/2021 12:59:23 - INFO - __main__ -   üî• val metrics üî• {'acc': 0.7580893682588598, 'f1': 0.7436557354365574, 'precision': 0.7390608272506083, 'recall': 0.7596893897746013}
06/29/2021 12:59:23 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 12:59:23 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 12:59:23 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_A_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen
06/29/2021 12:59:24 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_A_multitask/bert-base-multilingual-cased/trg_fc512_lr0.0005_frozen
06/29/2021 12:59:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:59:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:59:28 - INFO - __main__ -   best_val_loss: 1.579
06/29/2021 12:59:28 - INFO - __main__ -   üî• best validation metrics üî• {'acc': 0.773497688751926, 'f1': 0.7481208665003367, 'precision': 0.7478532396565183, 'recall': 0.7483930308284349}
