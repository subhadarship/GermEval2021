06/29/2021 08:40:01 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 08:40:01 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 08:40:01 - INFO - __main__ -   device: cuda
06/29/2021 08:40:01 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 08:40:02 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:40:02 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:40:03 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:40:03 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:40:04 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   train OOV: 556 (0.47%) out of 117527 running tokens are OOV
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   val OOV: 135 (0.47%) out of 28601 running tokens are OOV
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:40:04 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:40:06 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 08:40:08 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 08:40:08 - INFO - __main__ -   the model has 98,690 trainable parameters
06/29/2021 08:40:08 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 08:40:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:18 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.537 | val_loss: 0.691
06/29/2021 08:40:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6563944530046225, 'f1': 0.6538169901809527, 'precision': 0.683673964520011, 'recall': 0.7000940922738614}
06/29/2021 08:40:18 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:40:18 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:40:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:28 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.494 | val_loss: 0.517
06/29/2021 08:40:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7473035439137135, 'f1': 0.7192965799523177, 'precision': 0.7188309227562686, 'recall': 0.7197794646255339}
06/29/2021 08:40:28 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:40:31 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:40:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:40 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.478 | val_loss: 0.600
06/29/2021 08:40:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6841294298921418, 'f1': 0.6776518703193559, 'precision': 0.6900197778792028, 'recall': 0.7112741573984014}
06/29/2021 08:40:40 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:40:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:40:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:40:50 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.473 | val_loss: 0.468
06/29/2021 08:40:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7311598373075117, 'precision': 0.7487206823027719, 'recall': 0.7219837611536347}
06/29/2021 08:40:50 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:40:53 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:41:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:03 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.438 | val_loss: 0.561
06/29/2021 08:41:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6810477657935285, 'f1': 0.6739128851778584, 'precision': 0.6848323894948881, 'recall': 0.7056550513807248}
06/29/2021 08:41:03 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:41:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:13 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.453 | val_loss: 0.451
06/29/2021 08:41:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7919876733436055, 'f1': 0.757745427398283, 'precision': 0.7743747078073866, 'recall': 0.7481868735991881}
06/29/2021 08:41:13 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:41:16 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:41:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:26 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.401 | val_loss: 0.470
06/29/2021 08:41:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.743567373197101, 'precision': 0.7444017539751804, 'recall': 0.7427739248107582}
06/29/2021 08:41:26 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:41:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:35 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.402 | val_loss: 0.474
06/29/2021 08:41:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.752153882405198, 'precision': 0.7597995545657015, 'recall': 0.7466486235040386}
06/29/2021 08:41:35 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:41:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:45 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.399 | val_loss: 0.489
06/29/2021 08:41:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7266308481592256, 'precision': 0.8008437281859844, 'recall': 0.7095931830676196}
06/29/2021 08:41:45 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:41:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:55 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.386 | val_loss: 0.477
06/29/2021 08:41:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7919876733436055, 'f1': 0.759035316184499, 'precision': 0.7732554114552084, 'recall': 0.7503753118788853}
06/29/2021 08:41:55 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:42:04 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:42:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:14 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.373 | val_loss: 0.488
06/29/2021 08:42:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.765793528505393, 'f1': 0.7414884696016771, 'precision': 0.7396132252027449, 'recall': 0.7436461284729564}
06/29/2021 08:42:14 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:42:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:24 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.377 | val_loss: 0.474
06/29/2021 08:42:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.7485184172137126, 'precision': 0.7805738594763816, 'recall': 0.7349822387617879}
06/29/2021 08:42:24 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:42:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:33 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.325 | val_loss: 0.497
06/29/2021 08:42:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7314645305518594, 'precision': 0.7915735007453274, 'recall': 0.7150642787668626}
06/29/2021 08:42:33 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:42:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:43 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.316 | val_loss: 0.490
06/29/2021 08:42:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7492014921253322, 'precision': 0.7479340571978493, 'recall': 0.7505814691081321}
06/29/2021 08:42:43 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 08:42:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:53 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.305 | val_loss: 0.498
06/29/2021 08:42:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7765793528505393, 'f1': 0.7438462396938295, 'precision': 0.7531197909627427, 'recall': 0.7375988497483825}
06/29/2021 08:42:53 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 08:43:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:02 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.290 | val_loss: 0.537
06/29/2021 08:43:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.7389883312563725, 'precision': 0.7666037220165478, 'recall': 0.7268786738275468}
06/29/2021 08:43:02 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 08:43:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:12 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.270 | val_loss: 0.550
06/29/2021 08:43:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7966101694915254, 'f1': 0.7445430473055178, 'precision': 0.8087836864101455, 'recall': 0.7265245062798664}
06/29/2021 08:43:12 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 08:43:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:22 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.291 | val_loss: 0.717
06/29/2021 08:43:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6949152542372882, 'f1': 0.687944399114116, 'precision': 0.6981892112713524, 'recall': 0.7205459466317081}
06/29/2021 08:43:22 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 08:43:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:31 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.265 | val_loss: 0.513
06/29/2021 08:43:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.7467368909386128, 'precision': 0.7571088705109323, 'recall': 0.7399352983465133}
06/29/2021 08:43:31 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 08:43:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:41 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.249 | val_loss: 0.514
06/29/2021 08:43:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7497304571603955, 'precision': 0.7480049589532025, 'recall': 0.7516756882479807}
06/29/2021 08:43:41 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 08:43:41 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 08:43:41 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:43:41 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:43:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:45 - INFO - __main__ -   best_val_loss: 0.477
06/29/2021 08:43:45 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7919876733436055, 'f1': 0.759035316184499, 'precision': 0.7732554114552084, 'recall': 0.7503753118788853}
