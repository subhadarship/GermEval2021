06/29/2021 09:53:04 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 09:53:04 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 09:53:05 - INFO - __main__ -   device: cuda
06/29/2021 09:53:05 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 09:53:05 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:53:05 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:53:06 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:53:07 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:53:07 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   train OOV: 556 (0.47%) out of 117527 running tokens are OOV
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   val OOV: 135 (0.47%) out of 28601 running tokens are OOV
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:53:07 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:53:09 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 09:53:11 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 09:53:11 - INFO - __main__ -   the model has 394,754 trainable parameters
06/29/2021 09:53:11 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 09:53:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:53:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:53:21 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.549 | val_loss: 0.754
06/29/2021 09:53:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6255778120184899, 'f1': 0.6247760533522404, 'precision': 0.6704438527297844, 'recall': 0.6800122637120988}
06/29/2021 09:53:21 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:53:21 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:53:31 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:53:31 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:53:31 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.497 | val_loss: 0.526
06/29/2021 09:53:31 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7473035439137135, 'f1': 0.7167989952957704, 'precision': 0.7183528024863359, 'recall': 0.7154025880661394}
06/29/2021 09:53:31 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:53:35 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:53:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:53:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:53:44 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.476 | val_loss: 0.689
06/29/2021 09:53:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6656394453004623, 'f1': 0.6621454017680433, 'precision': 0.6865603403468921, 'recall': 0.7049149997885567}
06/29/2021 09:53:44 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:53:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:53:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:53:54 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.472 | val_loss: 0.463
06/29/2021 09:53:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.765793528505393, 'f1': 0.7311398918541776, 'precision': 0.7404439173161641, 'recall': 0.7250444030955301}
06/29/2021 09:53:54 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:53:57 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:54:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:54:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:54:06 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.424 | val_loss: 0.580
06/29/2021 09:54:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.662557781201849, 'f1': 0.6546840720413414, 'precision': 0.6653082549634274, 'recall': 0.6839768258129995}
06/29/2021 09:54:06 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:54:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:54:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:54:16 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.432 | val_loss: 0.452
06/29/2021 09:54:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.8043143297380585, 'f1': 0.7595602113179367, 'precision': 0.808983384582187, 'recall': 0.742213600033831}
06/29/2021 09:54:16 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:54:24 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:54:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:54:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:54:34 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.373 | val_loss: 0.475
06/29/2021 09:54:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7461311756510556, 'precision': 0.7499401913875599, 'recall': 0.7429959402884088}
06/29/2021 09:54:34 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:54:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:54:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:54:43 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.369 | val_loss: 0.476
06/29/2021 09:54:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7966101694915254, 'f1': 0.7634473922551857, 'precision': 0.77975302889096, 'recall': 0.7538799847760815}
06/29/2021 09:54:43 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:54:47 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:54:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:54:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:54:56 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.356 | val_loss: 0.501
06/29/2021 09:54:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7246996814050668, 'precision': 0.792092781977175, 'recall': 0.7083509536093373}
06/29/2021 09:54:56 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:55:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:55:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:55:06 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.327 | val_loss: 0.507
06/29/2021 09:55:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7441658782718386, 'precision': 0.7690486676943404, 'recall': 0.7324977798452235}
06/29/2021 09:55:06 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:55:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:55:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:55:16 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.317 | val_loss: 0.598
06/29/2021 09:55:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7195685670261941, 'f1': 0.7076576576576576, 'precision': 0.7075441919191919, 'recall': 0.7293895631581173}
06/29/2021 09:55:16 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:55:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:55:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:55:25 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.321 | val_loss: 0.522
06/29/2021 09:55:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7448878034909298, 'precision': 0.7646950070373817, 'recall': 0.7346122129657039}
06/29/2021 09:55:25 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:55:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:55:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:55:35 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.262 | val_loss: 0.551
06/29/2021 09:55:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7873651771956857, 'f1': 0.7383064516129032, 'precision': 0.7855787733420061, 'recall': 0.7227978179050196}
06/29/2021 09:55:35 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:55:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:55:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:55:45 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.244 | val_loss: 0.515
06/29/2021 09:55:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7473064942823007, 'precision': 0.7497254167205065, 'recall': 0.7451843785681058}
06/29/2021 09:55:45 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:55:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:55:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:55:54 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.232 | val_loss: 0.528
06/29/2021 09:55:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.7492549814251941, 'precision': 0.755930626619709, 'recall': 0.7443121749059077}
06/29/2021 09:55:54 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:56:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:56:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:56:04 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.207 | val_loss: 0.541
06/29/2021 09:56:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7393679671181188, 'precision': 0.744976867151355, 'recall': 0.7351143908318181}
06/29/2021 09:56:04 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:56:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:56:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:56:14 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.184 | val_loss: 0.611
06/29/2021 09:56:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7950693374422187, 'f1': 0.7403195576374035, 'precision': 0.8113309619089966, 'recall': 0.7220736245612551}
06/29/2021 09:56:14 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:56:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:56:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:56:23 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.188 | val_loss: 0.733
06/29/2021 09:56:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7010785824345146, 'f1': 0.6899416852183851, 'precision': 0.6921892870758674, 'recall': 0.713182433289635}
06/29/2021 09:56:23 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:56:23 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:56:23 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 09:56:24 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc512_lr0.0005_frozen
06/29/2021 09:56:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:56:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:56:27 - INFO - __main__ -   best_val_loss: 0.476
06/29/2021 09:56:27 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7966101694915254, 'f1': 0.7634473922551857, 'precision': 0.77975302889096, 'recall': 0.7538799847760815}
