06/29/2021 08:58:47 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 08:58:47 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 08:58:48 - INFO - __main__ -   device: cuda
06/29/2021 08:58:48 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 08:58:48 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:58:49 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:58:49 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:58:50 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:58:50 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   train OOV: 556 (0.47%) out of 117527 running tokens are OOV
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   val OOV: 135 (0.47%) out of 28601 running tokens are OOV
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:58:50 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:58:52 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 08:58:54 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 08:58:54 - INFO - __main__ -   the model has 98,690 trainable parameters
06/29/2021 08:58:54 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 08:59:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:59:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:59:04 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.591 | val_loss: 0.980
06/29/2021 08:59:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5423728813559322, 'f1': 0.5389401169674573, 'precision': 0.659228650137741, 'recall': 0.6344356578001438}
06/29/2021 08:59:04 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:59:04 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:59:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:59:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:59:14 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.528 | val_loss: 0.589
06/29/2021 08:59:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7457627118644068, 'f1': 0.7219300910670188, 'precision': 0.7187991985115214, 'recall': 0.7262707743054087}
06/29/2021 08:59:14 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:59:18 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:59:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:59:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:59:28 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.488 | val_loss: 0.602
06/29/2021 08:59:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6825885978428351, 'f1': 0.6762229971907391, 'precision': 0.6890122118237845, 'recall': 0.710105933099336}
06/29/2021 08:59:28 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:59:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:59:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:59:37 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.495 | val_loss: 0.486
06/29/2021 08:59:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.73039686508598, 'precision': 0.7306526806526807, 'recall': 0.7301454729986891}
06/29/2021 08:59:37 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:59:46 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:59:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:59:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:59:56 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.445 | val_loss: 0.623
06/29/2021 08:59:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6302003081664098, 'f1': 0.6289944549248272, 'precision': 0.670022205039751, 'recall': 0.6813284983295979}
06/29/2021 08:59:56 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:00:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:00:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:00:05 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.466 | val_loss: 0.470
06/29/2021 09:00:05 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7765793528505393, 'f1': 0.7263729330041842, 'precision': 0.7684502338009351, 'recall': 0.7124318095318645}
06/29/2021 09:00:05 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:00:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:00:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:00:15 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.416 | val_loss: 0.523
06/29/2021 09:00:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7334360554699538, 'f1': 0.7161862583764955, 'precision': 0.7120989540486544, 'recall': 0.72896139045122}
06/29/2021 09:00:15 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:00:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:00:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:00:25 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.419 | val_loss: 0.497
06/29/2021 09:00:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7339160089166198, 'precision': 0.7419315102241932, 'recall': 0.7284010656742927}
06/29/2021 09:00:25 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:00:28 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:00:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:00:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:00:38 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.417 | val_loss: 0.478
06/29/2021 09:00:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.7265597147950089, 'precision': 0.77785648804067, 'recall': 0.7114856007104495}
06/29/2021 09:00:38 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:00:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:00:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:00:48 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.431 | val_loss: 0.533
06/29/2021 09:00:48 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7255465809616441, 'precision': 0.7255465809616441, 'recall': 0.7255465809616441}
06/29/2021 09:00:48 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:00:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:00:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:00:57 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.399 | val_loss: 0.594
06/29/2021 09:00:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7257318952234206, 'f1': 0.7095919475504786, 'precision': 0.7062032085561497, 'recall': 0.7242144880957415}
06/29/2021 09:00:57 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:01:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:01:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:01:07 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.409 | val_loss: 0.485
06/29/2021 09:01:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7469785575048733, 'precision': 0.7629967274427303, 'recall': 0.7378948703852497}
06/29/2021 09:01:07 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:01:10 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:01:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:01:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:01:20 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.366 | val_loss: 0.508
06/29/2021 09:01:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7378400855411666, 'precision': 0.7375836023377007, 'recall': 0.7381010276144966}
06/29/2021 09:01:20 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:01:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:01:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:01:29 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.353 | val_loss: 0.529
06/29/2021 09:01:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7457627118644068, 'f1': 0.7235410293149518, 'precision': 0.7197227281926736, 'recall': 0.7295534317249546}
06/29/2021 09:01:29 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:01:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:01:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:01:39 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.367 | val_loss: 0.609
06/29/2021 09:01:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7765793528505393, 'f1': 0.7451227868705936, 'precision': 0.7525723830734966, 'recall': 0.7397872880280797}
06/29/2021 09:01:39 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:01:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:01:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:01:49 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.345 | val_loss: 0.504
06/29/2021 09:01:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.7297274786780384, 'precision': 0.746570571846815, 'recall': 0.7208155368545692}
06/29/2021 09:01:49 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:01:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:01:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:01:58 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.328 | val_loss: 0.557
06/29/2021 09:01:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7550077041602465, 'f1': 0.7037303941131378, 'precision': 0.7350666426048622, 'recall': 0.6927940119254028}
06/29/2021 09:01:58 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:02:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:02:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:02:08 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.341 | val_loss: 0.543
06/29/2021 09:02:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7349768875192604, 'f1': 0.7141964688050471, 'precision': 0.7100351339481774, 'recall': 0.7224700807713452}
06/29/2021 09:02:08 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:02:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:02:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:02:18 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.324 | val_loss: 0.525
06/29/2021 09:02:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.736517719568567, 'f1': 0.7129395636373043, 'precision': 0.7095153004243913, 'recall': 0.7181672093711675}
06/29/2021 09:02:18 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:02:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:02:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:02:27 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.310 | val_loss: 0.628
06/29/2021 09:02:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7503852080123267, 'f1': 0.7155911186132572, 'precision': 0.7218205845771144, 'recall': 0.7111737218251787}
06/29/2021 09:02:27 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:02:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:02:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:02:37 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.319 | val_loss: 0.636
06/29/2021 09:02:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.724223163841808, 'precision': 0.787062132074372, 'recall': 0.7082769484501206}
06/29/2021 09:02:37 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:02:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:02:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:02:47 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.310 | val_loss: 0.585
06/29/2021 09:02:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.750086777307734, 'precision': 0.7581351200446678, 'recall': 0.7443861800651246}
06/29/2021 09:02:47 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:02:50 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:03:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:03:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:03:00 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.283 | val_loss: 0.625
06/29/2021 09:03:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7442218798151001, 'f1': 0.712027414250278, 'precision': 0.714709255772685, 'recall': 0.7097834820484628}
06/29/2021 09:03:00 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:03:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:03:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:03:09 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.301 | val_loss: 0.592
06/29/2021 09:03:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7442218798151001, 'f1': 0.718262934371012, 'precision': 0.716222374117111, 'recall': 0.7207256734469489}
06/29/2021 09:03:09 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:03:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:03:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:03:19 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.282 | val_loss: 0.568
06/29/2021 09:03:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.7148790512768681, 'precision': 0.719954835866931, 'recall': 0.7110997166659618}
06/29/2021 09:03:19 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:03:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:03:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:03:29 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 0.282 | val_loss: 0.572
06/29/2021 09:03:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7332412271513467, 'precision': 0.7340407416079524, 'recall': 0.7324819215968199}
06/29/2021 09:03:29 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:03:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:03:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:03:38 - INFO - __main__ -   Epoch: 0027 | Time: 0m_9s | train_loss: 0.271 | val_loss: 0.600
06/29/2021 09:03:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.7498632167643691, 'precision': 0.7557005948446794, 'recall': 0.7454063940457563}
06/29/2021 09:03:38 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:03:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:03:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:03:48 - INFO - __main__ -   Epoch: 0028 | Time: 0m_9s | train_loss: 0.267 | val_loss: 0.649
06/29/2021 09:03:48 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7149460708782742, 'f1': 0.6906155221772998, 'precision': 0.6873297827271077, 'recall': 0.6963409734850086}
06/29/2021 09:03:48 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:03:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:03:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:03:58 - INFO - __main__ -   Epoch: 0029 | Time: 0m_9s | train_loss: 0.272 | val_loss: 0.613
06/29/2021 09:03:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7347684300953302, 'precision': 0.7525645581615731, 'recall': 0.7254144288916141}
06/29/2021 09:03:58 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:04:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:04:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:04:07 - INFO - __main__ -   Epoch: 0030 | Time: 0m_9s | train_loss: 0.253 | val_loss: 0.778
06/29/2021 09:04:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7434458976407754, 'precision': 0.7659951603145796, 'recall': 0.7324237746860067}
06/29/2021 09:04:07 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:04:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:04:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:04:17 - INFO - __main__ -   Epoch: 0031 | Time: 0m_9s | train_loss: 0.277 | val_loss: 0.719
06/29/2021 09:04:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.7242834485102527, 'precision': 0.7504782965189951, 'recall': 0.713156002875629}
06/29/2021 09:04:17 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:04:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:04:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:04:27 - INFO - __main__ -   Epoch: 0032 | Time: 0m_9s | train_loss: 0.250 | val_loss: 0.700
06/29/2021 09:04:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7302430649679226, 'precision': 0.7262902246508804, 'recall': 0.7364147672009134}
06/29/2021 09:04:27 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:04:27 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:04:27 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.005_frozen
06/29/2021 09:04:27 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-german-cased/trg_fc128_lr0.005_frozen
06/29/2021 09:04:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:04:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:04:30 - INFO - __main__ -   best_val_loss: 0.585
06/29/2021 09:04:30 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.750086777307734, 'precision': 0.7581351200446678, 'recall': 0.7443861800651246}
