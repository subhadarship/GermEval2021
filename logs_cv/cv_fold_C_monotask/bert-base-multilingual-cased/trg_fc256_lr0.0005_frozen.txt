06/29/2021 09:32:05 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 09:32:05 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 09:32:06 - INFO - __main__ -   device: cuda
06/29/2021 09:32:06 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 09:32:06 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:32:06 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:32:07 - WARNING - data_utils.bert_data -   trimming sentence 1807 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:32:07 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:32:08 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:32:08 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   train OOV: 487 (0.37%) out of 131667 running tokens are OOV
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   val OOV: 130 (0.41%) out of 31932 running tokens are OOV
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 1, label ids: [[1]]
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1, label ids: [[1]]
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 09:32:08 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0, label ids: [[0]]
06/29/2021 09:32:10 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 09:32:13 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 09:32:13 - INFO - __main__ -   the model has 197,378 trainable parameters
06/29/2021 09:32:13 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 09:32:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:32:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:32:25 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 0.613 | val_loss: 0.869
06/29/2021 09:32:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.44992295839753466, 'f1': 0.42542870959342327, 'precision': 0.6435247678651778, 'recall': 0.574190172114856}
06/29/2021 09:32:25 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:32:26 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:32:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:32:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:32:37 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 0.582 | val_loss: 0.788
06/29/2021 09:32:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5377503852080123, 'f1': 0.5333531464508954, 'precision': 0.6623076129830623, 'recall': 0.6331194231826447}
06/29/2021 09:32:37 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:32:44 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:32:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:32:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:32:56 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 0.547 | val_loss: 0.846
06/29/2021 09:32:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5100154083204931, 'f1': 0.5006242740998839, 'precision': 0.661428110896196, 'recall': 0.6164682623588615}
06/29/2021 09:32:56 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:33:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:07 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 0.569 | val_loss: 0.596
06/29/2021 09:33:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.687211093990755, 'f1': 0.6818819495587294, 'precision': 0.697507624857034, 'recall': 0.7190817016957753}
06/29/2021 09:33:07 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:33:13 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:33:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:25 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 0.543 | val_loss: 0.536
06/29/2021 09:33:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.724191063174114, 'f1': 0.711130230233466, 'precision': 0.709605225242532, 'recall': 0.7307057977756164}
06/29/2021 09:33:25 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:33:31 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:33:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:42 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 0.530 | val_loss: 0.493
06/29/2021 09:33:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.7130676435293375, 'precision': 0.7121907756813417, 'recall': 0.7140123482894236}
06/29/2021 09:33:42 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:33:48 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:33:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:33:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:33:59 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 0.511 | val_loss: 0.580
06/29/2021 09:33:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7149460708782742, 'f1': 0.708013842378788, 'precision': 0.7166913608388421, 'recall': 0.7412039582188015}
06/29/2021 09:33:59 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:34:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:11 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 0.527 | val_loss: 0.488
06/29/2021 09:34:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7365030369679255, 'precision': 0.741271998071402, 'recall': 0.7327779422336871}
06/29/2021 09:34:11 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:34:17 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:34:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:29 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 0.515 | val_loss: 0.503
06/29/2021 09:34:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7426810477657936, 'f1': 0.7174325081798392, 'precision': 0.7149212233549583, 'recall': 0.7206516682877321}
06/29/2021 09:34:29 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:34:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:40 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 0.494 | val_loss: 0.518
06/29/2021 09:34:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7349768875192604, 'f1': 0.7131565422962277, 'precision': 0.7091967871485944, 'recall': 0.720281642491648}
06/29/2021 09:34:40 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:34:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:34:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:34:52 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 0.503 | val_loss: 0.551
06/29/2021 09:34:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7303543913713405, 'f1': 0.7129051746583048, 'precision': 0.7089209464488581, 'recall': 0.7255307227132406}
06/29/2021 09:34:52 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:35:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:03 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 0.503 | val_loss: 0.523
06/29/2021 09:35:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.7236385960787388, 'precision': 0.7213729016786571, 'recall': 0.7264187846238424}
06/29/2021 09:35:03 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:35:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:15 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 0.511 | val_loss: 0.490
06/29/2021 09:35:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7627118644067796, 'f1': 0.7309460739975018, 'precision': 0.73598659635245, 'recall': 0.7270848310567937}
06/29/2021 09:35:15 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:35:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:26 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 0.504 | val_loss: 0.486
06/29/2021 09:35:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.720437827210674, 'precision': 0.7343895619757689, 'recall': 0.7127119719203281}
06/29/2021 09:35:26 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:35:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:38 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 0.515 | val_loss: 0.641
06/29/2021 09:35:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6702619414483821, 'f1': 0.6675141242937854, 'precision': 0.6958139759969029, 'recall': 0.713890768384996}
06/29/2021 09:35:38 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:35:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:35:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:35:49 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 0.486 | val_loss: 0.508
06/29/2021 09:35:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.7289772486996237, 'precision': 0.7289772486996237, 'recall': 0.7289772486996237}
06/29/2021 09:35:49 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:36:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:01 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 0.473 | val_loss: 0.527
06/29/2021 09:36:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7302430649679226, 'precision': 0.7262902246508804, 'recall': 0.7364147672009134}
06/29/2021 09:36:01 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:36:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:12 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 0.472 | val_loss: 0.516
06/29/2021 09:36:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7317203647416414, 'precision': 0.7379615478326356, 'recall': 0.7271588362160105}
06/29/2021 09:36:12 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:36:12 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:36:12 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:36:13 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:36:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:36:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:36:17 - INFO - __main__ -   best_val_loss: 0.488
06/29/2021 09:36:17 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7365030369679255, 'precision': 0.741271998071402, 'recall': 0.7327779422336871}
