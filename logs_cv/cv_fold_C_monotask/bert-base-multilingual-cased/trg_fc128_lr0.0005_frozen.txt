06/29/2021 08:41:18 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 08:41:18 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 08:41:19 - INFO - __main__ -   device: cuda
06/29/2021 08:41:19 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 08:41:19 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:41:20 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:41:20 - WARNING - data_utils.bert_data -   trimming sentence 1807 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:41:20 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:41:21 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:41:21 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:41:21 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 08:41:21 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 08:41:21 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 08:41:21 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 08:41:21 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 08:41:21 - INFO - data_utils.preprocess_bert -   train OOV: 487 (0.37%) out of 131667 running tokens are OOV
06/29/2021 08:41:22 - INFO - data_utils.preprocess_bert -   val OOV: 130 (0.41%) out of 31932 running tokens are OOV
06/29/2021 08:41:22 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 08:41:22 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 1, label ids: [[1]]
06/29/2021 08:41:22 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1, label ids: [[1]]
06/29/2021 08:41:22 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 08:41:22 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0, label ids: [[0]]
06/29/2021 08:41:22 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0, label ids: [[0]]
06/29/2021 08:41:23 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 08:41:26 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 08:41:26 - INFO - __main__ -   the model has 98,690 trainable parameters
06/29/2021 08:41:26 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 08:41:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:38 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 0.616 | val_loss: 0.824
06/29/2021 08:41:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.4530046224961479, 'f1': 0.4294003868471954, 'precision': 0.6452347512038523, 'recall': 0.5765266207129869}
06/29/2021 08:41:38 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:41:39 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:41:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:41:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:41:50 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 0.581 | val_loss: 0.816
06/29/2021 08:41:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5208012326656395, 'f1': 0.5141385328278268, 'precision': 0.6570812807881774, 'recall': 0.6213631750327737}
06/29/2021 08:41:50 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:42:03 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:42:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:14 - INFO - __main__ -   Epoch: 0003 | Time: 0m_10s | train_loss: 0.553 | val_loss: 0.764
06/29/2021 08:42:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5362095531587057, 'f1': 0.5313629766459955, 'precision': 0.6643528797179052, 'recall': 0.633045418023428}
06/29/2021 08:42:14 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:42:21 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:42:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:32 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 0.566 | val_loss: 0.594
06/29/2021 08:42:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6902927580893683, 'f1': 0.6852684226145238, 'precision': 0.7017445964249605, 'recall': 0.7236065885736034}
06/29/2021 08:42:32 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:42:38 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:42:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:42:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:42:49 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 0.546 | val_loss: 0.534
06/29/2021 08:42:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7211093990755008, 'f1': 0.7083001204355546, 'precision': 0.7072157630175357, 'recall': 0.7283693491774855}
06/29/2021 08:42:49 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:42:58 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:43:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:09 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 0.533 | val_loss: 0.515
06/29/2021 08:43:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.719484785615491, 'precision': 0.7150876881147056, 'recall': 0.7302776250687191}
06/29/2021 08:43:09 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:43:15 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:43:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:27 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 0.511 | val_loss: 0.565
06/29/2021 08:43:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7180277349768875, 'f1': 0.7108863988782781, 'precision': 0.7187695872666148, 'recall': 0.7435404068169323}
06/29/2021 08:43:27 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:43:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:38 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 0.527 | val_loss: 0.491
06/29/2021 08:43:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.7306136784520744, 'precision': 0.7322634229986068, 'recall': 0.7291252590180572}
06/29/2021 08:43:38 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:43:47 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:43:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:43:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:43:58 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 0.517 | val_loss: 0.503
06/29/2021 08:43:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.736517719568567, 'f1': 0.7106644245434282, 'precision': 0.7082380805272371, 'recall': 0.7137903328117732}
06/29/2021 08:43:58 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:44:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:44:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:44:09 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 0.498 | val_loss: 0.518
06/29/2021 08:44:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.719827320382362, 'precision': 0.7157128514056225, 'recall': 0.7271429779676069}
06/29/2021 08:44:09 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:44:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:44:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:44:21 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 0.507 | val_loss: 0.588
06/29/2021 08:44:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7087827426810478, 'f1': 0.7001693958215698, 'precision': 0.7056708278705657, 'recall': 0.7288715270435996}
06/29/2021 08:44:21 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:44:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:44:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:44:32 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 0.504 | val_loss: 0.523
06/29/2021 08:44:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7426810477657936, 'f1': 0.7191109659796245, 'precision': 0.7157854523227385, 'recall': 0.7239343257072779}
06/29/2021 08:44:32 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 08:44:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:44:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:44:44 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 0.511 | val_loss: 0.490
06/29/2021 08:44:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7345761435686873, 'precision': 0.7417316258351894, 'recall': 0.7294952848141414}
06/29/2021 08:44:44 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:44:50 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:45:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:45:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:45:02 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 0.506 | val_loss: 0.482
06/29/2021 08:45:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7247780468119451, 'precision': 0.735281044857768, 'recall': 0.718257072778788}
06/29/2021 08:45:02 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:45:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:45:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:45:13 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 0.515 | val_loss: 0.640
06/29/2021 08:45:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6687211093990755, 'f1': 0.6650439174510354, 'precision': 0.6884227220299884, 'recall': 0.7072514483866875}
06/29/2021 08:45:13 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:45:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:45:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:45:25 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 0.487 | val_loss: 0.506
06/29/2021 08:45:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.7318181818181818, 'precision': 0.7323404481257301, 'recall': 0.7313136972977545}
06/29/2021 08:45:25 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:45:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:45:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:45:36 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 0.481 | val_loss: 0.563
06/29/2021 08:45:36 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.724191063174114, 'f1': 0.7103234863616075, 'precision': 0.7082008900190718, 'recall': 0.7285173594959191}
06/29/2021 08:45:36 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 08:45:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:45:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:45:48 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 0.479 | val_loss: 0.507
06/29/2021 08:45:48 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7169984047321765, 'precision': 0.723663697104677, 'recall': 0.7123419461242442}
06/29/2021 08:45:48 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 08:46:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:00 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 0.473 | val_loss: 0.493
06/29/2021 08:46:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.7182669044557808, 'precision': 0.7326554464703132, 'recall': 0.7104495284814141}
06/29/2021 08:46:00 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 08:46:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:11 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 0.487 | val_loss: 0.477
06/29/2021 08:46:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7203584014609996, 'precision': 0.7502218166146981, 'recall': 0.7087051211570179}
06/29/2021 08:46:11 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 08:46:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:23 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 0.464 | val_loss: 0.528
06/29/2021 08:46:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7503852080123267, 'f1': 0.7283087323244852, 'precision': 0.724492691925642, 'recall': 0.7341523237619993}
06/29/2021 08:46:23 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 08:46:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:34 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 0.454 | val_loss: 0.529
06/29/2021 08:46:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7064450994362275, 'precision': 0.7564973337075498, 'recall': 0.6932380428807037}
06/29/2021 08:46:34 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 08:46:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:46 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 0.478 | val_loss: 0.520
06/29/2021 08:46:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7426810477657936, 'f1': 0.7232423515833071, 'precision': 0.718764909351145, 'recall': 0.7326880788260667}
06/29/2021 08:46:46 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 08:46:46 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 08:46:46 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:46:46 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_monotask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:46:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:50 - INFO - __main__ -   best_val_loss: 0.490
06/29/2021 08:46:50 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7345761435686873, 'precision': 0.7417316258351894, 'recall': 0.7294952848141414}
