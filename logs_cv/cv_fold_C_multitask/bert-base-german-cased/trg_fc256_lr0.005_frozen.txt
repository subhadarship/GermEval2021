06/29/2021 11:26:53 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 11:26:53 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_multitask/bert-base-german-cased/trg_fc256_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-german-cased/trg_fc256_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 11:26:53 - INFO - __main__ -   device: cuda
06/29/2021 11:26:53 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 11:26:54 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:26:54 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:26:55 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:26:56 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:26:56 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   train OOV: 556 (0.47%) out of 117527 running tokens are OOV
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   val OOV: 135 (0.47%) out of 28601 running tokens are OOV
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:26:56 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:26:58 - INFO - data_utils.preprocess_bert -   there are nearly 127 batches in an epoch
06/29/2021 11:27:00 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
    (1): Linear(in_features=256, out_features=2, bias=True)
    (2): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 11:27:00 - INFO - __main__ -   the model has 198,406 trainable parameters
06/29/2021 11:27:00 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 11:27:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:27:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:27:10 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 1.848 | val_loss: 1.691
06/29/2021 11:27:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7264664382181012, 'precision': 0.7245252671993359, 'recall': 0.7287552332219731}
06/29/2021 11:27:10 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:27:10 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:27:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:27:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:27:20 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 1.603 | val_loss: 1.599
06/29/2021 11:27:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7318952234206472, 'f1': 0.7103510895883777, 'precision': 0.7063604876974514, 'recall': 0.7179451938935172}
06/29/2021 11:27:20 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:27:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:27:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:27:30 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 1.540 | val_loss: 1.544
06/29/2021 11:27:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7426810477657936, 'f1': 0.7138515966364369, 'precision': 0.7136211152604595, 'recall': 0.7140863534486404}
06/29/2021 11:27:30 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:27:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:27:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:27:40 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 1.504 | val_loss: 1.487
06/29/2021 11:27:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7235279954066418, 'precision': 0.7237762237762237, 'recall': 0.7232841375227301}
06/29/2021 11:27:40 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:27:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:27:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:27:49 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 1.456 | val_loss: 1.570
06/29/2021 11:27:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6687211093990755, 'f1': 0.6596416767285012, 'precision': 0.6675024217904154, 'recall': 0.686461284729564}
06/29/2021 11:27:49 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:27:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:27:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:27:59 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 1.471 | val_loss: 1.538
06/29/2021 11:27:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7256231275757714, 'precision': 0.802941628264209, 'recall': 0.708498963927771}
06/29/2021 11:27:59 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:28:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:28:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:28:09 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 1.364 | val_loss: 1.497
06/29/2021 11:28:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7781201848998459, 'f1': 0.7269284712482469, 'precision': 0.7723866439005881, 'recall': 0.7125058146910813}
06/29/2021 11:28:09 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:28:13 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:28:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:28:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:28:23 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 1.376 | val_loss: 1.582
06/29/2021 11:28:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7010785824345146, 'f1': 0.6930439616164767, 'precision': 0.7003456855780736, 'recall': 0.7230304055482725}
06/29/2021 11:28:23 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:28:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:28:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:28:33 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 1.358 | val_loss: 1.563
06/29/2021 11:28:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.6929006456733778, 'precision': 0.7647525430055682, 'recall': 0.6799594028840867}
06/29/2021 11:28:33 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:28:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:28:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:28:43 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 1.349 | val_loss: 1.535
06/29/2021 11:28:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.6977374733388509, 'precision': 0.7485251992399105, 'recall': 0.6852824882648961}
06/29/2021 11:28:43 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:28:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:28:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:28:53 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 1.314 | val_loss: 1.673
06/29/2021 11:28:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7149460708782742, 'f1': 0.7018537142573348, 'precision': 0.70098998503511, 'recall': 0.7215080137015266}
06/29/2021 11:28:53 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:29:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:29:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:29:02 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 1.295 | val_loss: 1.812
06/29/2021 11:29:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.7085578650243778, 'precision': 0.7111980350148239, 'recall': 0.7063528143104834}
06/29/2021 11:29:02 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:29:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:29:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:29:12 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 1.279 | val_loss: 1.491
06/29/2021 11:29:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7316358898833126, 'precision': 0.7585410092677716, 'recall': 0.720017338351588}
06/29/2021 11:29:12 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:29:16 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:29:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:29:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:29:25 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 1.240 | val_loss: 1.557
06/29/2021 11:29:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.7383042378544822, 'precision': 0.7634532727496008, 'recall': 0.72680466866833}
06/29/2021 11:29:25 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:29:29 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:29:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:29:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:29:39 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 1.221 | val_loss: 1.589
06/29/2021 11:29:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7310914018231092, 'precision': 0.7519650391802291, 'recall': 0.7209635471730029}
06/29/2021 11:29:39 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:29:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:29:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:29:49 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 1.226 | val_loss: 1.554
06/29/2021 11:29:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7347743488921779, 'precision': 0.7495107176141659, 'recall': 0.7264346428722459}
06/29/2021 11:29:49 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:29:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:29:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:29:58 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 1.167 | val_loss: 1.589
06/29/2021 11:29:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7370766488413547, 'precision': 0.7775142314990512, 'recall': 0.722649807586586}
06/29/2021 11:29:58 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:30:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:30:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:30:08 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 1.176 | val_loss: 1.717
06/29/2021 11:30:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.7175197656794069, 'precision': 0.7132740447957839, 'recall': 0.7259007485093246}
06/29/2021 11:30:08 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:30:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:30:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:30:18 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 1.185 | val_loss: 1.731
06/29/2021 11:30:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.7217871922083267, 'precision': 0.7526664799918542, 'recall': 0.7098733454560833}
06/29/2021 11:30:18 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:30:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:30:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:30:28 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 1.179 | val_loss: 1.661
06/29/2021 11:30:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7383584793125539, 'precision': 0.7532910065237652, 'recall': 0.7298653106102254}
06/29/2021 11:30:28 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:30:32 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:30:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:30:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:30:41 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 1.119 | val_loss: 1.805
06/29/2021 11:30:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7781201848998459, 'f1': 0.7193446088794926, 'precision': 0.7840122019511333, 'recall': 0.7037520615722925}
06/29/2021 11:30:41 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:30:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:30:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:30:51 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 1.129 | val_loss: 1.771
06/29/2021 11:30:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7226502311248074, 'f1': 0.6986938758666226, 'precision': 0.6953020812285311, 'recall': 0.704370533260033}
06/29/2021 11:30:51 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:31:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:31:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:31:01 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 1.120 | val_loss: 1.665
06/29/2021 11:31:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.7058996877927812, 'precision': 0.7218135512911632, 'recall': 0.6979690869877786}
06/29/2021 11:31:01 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:31:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:31:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:31:11 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 1.095 | val_loss: 1.765
06/29/2021 11:31:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7211300891610269, 'precision': 0.7252552079917809, 'recall': 0.7178870469827039}
06/29/2021 11:31:11 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:31:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:31:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:31:20 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 1.140 | val_loss: 1.620
06/29/2021 11:31:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7377440944987248, 'precision': 0.7410782080485953, 'recall': 0.7349663805133844}
06/29/2021 11:31:20 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:31:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:31:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:31:30 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 1.091 | val_loss: 1.739
06/29/2021 11:31:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.7242834485102527, 'precision': 0.7504782965189951, 'recall': 0.713156002875629}
06/29/2021 11:31:30 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:31:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:31:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:31:40 - INFO - __main__ -   Epoch: 0027 | Time: 0m_9s | train_loss: 1.094 | val_loss: 1.784
06/29/2021 11:31:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7303543913713405, 'f1': 0.7084209418330907, 'precision': 0.7045213032581453, 'recall': 0.7156827504546031}
06/29/2021 11:31:40 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 11:31:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:31:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:31:50 - INFO - __main__ -   Epoch: 0028 | Time: 0m_9s | train_loss: 1.105 | val_loss: 1.909
06/29/2021 11:31:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7367799290646937, 'precision': 0.7458102446276524, 'recall': 0.7307375142724235}
06/29/2021 11:31:50 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 11:32:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:32:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:32:00 - INFO - __main__ -   Epoch: 0029 | Time: 0m_9s | train_loss: 1.046 | val_loss: 1.705
06/29/2021 11:32:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7252352275378222, 'precision': 0.7610846725958288, 'recall': 0.7122837992134309}
06/29/2021 11:32:00 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 11:32:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:32:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:32:09 - INFO - __main__ -   Epoch: 0030 | Time: 0m_9s | train_loss: 1.049 | val_loss: 1.938
06/29/2021 11:32:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.728889636514011, 'precision': 0.7502903811252268, 'recall': 0.7187011037340889}
06/29/2021 11:32:09 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 11:32:09 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 11:32:09 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-german-cased/trg_fc256_lr0.005_frozen
06/29/2021 11:32:10 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-german-cased/trg_fc256_lr0.005_frozen
06/29/2021 11:32:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:32:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:32:13 - INFO - __main__ -   best_val_loss: 1.661
06/29/2021 11:32:13 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7383584793125539, 'precision': 0.7532910065237652, 'recall': 0.7298653106102254}
