06/29/2021 12:07:35 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 12:07:35 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 12:07:36 - INFO - __main__ -   device: cuda
06/29/2021 12:07:36 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 12:07:37 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:07:37 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:07:37 - WARNING - data_utils.bert_data -   trimming sentence 1807 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:07:38 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:07:38 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:07:38 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:07:38 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 12:07:38 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 12:07:38 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 12:07:38 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 12:07:38 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   train OOV: 487 (0.37%) out of 131667 running tokens are OOV
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   val OOV: 130 (0.41%) out of 31932 running tokens are OOV
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:07:39 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:07:41 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 12:07:44 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
    (1): Linear(in_features=256, out_features=2, bias=True)
    (2): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 12:07:44 - INFO - __main__ -   the model has 198,406 trainable parameters
06/29/2021 12:07:44 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 12:07:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:07:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:07:55 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.850 | val_loss: 2.165
06/29/2021 12:07:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.47303543913713403, 'f1': 0.4559532913700806, 'precision': 0.6471211647381772, 'recall': 0.5895250983211401}
06/29/2021 12:07:55 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:07:56 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:08:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:08:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:08:08 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.767 | val_loss: 2.166
06/29/2021 12:08:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5069337442218799, 'f1': 0.4979111867553768, 'precision': 0.6534342848862484, 'recall': 0.6119433754810335}
06/29/2021 12:08:08 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:08:17 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:08:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:08:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:08:29 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.709 | val_loss: 1.933
06/29/2021 12:08:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5870570107858244, 'f1': 0.5869383490073146, 'precision': 0.6637108146219763, 'recall': 0.6595604093542521}
06/29/2021 12:08:29 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:08:36 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:08:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:08:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:08:47 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.677 | val_loss: 1.807
06/29/2021 12:08:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.711864406779661, 'f1': 0.7023556389410048, 'precision': 0.7060269725329072, 'recall': 0.7290195373620332}
06/29/2021 12:08:47 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:08:55 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:09:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:09:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:09:06 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.672 | val_loss: 1.758
06/29/2021 12:09:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6718027734976888, 'f1': 0.6681597879863745, 'precision': 0.6915417147251057, 'recall': 0.710682116124667}
06/29/2021 12:09:06 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:09:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:09:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:09:18 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.616 | val_loss: 1.605
06/29/2021 12:09:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.7233431350987372, 'precision': 0.731029810298103, 'recall': 0.7181090624603543}
06/29/2021 12:09:18 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:09:28 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:09:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:09:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:09:39 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.608 | val_loss: 1.596
06/29/2021 12:09:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.7217767152857633, 'precision': 0.7176828911146254, 'recall': 0.735748720767962}
06/29/2021 12:09:39 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:09:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:09:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:09:51 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.604 | val_loss: 1.507
06/29/2021 12:09:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7290337743491906, 'precision': 0.7440334268349695, 'recall': 0.7207415316953525}
06/29/2021 12:09:51 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:09:59 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:10:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:10:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:10:10 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.570 | val_loss: 1.508
06/29/2021 12:10:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7473035439137135, 'f1': 0.7244246981089086, 'precision': 0.7208933365877471, 'recall': 0.7296274368841713}
06/29/2021 12:10:10 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:10:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:10:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:10:21 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.573 | val_loss: 1.547
06/29/2021 12:10:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7316629455056645, 'precision': 0.7277818321879626, 'recall': 0.7375829914999789}
06/29/2021 12:10:21 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:10:29 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:10:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:10:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:10:41 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.531 | val_loss: 1.625
06/29/2021 12:10:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7288135593220338, 'f1': 0.7132931726907631, 'precision': 0.7099685571212297, 'recall': 0.7287393749735696}
06/29/2021 12:10:41 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:10:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:10:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:10:52 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.531 | val_loss: 1.535
06/29/2021 12:10:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.7160270033754219, 'precision': 0.7133878096412787, 'recall': 0.7194834439886666}
06/29/2021 12:10:52 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:11:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:11:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:11:04 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.556 | val_loss: 1.476
06/29/2021 12:11:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7171636230722731, 'precision': 0.7390119935644288, 'recall': 0.7073148813803019}
06/29/2021 12:11:04 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:11:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:11:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:11:16 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.528 | val_loss: 1.519
06/29/2021 12:11:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7186370409502125, 'precision': 0.7517981902085642, 'recall': 0.7065166828773206}
06/29/2021 12:11:16 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:11:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:11:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:11:27 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.539 | val_loss: 1.622
06/29/2021 12:11:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7257318952234206, 'f1': 0.7148111940593277, 'precision': 0.715311986863711, 'recall': 0.7384393369137734}
06/29/2021 12:11:27 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:11:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:11:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:11:39 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.543 | val_loss: 1.501
06/29/2021 12:11:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7258952626042428, 'precision': 0.7243405425678209, 'recall': 0.7276610140821246}
06/29/2021 12:11:39 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:11:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:11:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:11:51 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.501 | val_loss: 1.708
06/29/2021 12:11:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7288135593220338, 'f1': 0.715379248480016, 'precision': 0.7132317554430477, 'recall': 0.7342104706728126}
06/29/2021 12:11:51 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:12:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:12:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:12:02 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.466 | val_loss: 1.492
06/29/2021 12:12:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7627118644067796, 'f1': 0.720189701897019, 'precision': 0.7402290536467752, 'recall': 0.7106715439590646}
06/29/2021 12:12:02 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:12:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:12:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:12:14 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.465 | val_loss: 1.529
06/29/2021 12:12:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7162945525534821, 'precision': 0.7237620103473762, 'recall': 0.7112477269843955}
06/29/2021 12:12:14 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 12:12:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:12:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:12:26 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.498 | val_loss: 1.471
06/29/2021 12:12:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7112623561821423, 'precision': 0.759827207822874, 'recall': 0.6977629297585317}
06/29/2021 12:12:26 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 12:12:26 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 12:12:26 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
06/29/2021 12:12:26 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc256_lr0.0005_frozen
06/29/2021 12:12:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:12:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:12:30 - INFO - __main__ -   best_val_loss: 1.547
06/29/2021 12:12:30 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7316629455056645, 'precision': 0.7277818321879626, 'recall': 0.7375829914999789}
