06/29/2021 11:10:29 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 11:10:29 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 11:10:29 - INFO - __main__ -   device: cuda
06/29/2021 11:10:29 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 11:10:30 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:10:30 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:10:31 - WARNING - data_utils.bert_data -   trimming sentence 1807 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:10:31 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:10:31 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:10:31 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 11:10:31 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 11:10:31 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 11:10:31 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 11:10:31 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 11:10:31 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   train OOV: 487 (0.37%) out of 131667 running tokens are OOV
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   val OOV: 130 (0.41%) out of 31932 running tokens are OOV
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:10:32 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 11:10:34 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 11:10:37 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
    (1): Linear(in_features=128, out_features=2, bias=True)
    (2): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 11:10:37 - INFO - __main__ -   the model has 99,206 trainable parameters
06/29/2021 11:10:37 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 11:10:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:10:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:10:49 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.884 | val_loss: 2.219
06/29/2021 11:10:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.3913713405238829, 'f1': 0.338173979269127, 'precision': 0.6518945416004239, 'recall': 0.5363629635894617}
06/29/2021 11:10:49 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:10:49 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:11:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:11:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:11:01 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.803 | val_loss: 2.137
06/29/2021 11:11:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.4930662557781202, 'f1': 0.48123771553242617, 'precision': 0.6498887137160345, 'recall': 0.6025235759292933}
06/29/2021 11:11:01 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:11:08 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:11:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:11:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:11:19 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.724 | val_loss: 1.938
06/29/2021 11:11:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5993836671802774, 'f1': 0.599375106839636, 'precision': 0.6645588235294118, 'recall': 0.6656235463272296}
06/29/2021 11:11:19 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:11:27 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:11:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:11:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:11:38 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.685 | val_loss: 1.821
06/29/2021 11:11:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7041602465331279, 'f1': 0.6949112704195557, 'precision': 0.6996625796026994, 'recall': 0.7220841967268575}
06/29/2021 11:11:38 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:11:45 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:11:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:11:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:11:57 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.687 | val_loss: 1.689
06/29/2021 11:11:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6933744221879815, 'f1': 0.6873621705103594, 'precision': 0.7003557906352861, 'recall': 0.7226603797521884}
06/29/2021 11:11:57 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:12:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:12:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:12:08 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.626 | val_loss: 1.592
06/29/2021 11:12:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7473035439137135, 'f1': 0.7167989952957704, 'precision': 0.7183528024863359, 'recall': 0.7154025880661394}
06/29/2021 11:12:08 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:12:15 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:12:27 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:12:27 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:12:27 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.615 | val_loss: 1.629
06/29/2021 11:12:27 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7318952234206472, 'f1': 0.7190056733353241, 'precision': 0.7170463283352557, 'recall': 0.7387353575506407}
06/29/2021 11:12:27 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:12:34 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:12:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:12:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:12:45 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.620 | val_loss: 1.511
06/29/2021 11:12:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7275450480340829, 'precision': 0.7345044543429844, 'recall': 0.7226339493381824}
06/29/2021 11:12:45 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:12:52 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:13:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:03 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.589 | val_loss: 1.514
06/29/2021 11:13:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.7177033492822966, 'precision': 0.7142929786022293, 'recall': 0.7227661014082125}
06/29/2021 11:13:03 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:13:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:15 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.591 | val_loss: 1.533
06/29/2021 11:13:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7550077041602465, 'f1': 0.7304204710215916, 'precision': 0.7280813280410154, 'recall': 0.7332801200998011}
06/29/2021 11:13:15 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:13:26 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:13:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:37 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.553 | val_loss: 1.647
06/29/2021 11:13:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7288135593220338, 'f1': 0.7145655911398985, 'precision': 0.7118837977176621, 'recall': 0.7320220323931155}
06/29/2021 11:13:37 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:13:48 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:13:48 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:13:48 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.547 | val_loss: 1.551
06/29/2021 11:13:48 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.7182460927809476, 'precision': 0.7146252711386811, 'recall': 0.723860320548061}
06/29/2021 11:13:48 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:14:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:00 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.569 | val_loss: 1.495
06/29/2021 11:14:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.7182669044557808, 'precision': 0.7326554464703132, 'recall': 0.7104495284814141}
06/29/2021 11:14:00 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:14:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:12 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.550 | val_loss: 1.514
06/29/2021 11:14:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.718351926071529, 'precision': 0.7447491830676745, 'recall': 0.7074628916987356}
06/29/2021 11:14:12 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:14:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:24 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.561 | val_loss: 1.613
06/29/2021 11:14:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7272727272727273, 'f1': 0.7143578254263883, 'precision': 0.7127221208337335, 'recall': 0.7341364655135958}
06/29/2021 11:14:24 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:14:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:35 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.564 | val_loss: 1.535
06/29/2021 11:14:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7326742868911543, 'precision': 0.7284075573549258, 'recall': 0.739771429779676}
06/29/2021 11:14:35 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:14:42 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:14:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:14:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:14:54 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.529 | val_loss: 1.714
06/29/2021 11:14:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7288135593220338, 'f1': 0.7172953172953174, 'precision': 0.7168560606060606, 'recall': 0.7396815663720557}
06/29/2021 11:14:54 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:15:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:06 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.497 | val_loss: 1.501
06/29/2021 11:15:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.7176085040757876, 'precision': 0.7303284950343774, 'recall': 0.7103755233221973}
06/29/2021 11:15:06 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:15:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:17 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.499 | val_loss: 1.502
06/29/2021 11:15:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7148576184693474, 'precision': 0.7240228843321627, 'recall': 0.7090592887046983}
06/29/2021 11:15:17 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:15:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:29 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.531 | val_loss: 1.479
06/29/2021 11:15:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.6970338983050847, 'precision': 0.7539633968642536, 'recall': 0.6842622742842644}
06/29/2021 11:15:29 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:15:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:40 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 1.492 | val_loss: 1.513
06/29/2021 11:15:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7457627118644068, 'f1': 0.7240624927527269, 'precision': 0.720061933869959, 'recall': 0.7306476508648032}
06/29/2021 11:15:40 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:15:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:15:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:15:52 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 1.470 | val_loss: 1.506
06/29/2021 11:15:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7457627118644068, 'f1': 0.6641008026950982, 'precision': 0.7511638255630861, 'recall': 0.6551465302152493}
06/29/2021 11:15:52 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:16:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:04 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.489 | val_loss: 1.575
06/29/2021 11:16:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7417527908599337, 'precision': 0.7514401897661809, 'recall': 0.7353364063094685}
06/29/2021 11:16:04 - INFO - __main__ -   	--Found new best val f1
06/29/2021 11:16:11 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 11:16:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:22 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.464 | val_loss: 1.544
06/29/2021 11:16:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7311598373075117, 'precision': 0.7487206823027719, 'recall': 0.7219837611536347}
06/29/2021 11:16:22 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 11:16:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:34 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.483 | val_loss: 1.550
06/29/2021 11:16:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7348863287455445, 'precision': 0.7375113337075256, 'recall': 0.7326299319152535}
06/29/2021 11:16:34 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 11:16:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:46 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.457 | val_loss: 1.638
06/29/2021 11:16:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.7250499304000484, 'precision': 0.7208506608875613, 'recall': 0.7391793885059416}
06/29/2021 11:16:46 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 11:16:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:16:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:16:57 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 1.454 | val_loss: 1.507
06/29/2021 11:16:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7257152744095281, 'precision': 0.7528436728279578, 'recall': 0.7143242271746945}
06/29/2021 11:16:57 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 11:17:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:09 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 1.460 | val_loss: 1.484
06/29/2021 11:17:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.7233589087809037, 'precision': 0.7333196982092538, 'recall': 0.7170888484797227}
06/29/2021 11:17:09 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 11:17:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:21 - INFO - __main__ -   Epoch: 0029 | Time: 0m_11s | train_loss: 1.458 | val_loss: 1.546
06/29/2021 11:17:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7503852080123267, 'f1': 0.7293327154772937, 'precision': 0.7251394847624226, 'recall': 0.7363407620416966}
06/29/2021 11:17:21 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 11:17:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:32 - INFO - __main__ -   Epoch: 0030 | Time: 0m_11s | train_loss: 1.417 | val_loss: 1.532
06/29/2021 11:17:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7314207905592118, 'precision': 0.7340086783817625, 'recall': 0.729199264177274}
06/29/2021 11:17:32 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 11:17:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:44 - INFO - __main__ -   Epoch: 0031 | Time: 0m_11s | train_loss: 1.459 | val_loss: 1.509
06/29/2021 11:17:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7138163041777499, 'precision': 0.741331405582097, 'recall': 0.7029380048209075}
06/29/2021 11:17:44 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 11:17:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:17:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:17:56 - INFO - __main__ -   Epoch: 0032 | Time: 0m_11s | train_loss: 1.442 | val_loss: 1.480
06/29/2021 11:17:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.7326137112722478, 'precision': 0.745002300437083, 'recall': 0.7251924134139638}
06/29/2021 11:17:56 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 11:18:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:07 - INFO - __main__ -   Epoch: 0033 | Time: 0m_11s | train_loss: 1.417 | val_loss: 1.479
06/29/2021 11:18:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7155126823736357, 'precision': 0.7401061776061776, 'recall': 0.7051264431006048}
06/29/2021 11:18:07 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 11:18:07 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 11:18:07 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 11:18:08 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc128_lr0.0005_frozen
06/29/2021 11:18:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 11:18:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 11:18:12 - INFO - __main__ -   best_val_loss: 1.575
06/29/2021 11:18:12 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7417527908599337, 'precision': 0.7514401897661809, 'recall': 0.7353364063094685}
