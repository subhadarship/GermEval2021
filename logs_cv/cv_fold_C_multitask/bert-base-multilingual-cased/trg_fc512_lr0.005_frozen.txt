06/29/2021 13:37:16 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 13:37:16 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_C
	dev_data_dir: ../data/cross_validation/fold_C
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 512
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 13:37:18 - INFO - __main__ -   device: cuda
06/29/2021 13:37:18 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 13:37:18 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:37:19 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:37:19 - WARNING - data_utils.bert_data -   trimming sentence 1807 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:37:19 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:37:20 - WARNING - data_utils.bert_data -   trimming sentence 249 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:37:20 - WARNING - data_utils.bert_data -   trimming sentence 599 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   train OOV: 487 (0.37%) out of 131667 running tokens are OOV
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   val OOV: 130 (0.41%) out of 31932 running tokens are OOV
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:37:20 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 13:37:22 - INFO - data_utils.preprocess_bert -   there are nearly 143 batches in an epoch
06/29/2021 13:37:25 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=512, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=512, out_features=2, bias=True)
    (1): Linear(in_features=512, out_features=2, bias=True)
    (2): Linear(in_features=512, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 13:37:25 - INFO - __main__ -   the model has 396,806 trainable parameters
06/29/2021 13:37:25 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 13:37:37 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:37:37 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:37:37 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.951 | val_loss: 2.816
06/29/2021 13:37:37 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.46841294298921415, 'f1': 0.4508700290622816, 'precision': 0.6406337535014006, 'recall': 0.5849262062840952}
06/29/2021 13:37:37 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:37:38 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:37:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:37:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:37:49 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.791 | val_loss: 2.279
06/29/2021 13:37:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.5285053929121726, 'f1': 0.5227941176470589, 'precision': 0.6607481629926519, 'recall': 0.6272042965281008}
06/29/2021 13:37:49 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:37:57 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:38:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:38:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:38:08 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.728 | val_loss: 2.822
06/29/2021 13:38:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.4406779661016949, 'f1': 0.4099955672093704, 'precision': 0.660970795281583, 'recall': 0.5715577028798579}
06/29/2021 13:38:08 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:38:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:38:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:38:20 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.754 | val_loss: 2.110
06/29/2021 13:38:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.613251155624037, 'f1': 0.6128062331686145, 'precision': 0.6636258590281578, 'recall': 0.6706664693195754}
06/29/2021 13:38:20 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:38:28 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:38:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:38:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:38:39 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.691 | val_loss: 1.672
06/29/2021 13:38:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.7043993141142428, 'precision': 0.7075956937799044, 'recall': 0.7018279274326553}
06/29/2021 13:38:39 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:38:47 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:38:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:38:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:38:59 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.658 | val_loss: 1.633
06/29/2021 13:38:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.736517719568567, 'f1': 0.6707841270123791, 'precision': 0.7163135653308375, 'recall': 0.66126781409904}
06/29/2021 13:38:59 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:39:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:39:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:39:10 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.661 | val_loss: 2.034
06/29/2021 13:39:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7211093990755008, 'f1': 0.707902635040544, 'precision': 0.7064883296513303, 'recall': 0.727275130037637}
06/29/2021 13:39:10 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:39:19 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:39:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:39:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:39:30 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.674 | val_loss: 1.636
06/29/2021 13:39:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.7126836737283475, 'precision': 0.7355581481026648, 'recall': 0.7027899945024738}
06/29/2021 13:39:30 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:39:38 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:39:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:39:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:39:49 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.618 | val_loss: 1.520
06/29/2021 13:39:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7235279954066418, 'precision': 0.7237762237762237, 'recall': 0.7232841375227301}
06/29/2021 13:39:49 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:39:58 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:40:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:40:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:40:09 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.633 | val_loss: 1.681
06/29/2021 13:40:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.6760014263639607, 'precision': 0.7236684534671534, 'recall': 0.665866706136085}
06/29/2021 13:40:09 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:40:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:40:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:40:20 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.587 | val_loss: 1.609
06/29/2021 13:40:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7473035439137135, 'f1': 0.7222268618076289, 'precision': 0.719812644437108, 'recall': 0.725250560324777}
06/29/2021 13:40:20 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:40:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:40:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:40:32 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.573 | val_loss: 1.551
06/29/2021 13:40:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.7281018369320014, 'precision': 0.7323485693050911, 'recall': 0.7247483824586629}
06/29/2021 13:40:32 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:40:40 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:40:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:40:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:40:51 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.602 | val_loss: 1.554
06/29/2021 13:40:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7550077041602465, 'f1': 0.7037303941131378, 'precision': 0.7350666426048622, 'recall': 0.6927940119254028}
06/29/2021 13:40:51 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:41:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:41:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:41:03 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.578 | val_loss: 2.120
06/29/2021 13:41:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7288135593220338, 'f1': 0.6319059527185542, 'precision': 0.7321394641839255, 'recall': 0.6291654332473464}
06/29/2021 13:41:03 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:41:14 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:41:14 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:41:14 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.595 | val_loss: 1.700
06/29/2021 13:41:14 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7272727272727273, 'f1': 0.7151285198824537, 'precision': 0.7141755293666763, 'recall': 0.7363249037932931}
06/29/2021 13:41:14 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:41:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:41:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:41:26 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.631 | val_loss: 1.626
06/29/2021 13:41:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.728131821812628, 'precision': 0.725181598062954, 'recall': 0.732037890641519}
06/29/2021 13:41:26 - INFO - __main__ -   	--Found new best val f1
06/29/2021 13:41:35 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 13:41:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:41:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:41:46 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.566 | val_loss: 1.624
06/29/2021 13:41:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7235279954066418, 'precision': 0.7237762237762237, 'recall': 0.7232841375227301}
06/29/2021 13:41:46 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 13:41:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:41:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:41:57 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.532 | val_loss: 1.570
06/29/2021 13:41:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.705083063610082, 'precision': 0.7221188482549679, 'recall': 0.69687486784793}
06/29/2021 13:41:57 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 13:42:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:42:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:42:09 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.535 | val_loss: 1.679
06/29/2021 13:42:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.7176926713947991, 'precision': 0.7235862848029769, 'recall': 0.7134361652640927}
06/29/2021 13:42:09 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 13:42:21 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:42:21 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:42:21 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.550 | val_loss: 1.573
06/29/2021 13:42:21 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7411402157164869, 'f1': 0.6626819126819128, 'precision': 0.7369402377462955, 'recall': 0.6538302955977502}
06/29/2021 13:42:21 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 13:42:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:42:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:42:32 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 1.528 | val_loss: 1.697
06/29/2021 13:42:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.7238933712386634, 'precision': 0.7206454046108618, 'recall': 0.7412198164672051}
06/29/2021 13:42:32 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 13:42:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:42:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:42:44 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 1.496 | val_loss: 1.715
06/29/2021 13:42:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.6365367383512545, 'precision': 0.7643617021276596, 'recall': 0.6339863407620416}
06/29/2021 13:42:44 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 13:42:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:42:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:42:55 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.530 | val_loss: 1.774
06/29/2021 13:42:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7503852080123267, 'f1': 0.7202526660848464, 'precision': 0.7218304576144036, 'recall': 0.7188332558041189}
06/29/2021 13:42:55 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 13:43:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:43:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:43:07 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.511 | val_loss: 1.657
06/29/2021 13:43:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7191834864720406, 'precision': 0.7441218691218692, 'recall': 0.7085571108385842}
06/29/2021 13:43:07 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 13:43:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:43:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:43:19 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.531 | val_loss: 1.752
06/29/2021 13:43:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7288135593220338, 'f1': 0.7019019980374555, 'precision': 0.6997255694948827, 'recall': 0.7046665538969002}
06/29/2021 13:43:19 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 13:43:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:43:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:43:30 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.516 | val_loss: 1.786
06/29/2021 13:43:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7149460708782742, 'f1': 0.7058708247081735, 'precision': 0.7100057039642551, 'recall': 0.7335444242398612}
06/29/2021 13:43:30 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 13:43:30 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 13:43:30 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
06/29/2021 13:43:31 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_C_multitask/bert-base-multilingual-cased/trg_fc512_lr0.005_frozen
06/29/2021 13:43:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 13:43:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 13:43:35 - INFO - __main__ -   best_val_loss: 1.626
06/29/2021 13:43:35 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7519260400616333, 'f1': 0.728131821812628, 'precision': 0.725181598062954, 'recall': 0.732037890641519}
