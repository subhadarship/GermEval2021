06/29/2021 09:25:07 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 09:25:07 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_E
	dev_data_dir: ../data/cross_validation/fold_E
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_E_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_E_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 09:25:07 - INFO - __main__ -   device: cuda
06/29/2021 09:25:07 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 09:25:08 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:08 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:09 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:09 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:09 - WARNING - data_utils.bert_data -   trimming sentence 22 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 09:25:09 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 09:25:09 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 09:25:09 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 09:25:09 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 09:25:09 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   train OOV: 535 (0.46%) out of 115087 running tokens are OOV
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   val OOV: 156 (0.50%) out of 31041 running tokens are OOV
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:25:10 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 09:25:12 - INFO - data_utils.preprocess_bert -   there are nearly 125 batches in an epoch
06/29/2021 09:25:14 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 09:25:14 - INFO - __main__ -   the model has 197,378 trainable parameters
06/29/2021 09:25:14 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 09:25:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:25:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:25:24 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.537 | val_loss: 0.616
06/29/2021 09:25:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6671802773497689, 'f1': 0.6624284806102987, 'precision': 0.6821338383838385, 'recall': 0.7017482517482517}
06/29/2021 09:25:24 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:25:24 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:25:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:25:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:25:34 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.464 | val_loss: 0.509
06/29/2021 09:25:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7418174051182101, 'precision': 0.7438837920489296, 'recall': 0.73997668997669}
06/29/2021 09:25:34 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:25:37 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:25:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:25:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:25:47 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.471 | val_loss: 0.490
06/29/2021 09:25:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7596302003081664, 'f1': 0.7335628118486704, 'precision': 0.7321439779074876, 'recall': 0.7351398601398601}
06/29/2021 09:25:47 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:25:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:25:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:25:57 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.441 | val_loss: 0.454
06/29/2021 09:25:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7489857553139838, 'precision': 0.760608381535929, 'recall': 0.7415501165501166}
06/29/2021 09:25:57 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:26:00 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:26:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:10 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.409 | val_loss: 0.476
06/29/2021 09:26:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7279596691967826, 'precision': 0.7531927531927531, 'recall': 0.7167832167832168}
06/29/2021 09:26:10 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:26:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:19 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.412 | val_loss: 0.458
06/29/2021 09:26:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7408035058935281, 'precision': 0.7461004626569729, 'recall': 0.7367132867132867}
06/29/2021 09:26:19 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:26:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:29 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.399 | val_loss: 0.533
06/29/2021 09:26:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7331688765546305, 'precision': 0.7285463659147869, 'recall': 0.7415501165501166}
06/29/2021 09:26:29 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:26:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:39 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.393 | val_loss: 0.557
06/29/2021 09:26:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.724191063174114, 'f1': 0.7130283560225978, 'precision': 0.7136508572956046, 'recall': 0.7371212121212121}
06/29/2021 09:26:39 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:26:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:26:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:26:49 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.356 | val_loss: 0.477
06/29/2021 09:26:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7578723438033322, 'precision': 0.7575908149025247, 'recall': 0.7581585081585082}
06/29/2021 09:26:49 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:26:57 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:27:07 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:07 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:07 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.344 | val_loss: 0.491
06/29/2021 09:27:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.7439267086576982, 'precision': 0.7805395888353788, 'recall': 0.7296037296037297}
06/29/2021 09:27:07 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:27:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:17 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.324 | val_loss: 0.466
06/29/2021 09:27:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7966101694915254, 'f1': 0.7601626016260161, 'precision': 0.7819767441860466, 'recall': 0.7487179487179487}
06/29/2021 09:27:17 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:27:20 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:27:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:30 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.307 | val_loss: 0.489
06/29/2021 09:27:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7423770429314638, 'precision': 0.7406831325552748, 'recall': 0.7442890442890443}
06/29/2021 09:27:30 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:27:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:40 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.288 | val_loss: 0.508
06/29/2021 09:27:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.7362422538052393, 'precision': 0.7924178304415291, 'recall': 0.7196386946386946}
06/29/2021 09:27:40 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:27:50 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:27:50 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:27:50 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.272 | val_loss: 0.515
06/29/2021 09:27:50 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7438449394094555, 'precision': 0.7456064024062735, 'recall': 0.7422494172494173}
06/29/2021 09:27:50 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:28:00 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:00 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:00 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.254 | val_loss: 0.517
06/29/2021 09:28:00 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7512360845694179, 'precision': 0.7652151769798828, 'recall': 0.7427738927738927}
06/29/2021 09:28:00 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:28:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:10 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.241 | val_loss: 0.539
06/29/2021 09:28:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7426645519429025, 'precision': 0.7692555192555193, 'recall': 0.7305361305361305}
06/29/2021 09:28:10 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:28:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:19 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.221 | val_loss: 0.590
06/29/2021 09:28:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.7477537209355495, 'precision': 0.7800403072476995, 'recall': 0.7340909090909091}
06/29/2021 09:28:19 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:28:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:29 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.207 | val_loss: 0.552
06/29/2021 09:28:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7981510015408321, 'f1': 0.7616412240492311, 'precision': 0.784315852923448, 'recall': 0.7498834498834499}
06/29/2021 09:28:29 - INFO - __main__ -   	--Found new best val f1
06/29/2021 09:28:33 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 09:28:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:43 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.208 | val_loss: 0.616
06/29/2021 09:28:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.7317127604265733, 'precision': 0.7269506682389937, 'recall': 0.7446969696969696}
06/29/2021 09:28:43 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 09:28:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:28:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:28:52 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.187 | val_loss: 0.649
06/29/2021 09:28:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.719982741617357, 'precision': 0.8055555555555556, 'recall': 0.7028554778554779}
06/29/2021 09:28:52 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 09:29:02 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:02 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:02 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.160 | val_loss: 0.781
06/29/2021 09:29:02 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7380585516178737, 'f1': 0.7217767152857633, 'precision': 0.7177065454829147, 'recall': 0.7365384615384616}
06/29/2021 09:29:02 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 09:29:12 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:12 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:12 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.171 | val_loss: 0.624
06/29/2021 09:29:12 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7781201848998459, 'f1': 0.7478088165450542, 'precision': 0.7532496144525226, 'recall': 0.7435897435897436}
06/29/2021 09:29:12 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 09:29:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:22 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.145 | val_loss: 0.624
06/29/2021 09:29:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.755885780885781, 'precision': 0.7558857808857808, 'recall': 0.7558857808857808}
06/29/2021 09:29:22 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 09:29:32 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:32 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:32 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.134 | val_loss: 0.633
06/29/2021 09:29:32 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.7541564707671464, 'precision': 0.7694897483690588, 'recall': 0.7451048951048951}
06/29/2021 09:29:32 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 09:29:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:41 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.123 | val_loss: 0.650
06/29/2021 09:29:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.733998950750869, 'precision': 0.7435028888637136, 'recall': 0.7277389277389277}
06/29/2021 09:29:41 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 09:29:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:29:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:29:51 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 0.116 | val_loss: 0.743
06/29/2021 09:29:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.727983234714004, 'precision': 0.8159133709981168, 'recall': 0.7097319347319347}
06/29/2021 09:29:51 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 09:30:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:30:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:30:01 - INFO - __main__ -   Epoch: 0027 | Time: 0m_9s | train_loss: 0.116 | val_loss: 0.764
06/29/2021 09:30:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7257318952234206, 'f1': 0.7117369345630216, 'precision': 0.7095783004873915, 'recall': 0.7305361305361305}
06/29/2021 09:30:01 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 09:30:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:30:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:30:11 - INFO - __main__ -   Epoch: 0028 | Time: 0m_9s | train_loss: 0.103 | val_loss: 0.683
06/29/2021 09:30:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7276228408726206, 'precision': 0.7383513569125952, 'recall': 0.7209207459207458}
06/29/2021 09:30:11 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 09:30:11 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 09:30:11 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_E_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:30:11 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_E_monotask/bert-base-german-cased/trg_fc256_lr0.0005_frozen
06/29/2021 09:30:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 09:30:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 09:30:15 - INFO - __main__ -   best_val_loss: 0.552
06/29/2021 09:30:15 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7981510015408321, 'f1': 0.7616412240492311, 'precision': 0.784315852923448, 'recall': 0.7498834498834499}
