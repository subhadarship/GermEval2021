06/29/2021 08:45:59 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 08:45:59 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_E
	dev_data_dir: ../data/cross_validation/fold_E
	test_data_dir: None
	label_col_names: Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_E_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_E_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 08:45:59 - INFO - __main__ -   device: cuda
06/29/2021 08:45:59 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 08:46:00 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:46:00 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:46:01 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:46:01 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:46:01 - WARNING - data_utils.bert_data -   trimming sentence 22 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   train OOV: 535 (0.46%) out of 115087 running tokens are OOV
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   val OOV: 156 (0.50%) out of 31041 running tokens are OOV
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 1, label ids: [[1]]
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1, label ids: [[1]]
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:46:02 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0, label ids: [[0]]
06/29/2021 08:46:04 - INFO - data_utils.preprocess_bert -   there are nearly 125 batches in an epoch
06/29/2021 08:46:06 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 08:46:06 - INFO - __main__ -   the model has 98,690 trainable parameters
06/29/2021 08:46:06 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 08:46:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:16 - INFO - __main__ -   Epoch: 0001 | Time: 0m_9s | train_loss: 0.542 | val_loss: 0.627
06/29/2021 08:46:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6610169491525424, 'f1': 0.6575822109665785, 'precision': 0.6833333333333333, 'recall': 0.7015151515151515}
06/29/2021 08:46:16 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:46:16 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:46:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:26 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 0.467 | val_loss: 0.501
06/29/2021 08:46:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.742241134751773, 'precision': 0.7479732267114361, 'recall': 0.7378787878787879}
06/29/2021 08:46:26 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:46:32 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:46:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:41 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 0.474 | val_loss: 0.494
06/29/2021 08:46:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.7323892936927157, 'precision': 0.729492328287509, 'recall': 0.7361305361305361}
06/29/2021 08:46:41 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:46:51 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:46:51 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:46:51 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 0.443 | val_loss: 0.448
06/29/2021 08:46:51 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7796610169491526, 'f1': 0.741269190774489, 'precision': 0.7596695590158089, 'recall': 0.7314685314685314}
06/29/2021 08:46:51 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:47:01 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:47:01 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:47:01 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 0.414 | val_loss: 0.472
06/29/2021 08:47:01 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.7349953991258339, 'precision': 0.7695480677511666, 'recall': 0.7215617715617716}
06/29/2021 08:47:01 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:47:11 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:47:11 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:47:11 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 0.422 | val_loss: 0.452
06/29/2021 08:47:11 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7781201848998459, 'f1': 0.743309162821358, 'precision': 0.7552287581699346, 'recall': 0.7358391608391608}
06/29/2021 08:47:11 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:47:14 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:47:24 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:47:24 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:47:24 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 0.410 | val_loss: 0.507
06/29/2021 08:47:24 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7534668721109399, 'f1': 0.7290018163976867, 'precision': 0.7261507568736485, 'recall': 0.7326923076923078}
06/29/2021 08:47:24 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:47:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:47:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:47:34 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 0.407 | val_loss: 0.536
06/29/2021 08:47:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7334360554699538, 'f1': 0.7179657219220441, 'precision': 0.7144617833158651, 'recall': 0.7341491841491841}
06/29/2021 08:47:34 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:47:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:47:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:47:43 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 0.379 | val_loss: 0.464
06/29/2021 08:47:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.7494617224880383, 'precision': 0.7575757575757576, 'recall': 0.7437062937062937}
06/29/2021 08:47:43 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:47:46 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:47:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:47:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:47:56 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 0.372 | val_loss: 0.483
06/29/2021 08:47:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7627118644067796, 'f1': 0.7309460739975018, 'precision': 0.7352889609678056, 'recall': 0.7275058275058275}
06/29/2021 08:47:56 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:48:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:48:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:48:06 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 0.353 | val_loss: 0.463
06/29/2021 08:48:06 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7919876733436055, 'f1': 0.7484503346243623, 'precision': 0.7836477987421384, 'recall': 0.7341491841491842}
06/29/2021 08:48:06 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:48:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:48:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:48:16 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 0.347 | val_loss: 0.468
06/29/2021 08:48:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.7525029541304116, 'precision': 0.7564484126984127, 'recall': 0.7492424242424243}
06/29/2021 08:48:16 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:48:20 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:48:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:48:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:48:30 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 0.333 | val_loss: 0.491
06/29/2021 08:48:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7210487535306398, 'precision': 0.8032451165721488, 'recall': 0.703962703962704}
06/29/2021 08:48:30 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:48:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:48:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:48:40 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 0.315 | val_loss: 0.500
06/29/2021 08:48:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7812018489984591, 'f1': 0.7530864859071911, 'precision': 0.7562967783924504, 'recall': 0.7503496503496503}
06/29/2021 08:48:40 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:48:43 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:48:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:48:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:48:53 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 0.307 | val_loss: 0.493
06/29/2021 08:48:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7966101694915254, 'f1': 0.754420364637083, 'precision': 0.7893404907975461, 'recall': 0.7398601398601399}
06/29/2021 08:48:53 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:48:58 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:49:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:49:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:49:08 - INFO - __main__ -   Epoch: 0016 | Time: 0m_9s | train_loss: 0.292 | val_loss: 0.486
06/29/2021 08:49:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7950693374422187, 'f1': 0.755168667761525, 'precision': 0.7837664919124407, 'recall': 0.742016317016317}
06/29/2021 08:49:08 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:49:11 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:49:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:49:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:49:20 - INFO - __main__ -   Epoch: 0017 | Time: 0m_9s | train_loss: 0.278 | val_loss: 0.559
06/29/2021 08:49:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7889060092449923, 'f1': 0.7406279444925774, 'precision': 0.785261744966443, 'recall': 0.7251748251748251}
06/29/2021 08:49:20 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:49:30 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:49:30 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:49:30 - INFO - __main__ -   Epoch: 0018 | Time: 0m_9s | train_loss: 0.271 | val_loss: 0.517
06/29/2021 08:49:30 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7919876733436055, 'f1': 0.7590353161844988, 'precision': 0.7722164711295146, 'recall': 0.7507575757575757}
06/29/2021 08:49:30 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:49:34 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:49:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:49:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:49:43 - INFO - __main__ -   Epoch: 0019 | Time: 0m_9s | train_loss: 0.268 | val_loss: 0.684
06/29/2021 08:49:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7057010785824345, 'f1': 0.696996585195343, 'precision': 0.703030303030303, 'recall': 0.7264568764568764}
06/29/2021 08:49:43 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:49:53 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:49:53 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:49:53 - INFO - __main__ -   Epoch: 0020 | Time: 0m_9s | train_loss: 0.253 | val_loss: 0.563
06/29/2021 08:49:53 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7842835130970724, 'f1': 0.7178050537928293, 'precision': 0.8104853254631907, 'recall': 0.7006410256410256}
06/29/2021 08:49:53 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:50:03 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:50:03 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:50:03 - INFO - __main__ -   Epoch: 0021 | Time: 0m_9s | train_loss: 0.233 | val_loss: 0.599
06/29/2021 08:50:03 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7688751926040062, 'f1': 0.7459392028728313, 'precision': 0.7428586139429514, 'recall': 0.7498834498834499}
06/29/2021 08:50:03 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:50:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:50:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:50:13 - INFO - __main__ -   Epoch: 0022 | Time: 0m_9s | train_loss: 0.237 | val_loss: 0.532
06/29/2021 08:50:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7981510015408321, 'f1': 0.7673930589184825, 'precision': 0.7786621670757203, 'recall': 0.7598484848484848}
06/29/2021 08:50:13 - INFO - __main__ -   	--Found new best val f1
06/29/2021 08:50:16 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 08:50:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:50:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:50:26 - INFO - __main__ -   Epoch: 0023 | Time: 0m_9s | train_loss: 0.230 | val_loss: 0.575
06/29/2021 08:50:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7981510015408321, 'f1': 0.7673930589184825, 'precision': 0.7786621670757203, 'recall': 0.7598484848484848}
06/29/2021 08:50:26 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 08:50:36 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:50:36 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:50:36 - INFO - __main__ -   Epoch: 0024 | Time: 0m_9s | train_loss: 0.198 | val_loss: 0.577
06/29/2021 08:50:36 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7904468412942989, 'f1': 0.7514754246069288, 'precision': 0.7756569645556043, 'recall': 0.7396270396270397}
06/29/2021 08:50:36 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 08:50:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:50:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:50:45 - INFO - __main__ -   Epoch: 0025 | Time: 0m_9s | train_loss: 0.193 | val_loss: 0.552
06/29/2021 08:50:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.765793528505393, 'f1': 0.7363142588315799, 'precision': 0.738655498467251, 'recall': 0.7342657342657343}
06/29/2021 08:50:45 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 08:50:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:50:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:50:55 - INFO - __main__ -   Epoch: 0026 | Time: 0m_9s | train_loss: 0.179 | val_loss: 0.627
06/29/2021 08:50:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7276007108475696, 'precision': 0.7847855839416058, 'recall': 0.7116550116550117}
06/29/2021 08:50:55 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 08:51:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:51:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:51:05 - INFO - __main__ -   Epoch: 0027 | Time: 0m_9s | train_loss: 0.183 | val_loss: 0.585
06/29/2021 08:51:05 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7673343605546995, 'f1': 0.7377440944987248, 'precision': 0.7404293535891276, 'recall': 0.7354312354312355}
06/29/2021 08:51:05 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 08:51:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:51:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:51:15 - INFO - __main__ -   Epoch: 0028 | Time: 0m_9s | train_loss: 0.160 | val_loss: 0.588
06/29/2021 08:51:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7449229013223069, 'precision': 0.7495123715181136, 'recall': 0.7412587412587412}
06/29/2021 08:51:15 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 08:51:25 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:51:25 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:51:25 - INFO - __main__ -   Epoch: 0029 | Time: 0m_9s | train_loss: 0.163 | val_loss: 0.599
06/29/2021 08:51:25 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7704160246533128, 'f1': 0.7318962529631119, 'precision': 0.7472091277938038, 'recall': 0.7233682983682983}
06/29/2021 08:51:25 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 08:51:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:51:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:51:35 - INFO - __main__ -   Epoch: 0030 | Time: 0m_9s | train_loss: 0.145 | val_loss: 0.634
06/29/2021 08:51:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7873651771956857, 'f1': 0.7432576539387685, 'precision': 0.7768980061349693, 'recall': 0.7295454545454545}
06/29/2021 08:51:35 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 08:51:44 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:51:44 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:51:44 - INFO - __main__ -   Epoch: 0031 | Time: 0m_9s | train_loss: 0.158 | val_loss: 0.626
06/29/2021 08:51:44 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7827426810477658, 'f1': 0.7469785575048733, 'precision': 0.7619291705498602, 'recall': 0.7382284382284382}
06/29/2021 08:51:44 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 08:51:54 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:51:54 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:51:54 - INFO - __main__ -   Epoch: 0032 | Time: 0m_9s | train_loss: 0.145 | val_loss: 0.691
06/29/2021 08:51:54 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.7345067213488267, 'precision': 0.7305115032387759, 'recall': 0.7405594405594406}
06/29/2021 08:51:54 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 08:51:54 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 08:51:54 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_E_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:51:54 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_E_monotask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
06/29/2021 08:51:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 08:51:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 08:51:58 - INFO - __main__ -   best_val_loss: 0.532
06/29/2021 08:51:58 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7981510015408321, 'f1': 0.7673930589184825, 'precision': 0.7786621670757203, 'recall': 0.7598484848484848}
