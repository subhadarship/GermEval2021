06/29/2021 10:32:56 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 10:32:56 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_D
	dev_data_dir: ../data/cross_validation/fold_D
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-german-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 128
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_D_multitask/bert-base-german-cased/trg_fc128_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_D_multitask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-german-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 10:32:56 - INFO - __main__ -   device: cuda
06/29/2021 10:32:56 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-german-cased
06/29/2021 10:32:57 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1522 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:32:57 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2871 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:32:58 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1615 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:32:58 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2708 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:32:58 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 667 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   val sentence max len: 461
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   train OOV: 578 (0.49%) out of 117604 running tokens are OOV
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   val OOV: 113 (0.40%) out of 28524 running tokens are OOV
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [3, 26991, 960, 8242, 785, 6059, 16261, 47, 17671, 309, 702, 26972, 4], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [3, 5721, 3359, 20690, 26972, 99, 130, 6294, 42, 39, 7461, 50, 30, 17286, 416, 26918, 292, 153, 2480, 4601, 335, 1423, 3382, 26914, 5721, 3359, 20690, 10356, 149, 26914, 1671, 555, 155, 2527, 1941, 5721, 24231, 204, 659, 918, 19807, 26954, 557, 6587, 149, 20166, 321, 26955, 252, 13377, 4048, 26914, 26914, 26914, 26914, 9689, 26897, 30, 11760, 194, 2683, 10867, 26914, 1073, 5406, 42, 7926, 415, 356, 9207, 7, 3934, 26914, 1851, 3278, 149, 181, 153, 1807, 1169, 3667, 5337, 1835, 6303, 26914, 26914, 26914, 1882, 5337, 1835, 1279, 1169, 4013, 26914, 26914, 26914, 5697, 138, 267, 30, 3554, 24370, 26897, 26914, 26914, 26914, 15615, 26914, 26914, 26914, 84, 8242, 26938, 61, 26962, 26943, 26943, 26982, 13157, 148, 26918, 26935, 19807, 50, 225, 560, 114, 2702, 49, 15059, 9914, 26914, 4], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [3, 5534, 181, 26918, 1169, 26031, 194, 668, 6095, 26902, 26918, 348, 4058, 1169, 2386, 764, 50, 86, 4029, 212, 2519, 493, 15146, 24357, 257, 671, 26914, 26914, 26914, 12965, 26929, 8699, 18112, 26929, 26914, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [3, 26991, 960, 8242, 371, 9685, 26918, 181, 246, 5175, 26972, 12491, 19125, 4053, 2, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 10:32:59 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [3, 8854, 13809, 5137, 6, 1547, 12494, 4774, 4780, 21748, 26900, 266, 26914, 4], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 10:33:01 - INFO - data_utils.preprocess_bert -   there are nearly 128 batches in an epoch
06/29/2021 10:33:03 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30000, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=128, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=128, out_features=2, bias=True)
    (1): Linear(in_features=128, out_features=2, bias=True)
    (2): Linear(in_features=128, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 10:33:03 - INFO - __main__ -   the model has 99,206 trainable parameters
06/29/2021 10:33:03 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 10:33:13 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:33:13 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:33:13 - INFO - __main__ -   Epoch: 0001 | Time: 0m_10s | train_loss: 1.709 | val_loss: 1.479
06/29/2021 10:33:13 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7627118644067796, 'f1': 0.7315877108174885, 'precision': 0.7358952499617462, 'recall': 0.7281790501966423}
06/29/2021 10:33:13 - INFO - __main__ -   	--Found new best val f1
06/29/2021 10:33:13 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 10:33:23 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:33:23 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:33:23 - INFO - __main__ -   Epoch: 0002 | Time: 0m_9s | train_loss: 1.541 | val_loss: 1.427
06/29/2021 10:33:23 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7308369693664212, 'precision': 0.759297520661157, 'recall': 0.7189231192117393}
06/29/2021 10:33:23 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 10:33:33 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:33:33 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:33:33 - INFO - __main__ -   Epoch: 0003 | Time: 0m_9s | train_loss: 1.481 | val_loss: 1.451
06/29/2021 10:33:33 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7115486257928119, 'precision': 0.7744481122343718, 'recall': 0.6968907260963335}
06/29/2021 10:33:33 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 10:33:43 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:33:43 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:33:43 - INFO - __main__ -   Epoch: 0004 | Time: 0m_9s | train_loss: 1.439 | val_loss: 1.414
06/29/2021 10:33:43 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7765793528505393, 'f1': 0.7322797684243467, 'precision': 0.7617299471963792, 'recall': 0.7200913435108047}
06/29/2021 10:33:43 - INFO - __main__ -   	--Found new best val f1
06/29/2021 10:33:46 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 10:33:56 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:33:56 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:33:56 - INFO - __main__ -   Epoch: 0005 | Time: 0m_9s | train_loss: 1.371 | val_loss: 1.425
06/29/2021 10:33:56 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7485064162073705, 'precision': 0.768565566926692, 'recall': 0.7380428807036834}
06/29/2021 10:33:56 - INFO - __main__ -   	--Found new best val f1
06/29/2021 10:34:00 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 10:34:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:34:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:34:09 - INFO - __main__ -   Epoch: 0006 | Time: 0m_9s | train_loss: 1.340 | val_loss: 1.448
06/29/2021 10:34:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7395270636728495, 'precision': 0.7472640982691234, 'recall': 0.7340941768511862}
06/29/2021 10:34:09 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 10:34:19 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:34:19 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:34:19 - INFO - __main__ -   Epoch: 0007 | Time: 0m_9s | train_loss: 1.311 | val_loss: 1.454
06/29/2021 10:34:19 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7266753588406332, 'precision': 0.7636802925427713, 'recall': 0.7134520235124964}
06/29/2021 10:34:19 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 10:34:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:34:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:34:29 - INFO - __main__ -   Epoch: 0008 | Time: 0m_9s | train_loss: 1.279 | val_loss: 1.629
06/29/2021 10:34:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7174741746476221, 'precision': 0.7659622985709942, 'recall': 0.7034560409354252}
06/29/2021 10:34:29 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 10:34:39 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:34:39 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:34:39 - INFO - __main__ -   Epoch: 0009 | Time: 0m_9s | train_loss: 1.251 | val_loss: 1.485
06/29/2021 10:34:39 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.7230685057736055, 'precision': 0.7211580367334233, 'recall': 0.7253245654839937}
06/29/2021 10:34:39 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 10:34:49 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:34:49 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:34:49 - INFO - __main__ -   Epoch: 0010 | Time: 0m_9s | train_loss: 1.232 | val_loss: 1.471
06/29/2021 10:34:49 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7750385208012327, 'f1': 0.7339685997933605, 'precision': 0.7564907465876524, 'recall': 0.7232999957711337}
06/29/2021 10:34:49 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 10:34:59 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:34:59 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:34:59 - INFO - __main__ -   Epoch: 0011 | Time: 0m_9s | train_loss: 1.176 | val_loss: 1.522
06/29/2021 10:34:59 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.765793528505393, 'f1': 0.7268700024364853, 'precision': 0.7423309646098641, 'recall': 0.7184790882564385}
06/29/2021 10:34:59 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 10:35:08 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:35:08 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:35:08 - INFO - __main__ -   Epoch: 0012 | Time: 0m_9s | train_loss: 1.162 | val_loss: 1.552
06/29/2021 10:35:08 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7550077041602465, 'f1': 0.7218758843743683, 'precision': 0.7271039876624807, 'recall': 0.7179610521419207}
06/29/2021 10:35:08 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 10:35:18 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:35:18 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:35:18 - INFO - __main__ -   Epoch: 0013 | Time: 0m_9s | train_loss: 1.162 | val_loss: 1.474
06/29/2021 10:35:18 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7200038349072431, 'precision': 0.7435281837160752, 'recall': 0.7096513299784328}
06/29/2021 10:35:18 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 10:35:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:35:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:35:28 - INFO - __main__ -   Epoch: 0014 | Time: 0m_9s | train_loss: 1.101 | val_loss: 1.547
06/29/2021 10:35:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.773497688751926, 'f1': 0.7129847742308144, 'precision': 0.7776641470283089, 'recall': 0.698058950395399}
06/29/2021 10:35:28 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 10:35:38 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:35:38 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:35:38 - INFO - __main__ -   Epoch: 0015 | Time: 0m_9s | train_loss: 1.059 | val_loss: 1.529
06/29/2021 10:35:38 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7303917176439922, 'precision': 0.7382976102488298, 'recall': 0.7249703979363132}
06/29/2021 10:35:38 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 10:35:38 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 10:35:38 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_D_multitask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
06/29/2021 10:35:38 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_D_multitask/bert-base-german-cased/trg_fc128_lr0.0005_frozen
06/29/2021 10:35:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 10:35:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 10:35:41 - INFO - __main__ -   best_val_loss: 1.425
06/29/2021 10:35:41 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.785824345146379, 'f1': 0.7485064162073705, 'precision': 0.768565566926692, 'recall': 0.7380428807036834}
