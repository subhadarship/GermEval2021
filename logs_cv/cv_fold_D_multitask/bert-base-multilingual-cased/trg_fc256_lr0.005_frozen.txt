06/29/2021 12:43:21 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

06/29/2021 12:43:21 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	train_data_dir: ../data/cross_validation/fold_D
	dev_data_dir: ../data/cross_validation/fold_D
	test_data_dir: None
	label_col_names: Sub1_Toxic,Sub2_Engaging,Sub3_FactClaiming
	eval_label_col_names: Sub3_FactClaiming
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_cv/cv_fold_D_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen.txt
	random_seed: 123
	lr: 0.005
	clip: 1.0
	max_epochs: 999
	model_dir: /mnt/backup/panda/GermEval2021/models/cv_fold_D_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

06/29/2021 12:43:23 - INFO - __main__ -   device: cuda
06/29/2021 12:43:23 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
06/29/2021 12:43:24 - WARNING - data_utils.bert_data -   trimming sentence 110 of length 1550 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:43:24 - WARNING - data_utils.bert_data -   trimming sentence 688 of length 2626 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:43:24 - WARNING - data_utils.bert_data -   trimming sentence 1546 of length 1645 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:43:24 - WARNING - data_utils.bert_data -   trimming sentence 1896 of length 2491 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:43:25 - WARNING - data_utils.bert_data -   trimming sentence 1968 of length 752 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:43:25 - WARNING - data_utils.bert_data -   trimming sentence 510 of length 516 to 512 tokens (trimmed tokens include [CLS] and [SEP] tokens)
06/29/2021 12:43:25 - INFO - data_utils.preprocess_bert -   num train samples: 2595
06/29/2021 12:43:25 - INFO - data_utils.preprocess_bert -   num val samples: 649
06/29/2021 12:43:25 - INFO - data_utils.preprocess_bert -   num test samples: None
06/29/2021 12:43:25 - INFO - data_utils.preprocess_bert -   train sentence max len: 512
06/29/2021 12:43:25 - INFO - data_utils.preprocess_bert -   val sentence max len: 512
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   train OOV: 520 (0.40%) out of 131388 running tokens are OOV
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   val OOV: 97 (0.30%) out of 32211 running tokens are OOV
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: @USER beim korrupten Erdogan oder hier?, text ids: [101, 137, 10808, 24093, 12632, 33705, 46791, 10136, 10915, 62039, 10206, 10760, 13329, 136, 102], original labels: 0 0 1, label ids: [[0], [0], [1]]
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: Mietpreisbremse? 2 StÃ¼hle und ein Tisch in die Butze, wird als mÃ¶bliert vermietet. Mietpreisbremse greift nicht. Ich habe eine zeitlang Mietangebote Ã¼ber 15 Euro kalt (wenn offensichtlich nicht modernisiert) zur Anzeige gebracht.... Habe die Anbieter auch darÃ¼ber informiert. Von Staatsanwalt und Wohnungsant nur Einstellungen gekommen. Is ja nicht so als hÃ¤tte ich mir irgend etwas erwartet... Aber irgend etwas will ich tun... Erbsen unter die Matratze... Etwas... HERR GOTT! Oft 20,- kalt in einer Stadt mit niederem Durchschnittseinkommen., text ids: [101, 19803, 10308, 27516, 13724, 71799, 136, 123, 10838, 94284, 10130, 10290, 29033, 12044, 10106, 10128, 16976, 10870, 117, 10790, 10223, 11522, 48850, 11605, 16719, 18485, 12392, 119, 19803, 10308, 27516, 13724, 71799, 30518, 11998, 12961, 10726, 119, 21023, 21404, 10359, 10941, 10486, 17356, 19803, 18451, 10525, 25022, 10112, 10848, 10208, 17526, 32383, 113, 16082, 84646, 65381, 10726, 84984, 56109, 114, 10736, 10313, 53228, 10525, 28989, 119, 119, 119, 119, 13740, 11044, 10128, 10313, 93760, 10165, 10515, 35159, 26978, 76936, 11605, 119, 12273, 28435, 14434, 57710, 10130, 79427, 31271, 11354, 104731, 10136, 70195, 119, 12034, 10201, 10726, 10380, 10223, 43667, 12979, 36077, 10478, 62589, 23942, 10163, 102775, 119, 119, 119, 52567, 10478, 62589, 23942, 11337, 12979, 53100, 119, 119, 119, 10915, 19528, 10136, 11124, 10128, 57471, 12553, 10870, 119, 119, 119, 76195, 10107, 119, 119, 119, 145, 24093, 11273, 41525, 11090, 11090, 106, 12610, 10123, 10197, 117, 118, 32383, 10106, 10599, 11878, 10221, 63694, 10451, 17400, 51577, 83866, 20271, 119, 102], original labels: 1 0 1, label ids: [[1], [0], [1]]
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Ach so, ich trage auch keine Jeans, da bin ich sicher schon in den 80ern indoktriniert worden ...VOM ISLAM. ðŸ˜‚, text ids: [101, 138, 10269, 10380, 117, 12979, 11264, 10525, 10515, 14618, 10766, 10107, 117, 10143, 16292, 12979, 78963, 16363, 10106, 10140, 10832, 13979, 74502, 12495, 24387, 11605, 11425, 119, 119, 119, 159, 37079, 40214, 44376, 11517, 119, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: @USER Sie meinen, so wie 1933? Intessant ðŸ¤”, text ids: [101, 137, 10808, 24093, 11583, 99864, 10115, 117, 10380, 10953, 11247, 136, 81687, 18621, 10368, 100, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:43:26 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: Jeder Motorrad fahrer sollte automatisch Organspender werden., text ids: [101, 105818, 19440, 18599, 12211, 50935, 17799, 51055, 72154, 54609, 27323, 10615, 119, 102], original labels: 0 0 0, label ids: [[0], [0], [0]]
06/29/2021 12:43:27 - INFO - data_utils.preprocess_bert -   there are nearly 142 batches in an epoch
06/29/2021 12:43:31 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=2, bias=True)
    (1): Linear(in_features=256, out_features=2, bias=True)
    (2): Linear(in_features=256, out_features=2, bias=True)
  )
)
-----------------------------------------------------------------------------------------

06/29/2021 12:43:31 - INFO - __main__ -   the model has 198,406 trainable parameters
06/29/2021 12:43:31 - INFO - __main__ -   ðŸŒ‹  starting training..
06/29/2021 12:43:42 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:43:42 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:43:42 - INFO - __main__ -   Epoch: 0001 | Time: 0m_11s | train_loss: 1.935 | val_loss: 1.801
06/29/2021 12:43:42 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6332819722650231, 'f1': 0.6323313782991202, 'precision': 0.676248380344862, 'recall': 0.6869476043472744}
06/29/2021 12:43:42 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:43:43 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:43:55 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:43:55 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:43:55 - INFO - __main__ -   Epoch: 0002 | Time: 0m_11s | train_loss: 1.761 | val_loss: 2.329
06/29/2021 12:43:55 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.46070878274268107, 'f1': 0.4385258058137236, 'precision': 0.6540570603387714, 'recall': 0.5834619613481625}
06/29/2021 12:43:55 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:44:06 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:44:06 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:44:07 - INFO - __main__ -   Epoch: 0003 | Time: 0m_11s | train_loss: 1.745 | val_loss: 1.869
06/29/2021 12:44:07 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7211093990755008, 'f1': 0.7066684978712247, 'precision': 0.7043893497974146, 'recall': 0.7239924726180911}
06/29/2021 12:44:07 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:44:15 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:44:26 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:44:26 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:44:26 - INFO - __main__ -   Epoch: 0004 | Time: 0m_11s | train_loss: 1.659 | val_loss: 1.936
06/29/2021 12:44:26 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7111837175316753, 'precision': 0.7434324164067132, 'recall': 0.6996553474013617}
06/29/2021 12:44:26 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:44:34 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:44:45 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:44:45 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:44:45 - INFO - __main__ -   Epoch: 0005 | Time: 0m_11s | train_loss: 1.671 | val_loss: 1.684
06/29/2021 12:44:45 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7303543913713405, 'f1': 0.7099845001621482, 'precision': 0.705863350826972, 'recall': 0.718965407874149}
06/29/2021 12:44:45 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:44:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:44:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:44:57 - INFO - __main__ -   Epoch: 0006 | Time: 0m_11s | train_loss: 1.636 | val_loss: 1.542
06/29/2021 12:44:57 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.7036136768757091, 'precision': 0.7508125677139762, 'recall': 0.6909015942825729}
06/29/2021 12:44:57 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:45:09 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:45:09 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:45:09 - INFO - __main__ -   Epoch: 0007 | Time: 0m_11s | train_loss: 1.581 | val_loss: 1.940
06/29/2021 12:45:09 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6979969183359014, 'f1': 0.6895585622522892, 'precision': 0.6962996732771065, 'recall': 0.7185055186704444}
06/29/2021 12:45:09 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:45:20 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:45:20 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:45:20 - INFO - __main__ -   Epoch: 0008 | Time: 0m_11s | train_loss: 1.612 | val_loss: 1.578
06/29/2021 12:45:20 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.736517719568567, 'f1': 0.7118184580149105, 'precision': 0.7088470424666217, 'recall': 0.7159787710914705}
06/29/2021 12:45:20 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:45:29 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:45:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:45:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:45:40 - INFO - __main__ -   Epoch: 0009 | Time: 0m_11s | train_loss: 1.590 | val_loss: 1.771
06/29/2021 12:45:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.637904468412943, 'f1': 0.6328699524583259, 'precision': 0.6525147306397306, 'recall': 0.6685678944474986}
06/29/2021 12:45:40 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:45:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:45:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:45:52 - INFO - __main__ -   Epoch: 0010 | Time: 0m_11s | train_loss: 1.577 | val_loss: 1.939
06/29/2021 12:45:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7611710323574731, 'f1': 0.6905730834417613, 'precision': 0.768361581920904, 'recall': 0.6777709646043896}
06/29/2021 12:45:52 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:46:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:46:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:46:04 - INFO - __main__ -   Epoch: 0011 | Time: 0m_11s | train_loss: 1.614 | val_loss: 1.791
06/29/2021 12:46:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6394453004622496, 'f1': 0.6389918986764034, 'precision': 0.690745800445254, 'recall': 0.6992800355224764}
06/29/2021 12:46:04 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:46:15 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:46:15 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:46:15 - INFO - __main__ -   Epoch: 0012 | Time: 0m_11s | train_loss: 1.581 | val_loss: 1.742
06/29/2021 12:46:15 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7395993836671803, 'f1': 0.722748425812877, 'precision': 0.7184549692482469, 'recall': 0.7358227259271789}
06/29/2021 12:46:15 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:46:23 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:46:35 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:46:35 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:46:35 - INFO - __main__ -   Epoch: 0013 | Time: 0m_11s | train_loss: 1.539 | val_loss: 1.674
06/29/2021 12:46:35 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.765793528505393, 'f1': 0.7126980428704568, 'precision': 0.753771812080537, 'recall': 0.6998773628790121}
06/29/2021 12:46:35 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:46:47 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:46:47 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:46:47 - INFO - __main__ -   Epoch: 0014 | Time: 0m_11s | train_loss: 1.559 | val_loss: 1.859
06/29/2021 12:46:47 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7057010785824345, 'f1': 0.6941738111392093, 'precision': 0.6955837166249976, 'recall': 0.7166871061868313}
06/29/2021 12:46:47 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:46:58 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:46:58 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:46:58 - INFO - __main__ -   Epoch: 0015 | Time: 0m_11s | train_loss: 1.572 | val_loss: 1.576
06/29/2021 12:46:58 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.6815228464233359, 'precision': 0.7653133667943468, 'recall': 0.6698894151477989}
06/29/2021 12:46:58 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:47:10 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:47:10 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:47:10 - INFO - __main__ -   Epoch: 0016 | Time: 0m_11s | train_loss: 1.534 | val_loss: 1.705
06/29/2021 12:47:10 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7473035439137135, 'f1': 0.716152500426694, 'precision': 0.718277555239695, 'recall': 0.7143083689262909}
06/29/2021 12:47:10 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:47:22 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:47:22 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:47:22 - INFO - __main__ -   Epoch: 0017 | Time: 0m_11s | train_loss: 1.522 | val_loss: 1.601
06/29/2021 12:47:22 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7442218798151001, 'f1': 0.7152545777477058, 'precision': 0.7152545777477058, 'recall': 0.7152545777477058}
06/29/2021 12:47:22 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:47:34 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:47:34 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:47:34 - INFO - __main__ -   Epoch: 0018 | Time: 0m_11s | train_loss: 1.491 | val_loss: 1.911
06/29/2021 12:47:34 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7288135593220338, 'f1': 0.7048292400562309, 'precision': 0.7014687100893997, 'recall': 0.7101376495961433}
06/29/2021 12:47:34 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:47:46 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:47:46 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:47:46 - INFO - __main__ -   Epoch: 0019 | Time: 0m_11s | train_loss: 1.546 | val_loss: 1.614
06/29/2021 12:47:46 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7378400855411666, 'precision': 0.7375836023377007, 'recall': 0.7381010276144966}
06/29/2021 12:47:46 - INFO - __main__ -   	--Found new best val f1
06/29/2021 12:47:54 - INFO - __main__ -   	current patience value: 0/10
06/29/2021 12:48:05 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:48:05 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:48:05 - INFO - __main__ -   Epoch: 0020 | Time: 0m_11s | train_loss: 1.515 | val_loss: 1.613
06/29/2021 12:48:05 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7719568567026194, 'f1': 0.7211616619057573, 'precision': 0.7614231761483019, 'recall': 0.7078329174948197}
06/29/2021 12:48:05 - INFO - __main__ -   	current patience value: 1/10
06/29/2021 12:48:17 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:48:17 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:48:17 - INFO - __main__ -   Epoch: 0021 | Time: 0m_11s | train_loss: 1.540 | val_loss: 1.619
06/29/2021 12:48:17 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7550077041602465, 'f1': 0.6895549598823094, 'precision': 0.7488068771305766, 'recall': 0.6774749439675223}
06/29/2021 12:48:17 - INFO - __main__ -   	current patience value: 2/10
06/29/2021 12:48:29 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:48:29 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:48:29 - INFO - __main__ -   Epoch: 0022 | Time: 0m_11s | train_loss: 1.528 | val_loss: 1.568
06/29/2021 12:48:29 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.74884437596302, 'f1': 0.6924054350322898, 'precision': 0.729432197728791, 'recall': 0.6815557998900494}
06/29/2021 12:48:29 - INFO - __main__ -   	current patience value: 3/10
06/29/2021 12:48:41 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:48:41 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:48:41 - INFO - __main__ -   Epoch: 0023 | Time: 0m_11s | train_loss: 1.470 | val_loss: 2.000
06/29/2021 12:48:41 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.6271186440677966, 'f1': 0.6269689714796025, 'precision': 0.6860673463083102, 'recall': 0.6910284602698017}
06/29/2021 12:48:41 - INFO - __main__ -   	current patience value: 4/10
06/29/2021 12:48:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:48:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:48:52 - INFO - __main__ -   Epoch: 0024 | Time: 0m_11s | train_loss: 1.538 | val_loss: 1.586
06/29/2021 12:48:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7565485362095532, 'f1': 0.6993890569666268, 'precision': 0.7425492610837439, 'recall': 0.6873969213853766}
06/29/2021 12:48:52 - INFO - __main__ -   	current patience value: 5/10
06/29/2021 12:49:04 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:49:04 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:49:04 - INFO - __main__ -   Epoch: 0025 | Time: 0m_11s | train_loss: 1.516 | val_loss: 1.615
06/29/2021 12:49:04 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7272727272727273, 'f1': 0.7071814754486989, 'precision': 0.703121592418565, 'recall': 0.7166289592760181}
06/29/2021 12:49:04 - INFO - __main__ -   	current patience value: 6/10
06/29/2021 12:49:16 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:49:16 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:49:16 - INFO - __main__ -   Epoch: 0026 | Time: 0m_11s | train_loss: 1.507 | val_loss: 1.711
06/29/2021 12:49:16 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7457627118644068, 'f1': 0.6585484842977262, 'precision': 0.7597632058287795, 'recall': 0.6507696536558549}
06/29/2021 12:49:16 - INFO - __main__ -   	current patience value: 7/10
06/29/2021 12:49:28 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:49:28 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:49:28 - INFO - __main__ -   Epoch: 0027 | Time: 0m_11s | train_loss: 1.448 | val_loss: 1.951
06/29/2021 12:49:28 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7627118644067796, 'f1': 0.698776371308017, 'precision': 0.7615757304710793, 'recall': 0.6855045037425467}
06/29/2021 12:49:28 - INFO - __main__ -   	current patience value: 8/10
06/29/2021 12:49:40 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:49:40 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:49:40 - INFO - __main__ -   Epoch: 0028 | Time: 0m_11s | train_loss: 1.526 | val_loss: 1.670
06/29/2021 12:49:40 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7140203388658966, 'precision': 0.7484266916315598, 'recall': 0.7019917959994926}
06/29/2021 12:49:40 - INFO - __main__ -   	current patience value: 9/10
06/29/2021 12:49:52 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:49:52 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:49:52 - INFO - __main__ -   Epoch: 0029 | Time: 0m_11s | train_loss: 1.492 | val_loss: 1.887
06/29/2021 12:49:52 - INFO - __main__ -   ðŸ”¥ val metrics ðŸ”¥ {'acc': 0.7580893682588598, 'f1': 0.7092468147640856, 'precision': 0.7378824752199153, 'recall': 0.6984131179430795}
06/29/2021 12:49:52 - INFO - __main__ -   	current patience value: 10/10
06/29/2021 12:49:52 - INFO - __main__ -   	--STOPPING EARLY
06/29/2021 12:49:52 - INFO - __main__ -   load checkpoint from /mnt/backup/panda/GermEval2021/models/cv_fold_D_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
06/29/2021 12:49:52 - INFO - __main__ -   load model weights from checkpoint in /mnt/backup/panda/GermEval2021/models/cv_fold_D_multitask/bert-base-multilingual-cased/trg_fc256_lr0.005_frozen
06/29/2021 12:49:57 - INFO - training_utils.train_loop -   postprocessing targets..
06/29/2021 12:49:57 - INFO - training_utils.train_loop -   postprocessing predictions..
06/29/2021 12:49:57 - INFO - __main__ -   best_val_loss: 1.614
06/29/2021 12:49:57 - INFO - __main__ -   ðŸ”¥ best validation metrics ðŸ”¥ {'acc': 0.7642526964560863, 'f1': 0.7378400855411666, 'precision': 0.7375836023377007, 'recall': 0.7381010276144966}
